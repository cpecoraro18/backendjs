#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#
# chkconfig: 2345 91 91
# description: backendjs server
#

BKJS=bkjs
BKJS_MOD=backendjs

PLATFORM=$(uname -s)
case "$PLATFORM" in
  Linux)
    [ "$(grep CentOS /etc/issue)" != "" ] && OS_TYPE=centos
    [ "$(grep Amazon /etc/issue)" != "" ] && OS_TYPE=amazon
    [ -f /etc/sysconfig/$BKJS ] && . /etc/sysconfig/$BKJS
    KILLALL="killall -qr"
    ECHO="echo -e"
    SED="sed -r -i"
    ;;

  Darwin)
    OS_TYPE=macosx
    [ "$BKJS_HOME" = "" ] && export BKJS_HOME=~/.bkjs
    [ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=/opt/local
    KILLALL="killall -m"
    ECHO="echo -e"
    SED="sed -E -i .orig"
    ;;

  *)
    echo "Unsupported platform"
    exit 1
    ;;
esac

# There are special commands that can be used as the script name
NAME=$(basename $0)
if [ "${NAME:0:2}" = "bk" -a "$NAME" != $BKJS ]; then
   BKJS_CMD=$NAME
else
   BKJS_CMD=$1
   shift
fi

# Returns an argument value by name, format is -name value
BKJS_ARGS=("$@")
get_arg() {
  for ((i = 0;i < ${#BKJS_ARGS[@]}; ++i)); do
    [ "$1" = "${BKJS_ARGS[i]}" ] && echo "${BKJS_ARGS[i+1]}" && return 0
  done
  echo "$2"
}

# Returns 1 if an argument exists
get_flag() {
  for ((i = 0;i < ${#BKJS_ARGS[@]}; ++i)); do
    [ "$1" = "${BKJS_ARGS[i]}" ] && echo "1" && return 0
  done
}

# Concatenate args
concat_arg() {
  _v=$(get_arg $1)
  [ "$_v" == "" ] && echo $2
  [ "$2" != "" ] && _v="$2 $_v"
  echo "$_v"
}

# Return value of the named pair from the variable that holds all them
get_value() {
  v=$(echo "$1"|awk -F= "{if(\$1==\"$2\" && \$2!=\"\") print \$2}")
  echo "${v:-$3}"
}

# Return config parameter value by name
get_config() {
  for ((i = 0;i < ${#BKJS_ARGS[@]}; ++i)); do
    [ "$2" = "${BKJS_ARGS[i]}" ] && eval "$1=${BKJS_ARGS[i+1]}" && return 0
  done
  [ -z $BKJS_DB_ARGS ] && BKJS_DB_ARGS=(`$0 shell -log none -db-get-config -format args`)
  for ((i = 0;i < ${#BKJS_DB_ARGS[@]}; ++i)); do
    [ "$2" = "${BKJS_DB_ARGS[i]}" ] && eval "$1=${BKJS_DB_ARGS[i+1]}" && return
  done
  [ "$3" != "" ] && eval "$1=$3"
}

# Return the value for the given named config parameter
get_config_value() {
  [ "$1" == "" ] && return
  echo $($0 shell -log none -db-get-config -format value name "$1")
}

# Return the value for a property from package.json file
get_package_json() {
  v=$(node -e "try{console.log(JSON.parse(require('fs').readFileSync('package.json')).$1)}catch(e){}")
  echo "${v:-$2}"
}

# Kill a process by name: kill_proc redis -9
kill_proc() {
  pid=$(ps agx|grep "$1"|grep -v grep|awk "{print \$1}")
  [ "$pid" = "" ] && return
  kill "$2" $pid
}

# Resolve package location
find_bkjs() {
  v=$(node -e "try{console.log(require.resolve('$BKJS_MOD').replace('lib/index.js',''))}catch(e){}")
  [[ ! -z $v ]] && echo "$v$1"
}

# Resolve bkjs shell script location
find_bkjsbin() {
  [ "$BKJS_BIN" = "" -a -f $BKJS_HOME/bin/$BK ] && export BKJS_BIN=$BKJS_HOME/bin/$BK
  [ "$BKJS_BIN" = "" -a -f $BKJS_PREFIX/bin/$BK ] && export BKJS_BIN=$BKJS_PREFIX/bin/$BK
  [ "$BKJS_BIN" = "" ] && export BKJS_BIN=$(which $BK 2>/dev/null)
}

# Resolve node binary location
find_nodebin() {
  [ "$NODE_BIN" = "" -a -f $BKJS_HOME/bin/node ] && export NODE_BIN=$BKJS_HOME/bin/node
  [ "$NODE_BIN" = "" -a -f $BKJS_PREFIX/bin/node ] && export NODE_BIN=$BKJS_PREFIX/bin/node
  [ "$NODE_BIN" = "" ] && export NODE_BIN=$(which node 2>/dev/null)
}

# Use configured or provided user:group, defaults to the current user
find_user() {
  export BKJS_USER=$(get_arg -user $BKJS_USER)
  [ "$BKJS_USER" = "" ] && export BKJS_USER=$(whoami)
  export BKJS_GROUP=$(get_arg -group $BKJS_GROUP)
  [ "$BKJS_GROUP" = "" ] && export BKJS_GROUP=$(id -gn)
}

# Run the command by sourcing all scripts from tools folders, if $1 is not empty then
# run all tools scripts, otherwise stop once the command is processed
process_cmd() {
  dirs="$BKJS_TOOLS $BKJS_HOME/tools $(find_bkjs tools)"
  for d in $dirs; do
     if [ -d $d ]; then
        for f in $d/bkjs-*; do
           unset BKJS_UNKNOWN
           source $f
           [[ -z $BKJS_UNKNOWN && -z $1 ]] && exit 0
        done
     fi
  done
}
process_cmds() { process_cmd 1; }

# Home and prefix must be specified for the script to work properly
export BKJS_HOME=$(get_arg -home $BKJS_HOME)
[ "$BKJS_HOME" = "" ] && export BKJS_HOME=$(sh -c "echo ~$BKJS_USER")
[ -f $BKJS_HOME/etc/profile ] && . $BKJS_HOME/etc/profile

export BKJS_PREFIX=$(get_arg -prefix $BKJS_PREFIX)
[ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=$BKJS_HOME

# Setup paths
export PATH=$BKJS_HOME/bin:$BKJS_HOME/node_modules/.bin:$BKJS_PREFIX/bin:/usr/local/bin:/opt/local/bin:/sbin:/usr/sbin:$PATH

[ ! -z "$(get_flag -debug)" ] && echo "$0: CMD=$BKJS_CMD, HOME=$BKJS_HOME, PREFIX=$BKJS_PREFIX"

case "$BKJS_CMD" in
  start)
    $0 check-server
    $0 run-${BKJS_SERVER:-monitor}
    ;;

  restart)
    $0 stop
    sleep 3
    $0 start
    ;;

  restart-api|stop-api)
    $KILLALL -USR2 "$BKJS: server"
    $KILLALL -USR2 "$BKJS: master"
    exit 0
    ;;

  stop)
    $KILLALL $1 "$BKJS:"
    sleep 1
    $KILLALL $1 "$BKJS:"
    exit 0
    ;;

  status)
    ;;

  stop-web|stop-server|stop-master|stop-worker)
    name=${BKJS_CMD:5}
    [ "$name" = "" ] && exit 0
    $KILLALL $1 "$BKJS: $name"
    exit 0
    ;;

  bkrsync)
    cmd=""
    while [ "$1" = "-bkcmd" ]; do
       cmd=$2
       shift;shift
    done
    rsync "$@"
    rc=$?
    [ "$rc" != "0" ] && exit $rc
    [ "$cmd" != "" ] && logger -p local0.notice -t bkrsync "$cmd" && $cmd
    exit 0
    ;;

  check-server)
    if [ "$(whoami)" = "root" ]; then
       # Setup domain from the config, keep the hostname as it is, for EC2 instances it is the IP address
       domain=$(get_arg -domain $BKJS_DOMAIN)
       [ "$domain" != "" ] && $0 init-hostname -domain $domain
       # New instance started from existing AMI which might have old log files
       if [ -f $BKJS_HOME/var/bkjs.init ]; then
          rm -rf $BKJS_HOME/var/* $BKJS_HOME/log/*
          service rsyslog restart
       fi
       process_cmds
       find_user
       chown -R $BKJS_USER $BKJS_HOME/etc $BKJS_HOME/var $BKJS_HOME/log
    fi
    ;;

  check-adhoc)
    [ "$BKJS_IDLETIME" = "" ] && BKJS_IDLETIME=900
    [ "$BKJS_UPTIME" = "" ] && BKJS_UPTIME=43200
    uptime=$(</proc/uptime)
    uptime=${uptime%%.*}
    if [ $uptime -gt $BKJS_IDLETIME ]; then
       ps=$(ps agx|grep "$BKJS: worker"|grep -v grep)
       if [ "$ps" = "" ]; then
          logger "No backend is running, $uptime/$BKJS_IDLETIME, shutting down..."
          echo $ps >> /var/log/messages
          /sbin/halt
       fi
   fi
   if [ $uptime -gt $BKJS_UPTIME ]; then
      logger "Running too long, $uptime/$BKJS_UPTIME, shutting down..."
      /sbin/halt
   fi
   ;;

  check-hostname)
    # Check hostname for the eth0 and setup /etc/hosts with EC2 host name
    addr=$(/sbin/ifconfig eth0|grep 'inet '|sed 's/addr://'|awk '{print $2}')
    [ "$addr" = "" ] && echo "No IP address found" && exit
    host=ip-$(echo $addr|sed 's/\./-/g')
    domain=$(get_arg -domain $BKJS_DOMAIN)
    [ "$domain" = "" ] && domain=$(uname -n|cut -d. -f2-)
    hostname=$host
    [ "$domain" != "" ] && hostname="$host.$domain"
    if [ "$(grep -s $addr /etc/hosts)" = "" -o "$(grep -s $host /etc/hosts)" = "" ]; then
       echo "127.0.0.1 localhost localhost.localdomain" > /etc/hosts
       echo "$addr $hostname" >> /etc/hosts
       echo "$addr localip" >> /etc/hosts
       $0 init-hostname -host $host -domain $domain
    fi
    ;;

  send-alert)
    event=$(get_arg -event $MONIT_EVENT)
    descr=$(get_arg -descr $MONIT_DESCRIPTION)
    [ "$event" = "" -a "$descr" = "" ] && exit
    host=${MONIT_HOST:-$(uname -n)}
    ip=$(/sbin/ifconfig eth0|grep 'inet '|sed 's/addr://'|awk '{print $2}')
    subject="ALERT: $host/$ip $event"
    msg=$($ECHO "$subject\n\n$descr\n\n$(df -h)\n\n$(free)\n\n$(ps agx)")
    echo $msg >> $BKJS_HOME/log/error.log
    process_cmds
    email=$(grep 'set alert' /etc/monit.d/*|tail -1|awk '{print $NF}')
    if [ "$email" != "" ]; then
       $ECHO "From:$email\nTo:$email\nSubject: $subject\n\n$(echo "$msg")"|sendmail $email
    fi
    ;;

  logwatcher)
    $0 shell -log error -log-watch $@
    ;;

  run|run-master|master|run-monitor|monitor|web|watch|shell|bksh)
    [ -f app.js ] && SCRIPT=app.js
    [ -z "$SCRIPT" -a -f lib/app.js ] && SCRIPT=lib/app.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/app.js ] && SCRIPT=$BKJS_HOME/app.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/lib/app.js ] && SCRIPT=$BKJS_HOME/lib/app.js
    [ -z "$SCRIPT" ] && SCRIPT=$(find_bkjs lib/app.js)
    [ -z $SCRIPT ] && echo "ERROR: Cannot find $BKJS_MOD module or app.js in '.:$BKJS_HOME'" && exit 1

    find_nodebin
    [ ! -z "$(get_flag -debug)" ] && echo "Starting $BKJS_CMD: $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS $@"

    case "$BKJS_CMD" in
     run-monitor|monitor)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -monitor -master $BKJS_RUN_ARGS "$@"
        ;;

     run-master|master)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -master $BKJS_RUN_ARGS "$@"
        ;;

     watch)
        exec $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -master -watch $(pwd) $BKJS_RUN_ARGS "$@"
        ;;

     shell|bksh)
        exec $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -shell "$@"
        ;;

     web)
       $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS -web "$@"
       ;;

     *)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS "$@"
        ;;
    esac
    ;;

  ssh)
    host=$(get_arg -host $BKJS_HOST)
    cmd=$(get_arg -cmd)
    [ "$host" = "" -o "$cmd" = "" ] && echo "-host and -cmd are required" && exit
    sshargs=$(concat_arg -ssh $BKJS_SSH_ARGS)
    user=$(get_arg -user)
    [ "$user" != "" ] && sshargs="$sshargs -l $user"
    key=$(get_arg -key)
    [ "$key" != "" ] && sshargs="$sshargs -i $HOME/.ssh/$key.pem"
    echo "Running 'ssh $sshargs' $h $cmd"
    [ "$(get_flag -dry-run)" != "" ] && exit 0
    for h in $host; do
      ssh $sshargs $h $cmd
    done
    ;;

  sync)
    # Put backend code to the remote site
    host=$(get_arg -host $BKJS_HOST)
    [ "$host" = "" ] && echo "no sync withut -host" && exit
    rsyncargs=$(concat_arg -rsync $BKJS_RSYNC_ARGS)
    [ -f .gitignore ] && rsyncargs="$rsyncargs --exclude-from .gitignore"
    [ -f $HOME/.gitignore_global ] && rsyncargs="$rsyncargs --exclude-from $HOME/.gitignore_global"
    mod=$(get_package_json name)
    [[ -z $mod ]] && echo "no sync without package.json" && exit 1
    path=$(get_arg -path)
    if [ -z "$path" ]; then
       path=$(get_package_json config.put.path)
       [ "$path" = "node_modules" ] && path=$path/$mod
    fi
    [ -z "$path" ] && echo "no sync without -path or config.put.path" && exit 1
    sshargs=$(concat_arg -ssh $BKJS_SSH_ARGS)
    user=$(get_arg -user)
    [ "$user" != "" ] && sshargs="$sshargs -l $user"
    key=$(get_arg -ssh-key)
    [ "$key" != "" -a -f $HOME/.ssh/$key.pem ] && sshargs="$sshargs -i $HOME/.ssh/$key.pem"
    bkcmd=$(get_arg -bkcmd)
    if [ "$bkcmd" != "" ]; then
       find_user
       bkcmd="--rsync-path=/home/$BKJS_USER/bin/bkrsync -bkcmd '$bkcmd'"
    fi
    files=$(get_arg -files)
    [[ -z $files ]] && files=$(get_package_json config.put.files)
    [[ -z $files ]] && echo "no sync without -files" && exit 1
    echo "Deploying the module $mod: 'ssh $sshargs' $rsyncargs $bkcmd $(echo $files) to $host:$path"
    [ ! -z "$(get_flag -dry-run)" ] && exit 0
    for h in $host; do
      rsync -av -e "ssh $sshargs" $rsyncargs "$bkcmd" $files $h:$path
    done
    ;;

  deps)
    find_nodebin
    [ "$NPM_BIN" = "" -a ! -f $BKJS_PREFIX/bin/npm ] && NPM_BIN=$(which npm 2>/dev/null)
    [ "$NPM_BIN" = "" ] && NPM_BIN=$BKJS_PREFIX/bin/npm
    cmd=install
    [ "$(get_flag -update)" != "" ] && cmd=update
    npm=$(get_arg -npm)
    field=$(get_arg -field dependencies)
    skip=$(get_arg -skip $BKJS_MOD)
    path=$(get_arg -path .)
    modules=$($NODE_BIN -e "try{skip='$skip'.split(/[ ,]/);console.log(Object.keys(JSON.parse(require('fs').readFileSync('$path/package.json')).$type).filter(function(x){return skip.indexOf(x)==-1}).join(' '))}catch(e){}")
    [[ -z $modules ]] && exit 0
    echo "$cmd: $modules"
    [ ! -z "$(get_flag -dry-run)" ] && exit 0
    for m in $modules; do
      $NPM_BIN $npm $cmd $m
      [ "$?" != "0" ] && exit 1
    done
    ;;

  install-node)
    ver=$(get_arg -version v8.9.1)
    [ "$(get_flag -force)" != "" -a -f $BKJS_PREFIX/bin/node ] && rm -rf $BKJS_PREFIX/bin/node $BKJS_PREFIX/bin/npm $BKJS_PREFIX/lib/node_modules
    [ -f $BKJS_PREFIX/bin/node ] && exit 0
    mkdir -p $BKJS_PREFIX
    if [ "$PLATFORM" = "Linux" ]; then
       curl -L -o node.tar.xz https://nodejs.org/dist/$ver/node-$ver-linux-x64.tar.xz
       [ "$?" != "0" ] && exit 1
       xz -d node.tar.xz
       tar -C $BKJS_PREFIX --strip-components=1 -xf node.tar
       rm -rf node.tar
    fi
    if [ "$PLATFORM" = "Darwin" ]; then
       curl -L -o node.tgz https://nodejs.org/dist/$ver/node-$ver-darwin-x64.tar.gz
       [ "$?" != "0" ] && exit 1
       tar -C $BKJS_PREFIX --strip-components=1 -xzf node.tgz
       rm -rf node.tgz
    fi
    mv $BKJS_PREFIX/README.md $BKJS_PREFIX/LICENSE $BKJS_PREFIX/CHANGELOG.md $BKJS_PREFIX/share/doc
    ;;

  bkhelp)
    find_nodebin
    $NODE_BIN -e "require('$BKJS_MOD').core.showHelp()"
    ;;

  env)
    set
    ;;

  *)
    # Load tools extensions, the protocol is:
    # - shell file must be in the tools/ and named bkjs-NAME
    # - it must check for BKJS_CMD and execute its code if it does
    # - if the command is unknown it must set BKJS_UNKNOWN with any value
    # - it must support help) command to show help about all supported commands
    #
    process_cmd

    [ "$BKJS_CMD" != "" ] && echo "error: unrecognized command: $BKJS_CMD: $@" >&2
    echo ""
    echo "General commands:"
    echo ""
    echo "  start - start the backend service"
    echo "  restart - restart the backend service"
    echo "  stop - stop the backend service"
    echo "  stop-web - kill web processes at once so they will restart with possibly updated modules"
    echo "  stop-worker - kill job worker processes at once so they will restart with possibly updated modules"
    echo "  stop-api - graceful API servers restart, drain all connections and restart one at a time, workers will restart after finishing jobs"
    echo "  send-alert [-event EVENT] [-descr DESCR] - appends alert message to the error log and runs the command for all tools scripts, if called from the monit then event/descr will be provided"
    echo "  check-server - run the checks before starting the backend, processed by all tools scripts"
    echo "  check-adhoc - to be run on adhoc instances, check for idleness, if no jobs running then shutdown the host"
    echo "  check-hostname - if needed update /etc/hosts with the hostname of eth0 interface IP address for localhost access"
    echo "  shell - run backend REPL in the current backend directory, works with the backend core or local app.js application"
    echo "  moninor - run the backend monitor process which starts master, web server and job server"
    echo "  master - run the backend master process which starts web server and jobs server"
    echo "  web - run the backend web server only"
    echo "  watch - run the backend in watcher and master mode with all source files being monitored for changes, the server is restarts on any change automatically"
    echo "  run - run local backend with provided arguments"
    echo "  logwatcher - runs the log watcher and exists, for cases when no $BKJS service is running but the error log must be watched"
    echo "  bkhelp - show all backend config parameters"
    echo "  deps [-field dependencies] [-path .] [-skip $BKJS_MOD] [-update] [-npm ARGS] - install npm packages from the dependencies list from the package.json"
    echo "  sync [-host HOST] [-path PATH] [-user USER] [-ssh-key pem] [-ssh OPTS] [-exclude PATTERN] [-bkcmd CMD] - push the backend code to the remote host using rsync, default path is ~/node_modules/$BKJS_MOD"
    echo "  ssh -host HOST -cmd CMD [-user USER] [-key PEM] [-ssh ARGS] - run a command over ssh on all specified hosts"
    echo "  install-node [-prefix PATH] [-force] - install binary release of the node into $BKJS_PREFIX or specified path"
    echo ""
    echo "Common options:"
    echo "  -root path - path to the backend home directory, default is $BKJS_HOME"
    echo "  -home path - same as -root"
    echo "  -prefix path - path to the local binaries directory, default is $BKJS_PREFIX"
    echo "  -user name - set backend user on the remote or local side, default is ${BKJS_USER:-`whoami`}"
    echo "  -group name - set backend group on the remote or local side, default is ${BKJS_GROUP:-`id -gn`}"
    echo ""

    BKJS_CMD=help
    process_cmds
    echo ""
    ;;
esac

