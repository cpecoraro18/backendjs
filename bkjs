#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#
# chkconfig: 2345 91 91
# description: backendjs server
#

BKJS=bkjs
BKJS_MOD=backendjs

PLATFORM=$(uname -s)
case "$PLATFORM" in
  Linux)
    case "$(uname -r)" in
     *amzn1*)
         OS_TYPE=amazon
         ;;

     *amzn2*)
         OS_TYPE=amazon2
         ;;
    esac
    [ -f /etc/sysconfig/$BKJS ] && . /etc/sysconfig/$BKJS
    ECHO="echo -e"
    SED="sed -r -i"
    ;;

  Darwin)
    OS_TYPE=macosx
    [ "$BKJS_HOME" = "" ] && export BKJS_HOME=~/.bkjs
    [ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=/opt/local
    ECHO="echo -e"
    SED="sed -E -i .orig"
    ;;

  *)
    echo "Unsupported platform"
    exit 1
    ;;
esac

# There are special commands that can be used as the script name
NAME=$(basename $0)
if [ "${NAME:0:2}" = "bk" -a "$NAME" != $BKJS ]; then
   BKJS_CMD=$NAME
else
   BKJS_CMD=$1
   shift
fi

# Returns an argument value by name, format is -name value
BKJS_ARGS=("$@")
get_arg() {
  for ((i = 0;i < ${#BKJS_ARGS[@]}; ++i)); do
    [ "$1" = "${BKJS_ARGS[i]}" ] && echo "${BKJS_ARGS[i+1]}" && return 0
  done
  echo "$2"
}

# Returns 1 if an argument exists
get_flag() {
  for ((i = 0;i < ${#BKJS_ARGS[@]}; ++i)); do
    [ "$1" = "${BKJS_ARGS[i]}" ] && echo "1" && return 0
  done
  echo "$2"
}

# Returns all commandline arguments not present in the first arg
get_all_args() {
  sep=${2:-"\""}
  for ((i = 0;i < ${#BKJS_ARGS[@]}; ++i)); do
    found=""
    n=${BKJS_ARGS[i]}
    v=${BKJS_ARGS[i+1]}
    for a in $1; do
      [ "$n" = "$a" ] && found=1
    done
    if [ "$found" = "" ]; then
       if [[ ! $n =~ "[ '\"]" ]]; then
          args="$args $n"
       else
          args="$args $sep$n$sep"
       fi
       if [ "$v" != "" -a "${v:0:1}" != "-" ]; then
          if [[ ! $v =~ "[ '\"]" ]]; then
             args="$args $v"
          else
             args="$args $sep$v$sep"
          fi
       fi
    fi
    [ "${v:0:1}" != "-" ] && ((++i))
  done
  echo "$args"
}

# Concatenate args
concat_arg() {
  _v=$(get_arg $1)
  [ "$_v" == "" ] && echo $2
  [ "$2" != "" ] && _v="$2 $_v"
  echo "$_v"
}

# Return value of the named pair from the variable that holds all them
get_value() {
  v=$(echo "$1"|awk -F= "{if(\$1==\"$2\" && \$2!=\"\") print \$2}")
  echo "${v:-$3}"
}

# Return config parameter value by name from the commandline or database
get_config() {
  for ((i = 0;i < ${#BKJS_ARGS[@]}; ++i)); do
    [ "$2" = "${BKJS_ARGS[i]}" ] && eval "$1=${BKJS_ARGS[i+1]}" && return 0
  done
  json=$BKJS_HOME/tmp/config.json
  [ ! -f $json -o "$(find $BKJS_HOME/tmp -name config.json -mmin +60)" != "" ] && $0 shell -log none -db-get-config > $json
  v=$(node -e "try{var v=JSON.parse(require('fs').readFileSync('$json')).filter(x=>(x.name=='${2:1}')).pop();if(v&&v.value)console.log(v.value)}catch(e){}")
  [ "$v" != "" ] && eval "$1=$v" && return
  [ "$3" != "" ] && eval "$1=$3"
}

# Return the value for the given named config parameter from the database
get_config_value() {
  [ "$1" == "" ] && return
  echo $($0 shell -log none -db-get-config -format value name "$1")
}

# Return a config parameter by name from local config files
get_local_config() {
  for f in $BKJS_HOME/etc/config $BKJS_HOME/etc/config.local; do [ -f $f ] && cfg="$cfg $f"; done
  [ "$cfg" != "" ] && v=$(cat $cfg|egrep -Eo "$1=.+"|tail -1|sed "s/$1=//")
  echo ${v:-$2}
}

# Local IP address, not localhost
get_local_ip() {
  echo $(/sbin/ifconfig eth${1:-0}|grep -o -E 'inet addr:[0-9.]+'|awk -F: '{print $2}')
}

# Return the value for a property from a json file: get_json file.json name fallback
get_json() {
  ${NODE_BIN:-node} -e "try{o=JSON.parse(require('fs').readFileSync('$1'));v=o.$2||o['$3'];if(Array.isArray(v))v=v.join(' ');if(v&&typeof v=='object')v=Object.keys(v).join(' ');if(typeof v!='undefined')console.log(v)}catch(e){}"
}

# Return the value for a property from a json file, object properties are flattened first to support property names with spaces or dashes
get_json_flat() {
  ${NODE_BIN:-node} -e "function f(o){var r={};for(var p in o){if(!Array.isArray(o[p])&&typeof o[p]=='object'){var a=f(o[p]);for(var x in a)r[p+'.'+x]=a[x]}else r[p]=o[p]};return r};try{o=f(JSON.parse(require('fs').readFileSync('$1')));v=o['$2']||o['$3'];if(Array.isArray(v))v=v.join(' ');if(v&&typeof v=='object')v=Object.keys(v).join(' ');if(typeof v!='undefined')console.log(v)}catch(e){}"
}

# Resolve package location
find_bkjs() {
  [ -f node_modules/$BKJS_MOD ] && v=$(pwd)/node_modules/$BKJS_MOD
  [ "$v" = "" -a -d $HOME/node_modules/$BKJS_MOD ] && v=$HOME/node_modules/$BKJS_MOD
  [ "$v" = "" -a -d $BKJS_HOME/node_modules/$BKJS_MOD ] && v=$BKJS_HOME/node_modules/$BKJS_MOD
  [ "$v" = "" -a -d $BKJS_PREFIX/node_modules/$BKJS_MOD ] && v=$BKJS_PREFIX/node_modules/$BKJS_MOD
  [ "$v" = "" -a -d /opt/local/lib/node_modules/$BKJS_MOD ] && v=/opt/local/lib/node_modules/$BKJS_MOD
  [ "$v" = "" -a -d $NODE_PATH/$BKJS_MOD ] && v=$NODE_PATH/$BKJS_MOD
  [[ ! -z $v ]] && echo "$v/$1"
}

# Resolve bkjs shell script location
find_bkjsbin() {
  [ "$BKJS_BIN" = "" -a -f $HOME/bin/$BKJS ] && export BKJS_BIN=$HOME/bin/$BKJS
  [ "$BKJS_BIN" = "" -a -f $BKJS_HOME/bin/$BKJS ] && export BKJS_BIN=$BKJS_HOME/bin/$BKJS
  [ "$BKJS_BIN" = "" -a -f $BKJS_PREFIX/bin/$BKJS ] && export BKJS_BIN=$BKJS_PREFIX/bin/$BKJS
  [ "$BKJS_BIN" = "" -a -f node_modules/$BKJS_MOD ] && export BKJS_BIN=$(pwd)/node_modules/$BKJS_MOD/$BKJS
  [ "$BKJS_BIN" = "" -a -d $BKJS_HOME/node_modules/$BKJS_MOD/$BKJS ] && export BKJS_BIN=$BKJS_HOME/node_modules/$BKJS_MOD/$BKJS
  [ "$BKJS_BIN" = "" -a -d $NODE_PATH/$BKJS ] && export BKJS_BIN=$NODE_PATH/$BKJS/bin/$BKJS
  [ "$BKJS_BIN" = "" -a -f /opt/local/bin/$BKJS ] && export BKJS_BIN=/opt/local/bin/$BKJS
  [ "$BKJS_BIN" = "" ] && export BKJS_BIN=$(which $BKJS 2>/dev/null)
}

# Resolve node binary location
find_nodebin() {
  [ "$NODE_BIN" = "" -a -f $BKJS_HOME/bin/node ] && export NODE_BIN=$BKJS_HOME/bin/node
  [ "$NODE_BIN" = "" -a -f $BKJS_PREFIX/bin/node ] && export NODE_BIN=$BKJS_PREFIX/bin/node
  [ "$NODE_BIN" = "" ] && export NODE_BIN=$(which node 2>/dev/null)
}

# Use configured or provided user:group, defaults to the current user
find_user() {
  export BKJS_USER=$(get_arg -user $BKJS_USER)
  [ "$BKJS_USER" = "" ] && export BKJS_USER=$(whoami)
  export BKJS_GROUP=$(get_arg -group $BKJS_GROUP)
  [ "$BKJS_GROUP" = "" ] && export BKJS_GROUP=$(id -gn)
}

# Run the command by sourcing all scripts from tools folders, if $1 is not empty then
# run all tools scripts, otherwise stop once the command is processed
process_cmd() {
  dirs="$BKJS_TOOLS $(get_arg -tools) $BKJS_HOME/tools $BKJS_HOME/node_modules/$BKJS_MOD/tools $(find_bkjs tools)"
  for d in $dirs; do
     if [ -d $d ]; then
        for f in $(find $d -name 'bkjs-*'); do
            unset BKJS_UNKNOWN
            source $f
            if [ -z "$BKJS_UNKNOWN" ]; then
                [ ! -z "$(get_flag -debug)" ] && echo "Processed: $BKJS_CMD: $f"
                [ -z "$1" ] && exit 0
            fi
        done
     fi
  done
}

# Utility functions
to_lower() {
  echo $1 | tr [:upper:] [:lower:]
}
to_upper() {
  echo $1 | tr [:lower:] [:upper:]
}

# Home and prefix must be specified for the script to work properly
export BKJS_HOME=$(get_arg -home $BKJS_HOME)
[ "$BKJS_HOME" = "" ] && export BKJS_HOME=$(sh -c "echo ~$BKJS_USER")
[ -f $BKJS_HOME/etc/profile ] && . $BKJS_HOME/etc/profile

export BKJS_PREFIX=$(get_arg -prefix $BKJS_PREFIX)
[ "$BKJS_PREFIX" = "" ] && export BKJS_PREFIX=$BKJS_HOME

# Setup paths
export PATH=$BKJS_HOME/bin:$BKJS_HOME/node_modules/.bin:$BKJS_PREFIX/bin:/usr/local/bin:/opt/local/bin:/opt/local/node/bin:/sbin:/usr/sbin:$PATH

process_cmds() { process_cmd 1; }

[ ! -z "$(get_flag -debug)" ] && echo "$0: CMD=$BKJS_CMD, USER=$BKJS_USER, HOME=$BKJS_HOME, PREFIX=$BKJS_PREFIX, PWD=$(pwd)"

case "$BKJS_CMD" in
  start)
    cd $BKJS_HOME
    $0 check-server
    $0 run-${BKJS_SERVER:-master}
    ;;

  restart)
    $0 stop
    sleep 1
    process_cmds
    ;;

  restart-api|stop-api)
    pkill -USR2 -f "$BKJS: server"
    pkill -USR2 -f "$BKJS: master"
    exit 0
    ;;

  stop)
    pkill $1 -f "$BKJS:"
    sleep 1
    pkill $1 -f "$BKJS:"
    exit 0
    ;;

  status)
    ;;

  stop-web|stop-server|stop-master|stop-worker)
    name=${BKJS_CMD:5}
    [ "$name" = "" ] && exit 0
    pkill $1 -f "$BKJS: $name"
    exit 0
    ;;

  bkrsync)
    logger -p local0.notice -t bkrsync -- $@
    cmd=$(get_arg -bkcmd)
    rsync $(get_all_args "-bkcmd")
    rc=$?
    [ "$rc" != "0" ] && exit $rc
    [ "$cmd" != "" ] && $cmd
    exit 0
    ;;

  check-server)
    [ "$(whoami)" != "root" ] && echo "run as root please" && exit
    # Setup domain from the config, keep the hostname as it is, for EC2 instances it is the IP address
    domain=$(get_arg -domain $BKJS_DOMAIN)
    [ "$domain" != "" ] && $0 init-hostname -domain $domain
    process_cmds
    # New instance started from existing AMI which might have old log files
    if [ -f $BKJS_HOME/var/bkjs.init ]; then
        echo "Initializing $BKJS_HOME..."
        rm -rf $BKJS_HOME/var/* $BKJS_HOME/log/*
        service rsyslog restart
    fi
    find_user
    chown -R $BKJS_USER $BKJS_HOME/etc $BKJS_HOME/var $BKJS_HOME/log
    ;;

  check-adhoc)
    [ "$BKJS_IDLETIME" = "" ] && BKJS_IDLETIME=900
    [ "$BKJS_UPTIME" = "" ] && BKJS_UPTIME=43200
    uptime=$(</proc/uptime)
    uptime=${uptime%%.*}
    if [ $uptime -gt $BKJS_IDLETIME ]; then
       ps=$(ps agx|grep "$BKJS: worker"|grep -v grep)
       if [ "$ps" = "" ]; then
          logger "No backend is running, $uptime/$BKJS_IDLETIME, shutting down..."
          echo $ps >> /var/log/messages
          /sbin/halt
       fi
   fi
   if [ $uptime -gt $BKJS_UPTIME ]; then
      logger "Running too long, $uptime/$BKJS_UPTIME, shutting down..."
      /sbin/halt
   fi
   ;;

  send-alert)
    event=$(get_arg -event $MONIT_EVENT)
    descr=$(get_arg -descr $MONIT_DESCRIPTION)
    [ "$event" = "" -a "$descr" = "" ] && exit
    host=${MONIT_HOST:-$(uname -n)}
    ip=$(get_local_ip)
    subject="ALERT: $host/$ip $event"
    msg=$($ECHO "$subject\n\n$descr\n\n$(df -h)\n\n$(free)\n\n$(ps agx)")
    echo $msg >> $BKJS_HOME/log/error.log
    process_cmds
    email=$(grep 'set alert' /etc/monit.d/*|tail -1|awk '{print $NF}')
    if [ "$email" != "" ]; then
       $ECHO "From:$email\nTo:$email\nSubject: $subject\n\n$(echo "$msg")"|sendmail $email
    fi
    ;;

  logwatcher)
    $0 shell -log error -log-watch $@
    ;;

  run|run-master|master|run-monitor|monitor|web|watch|shell|bksh)
    find_nodebin
    [ -f app.js ] && SCRIPT=app.js
    [ -z "$SCRIPT" -a -f lib/app.js ] && SCRIPT=lib/app.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/app.js ] && SCRIPT=$BKJS_HOME/app.js
    [ -z "$SCRIPT" -a -f $BKJS_HOME/lib/app.js ] && SCRIPT=$BKJS_HOME/lib/app.js
    [ -z "$SCRIPT" ] && SCRIPT=$(find_bkjs lib/app.js)
    [ -z $SCRIPT ] && echo "ERROR: Cannot find $BKJS_MOD module or app.js in '.:$BKJS_HOME'" && exit 1

    [ ! -z "$(get_flag -debug)" ] && echo "Starting $BKJS_CMD: $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS $@"

    case "$BKJS_CMD" in
     run-monitor|monitor)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -monitor -master $BKJS_RUN_ARGS "$@"
        ;;

     run-master|master)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -syslog -daemon -master $BKJS_RUN_ARGS "$@"
        ;;

     watch)
        exec $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -master -watch $(pwd) $BKJS_RUN_ARGS "$@"
        ;;

     shell|bksh)
        exec $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME -shell "$@"
        ;;

     web)
       $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS -web "$@"
       ;;

     *)
        $NODE_BIN $NODE_ARGS $SCRIPT -home $BKJS_HOME $BKJS_RUN_ARGS "$@"
        ;;
    esac
    ;;

  ssh)
    host=$(get_arg -host $BKJS_HOST)
    cmd=$(get_arg -cmd)
    [ "$host" = "" -o "$cmd" = "" ] && echo "-host and -cmd are required" && exit
    sshargs=$(concat_arg -ssh $BKJS_SSH_ARGS)
    user=$(get_arg -user)
    [ "$user" != "" ] && sshargs="$sshargs -l $user"
    key=$(get_arg -key)
    [ "$key" != "" -a -f "~/.ssh/$key.pem" ] && sshargs="$sshargs -i $HOME/.ssh/$key.pem"
    [ "$(get_flag -debug)" != "" ] && echo "ssh $sshargs $host $cmd"
    [ "$(get_flag -dry-run)" != "" ] && exit 0
    for h in $host; do
      ssh $sshargs $h $cmd
    done
    ;;

  sync)
    # Put backend code to the remote site
    host=$(get_arg -host $BKJS_HOST)
    [ "$host" = "" ] && echo "no sync without -host" && exit
    mod=$(get_json package.json name)
    [[ -z $mod ]] && echo "no sync without package.json" && exit 1
    path=$(get_arg -path)
    if [ -z "$path" ]; then
        path=$(get_json package.json config.sync.path)
        [ "$path" = "node_modules" ] && path=$path/$mod
    fi
    [ -z "$path" ] && echo "no sync without -path or config.sync.path" && exit 1
    sshargs=$(concat_arg -ssh $BKJS_SSH_ARGS)
    user=$(get_arg -user)
    [ "$user" != "" ] && sshargs="$sshargs -l $user"
    key=$(get_arg -ssh-key)
    [ "$key" != "" -a -f $HOME/.ssh/$key.pem ] && sshargs="$sshargs -i $HOME/.ssh/$key.pem"
    rsyncargs=$(concat_arg -rsync $BKJS_RSYNC_ARGS)
    bkcmd=$(get_arg -bkcmd)
    if [ "$bkcmd" != "" ]; then
        find_user
        bkcmd="--rsync-path=/home/$BKJS_USER/bin/bkrsync -bkcmd '$bkcmd'"
    fi
    include=$(get_json package.json config.sync.include)
    for inc in $include; do
        rsyncargs="$rsyncargs --include=$inc"
    done
    if [ -f .gitignore ]; then
        rsyncargs="$rsyncargs --exclude-from .gitignore"
    fi
    [ -f $HOME/.gitignore_global ] && rsyncargs="$rsyncargs --exclude-from $HOME/.gitignore_global"
    exclude=$(get_json package.json config.sync.exclude)
    [[ ! -z $exclude ]] && rsyncargs="$rsyncargs --exclude=$exclude"
    echo "Deploying the module $mod: ssh $sshargs $rsyncargs $bkcmd to $host:$path"
    [ ! -z "$(get_flag -dry-run)" ] && exit 0
    for h in $host; do
        rsync -av -e "ssh $sshargs" "$bkcmd" $rsyncargs . $h:$path
    done
    ;;

  deps)
    find_nodebin
    [ "$NPM_BIN" = "" -a ! -f $BKJS_PREFIX/bin/npm ] && NPM_BIN=$(which npm 2>/dev/null)
    [ "$NPM_BIN" = "" ] && NPM_BIN=$BKJS_PREFIX/bin/npm
    cmd=install
    [ ! -z "$(get_flag -update)" ] && cmd=update
    npm=$(get_arg -npm)
    [ ! -z "$(get_flag -global)" ] && npm="$npm -g"
    field=$(get_arg -field dependencies)
    skip=$(get_arg -skip $BKJS_MOD)
    path=$(get_arg -path .)
    for p in $path; do
        m=$($NODE_BIN -e "try{skip='$skip';console.log(Object.keys(JSON.parse(require('fs').readFileSync('$p/package.json')).$field).filter(function(x){return !x.match(skip)}).join(' '))}catch(e){}")
        [ "$m" != "" ] && modules="$modules $m"
    done
    [[ -z $modules ]] && exit 0
    echo "$NPM_BIN $npm $cmd $modules"
    [ ! -z "$(get_flag -dry-run)" ] && exit 0
    $NPM_BIN $npm $cmd $modules
    ;;

  web-bundle)
    # show info about all files
    if [[ ! -z $(get_flag -list) ]]; then
        pkg=package.json
        bundles=$(get_json $pkg config.bundles)
        alljs="$(echo $(ls web/js/))"
        allcss="$(echo $(ls web/css/))"
        allhtml="$(echo $(ls web/html/))"
        for b in $bundles; do
            js=$(get_json_flat $pkg config.bundles.$b.js)
            css=$(get_json_flat $pkg config.bundles.$b.css)
            html=$(get_json_flat $pkg config.bundles.$b.html)
            echo -e "\n$b:\n\tjs:\n\t\t$js\n\tcss:\n\t\t$css\n\thtml:\n\t\t$html"
            alljs=$(echo $alljs|sed -E "s!$(echo $js|sed 's/ /|/g')!!g")
            allcss=$(echo $allcss|sed -E "s!$(echo $css|sed 's/ /|/g')!!g")
            allhtml=$(echo $allhtml|sed -E "s!$(echo $html|sed 's/ /|/g')!!g")
        done
        echo -e "\nunbundled:\n\tjs:\n\t\t$(echo $alljs)\n\tcss:\n\t\t$(echo $allcss)\n\thtml:\n\t\t$(echo $allhtml)"
        exit 0
    fi
    if [[ ! -z $(get_flag -all) ]]; then
        pkg=package.json
        bundles=$(get_json $pkg config.bundles)
        for b in $bundles; do
            for t in js css html; do
                $0 web-bundle -file $b.$t $(get_all_args "-all -file")
                [ "$?" != "0" ] && exit 1
            done
        done
        exit 0
    fi

    file=$(get_arg -file)
    [ "$file" = "" ] && echo "-file must be provided" && exit 1
    dev=$(get_flag -dev)
    quiet=$(get_flag -quiet)
    force=$(get_flag -force)

    if [[ $file =~ \.bundle\.(js|css|html)$ ]]; then
       exit
    elif [[ $file =~ ^([a-zA-Z0-9\._-]+)?(js|css|html)$ ]]; then
       dir=$(pwd)
       type=${file##*.}
       name=${file%.*}
    else
       dir=$(dirname $file)
       while ! [ -e $dir/package.json ] && [ -n $dir ] && [ $dir != . ]; do dir=${dir%/*}; done
       file=$(echo $file|sed "s|$dir/||")
       type=${file##*.}
       name=${file%.*}
    fi
    if [ ! -f $dir/package.json ]; then
       [ "$quiet" = "" ] && echo "$BKJS_CMD: package.json is not found"
       exit 1
    fi
    repo=$(cd $dir && git symbolic-ref --short -q HEAD)
    bundles=$(get_json $dir/package.json config.bundles)
    [ "$quiet" = "" ] && echo "$BKJS_CMD: $repo: $dir $type bundles: $bundles"

    for b in $bundles; do
        unset f
        [[ ! -z $dev ]] && f=$(get_json_flat $dir/package.json config.bundles.$b.$type.dev)
        [[ -z $f ]] && f=$(get_json_flat $dir/package.json config.bundles.$b.$type)
        [[ -z $f ]] && continue
        if [[ -z $name || $name = $b || $f =~ $name ]]; then
            files=$f
            bundle=$b
            [ "$quiet" = "" ] && echo "$(date): web-bundle $bundle.$type started $dir/$file, files: $files"
            case $file in
            *js)
                mkdir -p $dir/web/js /tmp/bktmp
                if [[ $files =~ @version@ ]]; then
                    echo "bkjs.bundleVersion='$(get_json_flat $dir/package.json version)';" > /tmp/bktmp/_version.js
                    files=$(echo $files|sed 's!@version@!/tmp/bktmp/_version.js!')
                fi

                if [[ -z $dev ]]; then
                    if [[ ! -z $(get_flag -gcc) ]]; then
                        gccargs=" $(get_arg -gccargs)"
                        (cd $dir && npx google-closure-compiler $gccargs $files > web/js/$bundle.bundle.js)
                        [ "$?" != "0" ] && exit 1
                    else
                        uglifyargs="-c -m --comments /^!/ $(get_arg -uglifyargs)"
                        (cd $dir && uglifyjs $files $uglifyargs -o web/js/$bundle.bundle.js)
                        [ "$?" != "0" ] && exit 1
                    fi
                else
                    (cd $dir && cat $files > web/js/$bundle.bundle.js)
                fi
                ;;

            *css)
                mkdir -p $dir/web/css
                if [[ -z $dev ]]; then
                    (cd $dir && uglifycss $files --output web/css/$bundle.bundle.css)
                    [ "$?" != "0" ] && exit 1
                else
                    (cd $dir && cat $files > web/css/$bundle.bundle.css)
                fi
                ;;

            *html)
                find_nodebin
                mkdir -p $dir/web/js /tmp/bktmp
                [ -s /tmp/bktmp/_repo -a "$(cat /tmp/bktmp/_repo)" != "$repo" ] && rm -f /tmp/bktmp/*.html
                echo > $dir/web/js/$bundle.bundle.html.js
                echo $repo > /tmp/bktmp/_repo
                for f in $files; do
                    [ ! -s $dir/$f ] && continue
                    n=$(basename $f)
                    if [ "$force" != "" -o $dir/$f -nt /tmp/bktmp/$n ]; then
                        (cd $dir && html-minifier --collapse-whitespace --collapse-boolean-attributes --remove-comments --remove-optional-tags --remove-attribute-quotes --remove-empty-attributes $f > /tmp/bktmp/_$n)
                        [ "$?" != "0" ] && exit 1
                        cc=$(get_flag -compress 0)
                        $NODE_BIN -e "try{var bk=require('backendjs');var n=require('path').basename('$f','.html').replace(/(?:[-_\\.])(\\w)/g,(_,c)=>(c?c.toUpperCase():'')),f=bk.lib.readFileSync('/tmp/bktmp/_$n');console.log('bkjs.koTemplates[\"'+n+'\"]='+($cc?'\"'+bk.lib.strCompress(f,\"base64\")+'\"':JSON.stringify(f))+';\nko.components.register(\"'+n+'\",{});');process.exit(0)}catch(e){bk.core.exit(1,'$f',e)}" > /tmp/bktmp/$n
                    fi
                    cat /tmp/bktmp/$n >> $dir/web/js/$bundle.bundle.html.js
                done

                ;;
            esac
            [ "$quiet" = "" ] && echo "$(date): web-bundle $bundle.$type finished $dir/$file"
        fi
    done
    if [ "$files" = "" ]; then
       [ "$quiet" = "" ] && echo "$BKJS_CMD: no $type config.bundles found in $dir/package.json"
    fi
    ;;

  install-node)
    ver=$(get_arg -version v12.18.3)
    if [ "$(get_flag -force)" != "" -a -f $BKJS_PREFIX/bin/node ]; then
       echo "Uninstalling node from $BKJS_PREFIX ..."
       rm -rf $BKJS_PREFIX/bin/node $BKJS_PREFIX/bin/npm $BKJS_PREFIX/bin/npx $BKJS_PREFIX/lib/node_modules/npm
       [ ! -z "$(get_flag -clean)" ] && rm -rf $BKJS_PREFIX/lib/node_modules
    fi
    [ -f $BKJS_PREFIX/bin/node ] && exit 0
    mkdir -p $BKJS_PREFIX
    if [ "$PLATFORM" = "Linux" ]; then
       case "$(uname -m)" in
        aarch64)
          arch=arm64
          ;;
        *)
          arch=x64
       esac
       curl -L -o node.tar.xz https://nodejs.org/dist/$ver/node-$ver-linux-$arch.tar.xz
       [ "$?" != "0" ] && exit 1
       xz -d node.tar.xz
       tar -C $BKJS_PREFIX --strip-components=1 -xf node.tar
       rm -rf node.tar
    fi
    if [ "$PLATFORM" = "Darwin" ]; then
       curl -L -o node.tgz https://nodejs.org/dist/$ver/node-$ver-darwin-x64.tar.gz
       [ "$?" != "0" ] && exit 1
       tar -C $BKJS_PREFIX --strip-components=1 -xzf node.tgz
       rm -rf node.tgz
    fi
    mv $BKJS_PREFIX/README.md $BKJS_PREFIX/LICENSE $BKJS_PREFIX/CHANGELOG.md $BKJS_PREFIX/share/doc
    ;;

  install-devel)
    # Install development packages for compiling node and modules
    packages="git svn gdb gcc-c++ make cmake autoconf automake libtool"
    packages="$packages libuuid-devel openssl-devel libxml2-devel openldap-devel readline-devel libpng-devel libjpeg-turbo-devel"
    yum -y -q install $packages
    ;;

  bkhelp)
    find_nodebin
    $NODE_BIN -e "require('$BKJS_MOD').core.showHelp()"
    ;;

  env)
    find_nodebin
    find_bkjsbin
    echo BKJS_PATH=$(find_bkjs)
    set
    ;;

  args)
    echo "$(get_all_args "$(get_arg -skip)" $(get_arg -sep))"
    ;;

  *)
    # Load tools extensions, the protocol is:
    # - shell file must be in the tools/ and named bkjs-NAME
    # - it must check for BKJS_CMD and execute its code if it does
    # - if the command is unknown it must set BKJS_UNKNOWN with any value
    # - it must support help) command to show help about all supported commands
    #
    process_cmd

    [ "$BKJS_CMD" != "" ] && echo "error: unrecognized command: $BKJS_CMD: $@" >&2
    echo ""
    echo "General commands:"
    echo ""
    echo "  start - start the backend service"
    echo "  restart - restart the backend service"
    echo "  stop - stop the backend service"
    echo "  stop-web - kill web processes at once so they will restart with possibly updated modules"
    echo "  stop-worker - kill job worker processes at once so they will restart with possibly updated modules"
    echo "  stop-api - graceful API servers restart, drain all connections and restart one at a time, workers will restart after finishing jobs"
    echo "  send-alert [-event EVENT] [-descr DESCR] - appends alert message to the error log and runs the command for all tools scripts, if called from the monit then event/descr will be provided"
    echo "  check-server - run the checks before starting the backend, processed by all tools scripts"
    echo "  check-adhoc - to be run on adhoc instances, check for idleness, if no jobs running then shutdown the host"
    echo "  shell - run backend REPL in the current backend directory, works with the backend core or local app.js application"
    echo "  monitor - run the backend monitor process which starts master, web server and job server"
    echo "  master - run the backend master process which starts web server and jobs server"
    echo "  web - run the backend web server only"
    echo "  watch - run the backend in watcher and master mode with all source files being monitored for changes, the server is restarts on any change automatically"
    echo "  run - run local backend with provided arguments"
    echo "  logwatcher - runs the log watcher and exists, for cases when no $BKJS service is running but the error log must be watched"
    echo "  deps [-field dependencies] [-path .] [-skip REGEXP] [-global] [-update] [-npm ARGS] - install npm packages from the dependencies list from the package.json"
    echo "  sync [-host HOST] [-path PATH] [-user USER] [-ssh-key pem] [-ssh OPTS] [-exclude PATTERN] [-bkcmd CMD] - push the backend code to the remote host using rsync, default path is ~/node_modules/$BKJS_MOD"
    echo "  ssh -host HOST -cmd CMD [-user USER] [-key PEM] [-ssh ARGS] - run a command over ssh on all specified hosts"
    echo "  install-node [-prefix PATH] [-force] [-clean] - install binary release of the node into $BKJS_PREFIX or specified path"
    echo "  install-devel - install development packages for node and modules compiclation"
    echo "  web-bundle -file FILE|(js|css|html)|BUNDLE.(js|css|html) [-compress] [-dev] [-uglifyargs ARGS] [-all] [-list] [-force] - produce a web bundle by uglifying js/css/html files into one file, resolves files from package.json"
    echo ""
    echo "  bkhelp - show all $BKJS_MOD config parameters"
    echo ""
    echo "Common options:"
    echo "  -root path - path to the backend home directory, default is $BKJS_HOME"
    echo "  -home path - same as -root"
    echo "  -prefix path - path to the local binaries directory, default is $BKJS_PREFIX"
    echo "  -user name - set backend user on the remote or local side, default is ${BKJS_USER:-`whoami`}"
    echo "  -group name - set backend group on the remote or local side, default is ${BKJS_GROUP:-`id -gn`}"
    echo ""

    BKJS_CMD=help
    process_cmds
    echo ""
    ;;
esac

