#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#
# chkconfig: 2345 70 70
# description: $BKJS server
#

BKRC=backendrc
BKJS=backendjs

# Host specific settings and environment variables
[ -f /etc/$BKRC ] && . /etc/$BKRC
[ -f /usr/local/etc/$BKRC ] && . /usr/local/etc/$BKRC

[ "$BACKEND_ROOT" = "" ] && BACKEND_ROOT=~/.backend
[ -f $BACKEND_ROOT/etc/profile ] && . $BACKEND_ROOT/etc/profile

# Make sure we have defaults set
[ "$BACKEND_UID" = "" ] && BACKEND_UID=777
[ "$BACKEND_USER" = "" ] && BACKEND_USER=backend
[ "$BACKEND_IDLETIME" = "" ] && BACKEND_IDLETIME=900
[ "$BACKEND_UPTIME" = "" ] && BACKEND_UPTIME=43200
[ "$BACKEND_SSH_ARGS" = "" ] && BACKEND_SSH_ARGS="ssh -l $BACKEND_USER -o ConnectTimeout=5"

HOST=$(uname -n | awk -F. '{print $1}')
PLATFORM=$(uname -s)
case "$PLATFORM" in
  Linux)
    [ "$(grep CentOS /etc/issue)" != "" ] && OS_TYPE=centos
    [ "$(grep Amazon /etc/issue)" != "" ] && OS_TYPE=amazon
    # In multi-OS environment have to sync by OS type due to different dependencies in each distro
    [ "$BACKEND_OS_TYPE" != "" -a "$BACKEND_MASTER" != "" ] && BACKEND_MASTER=$OS_TYPE-$BACKEND_MASTER
    [ "$PG_PREFIX" = "" -a -d /usr/pgsql-9.3 ] && PG_PREFIX=/usr/pgsql-9.3
    KILLALL="killall -qr"
    ECHO="echo -e"
    SED="sed -i"
    ;;

  Darwin)
    OS_TYPE=macosx
    [ "$BACKEND_PREFIX" = "" ] && BACKEND_PREFIX=/opt/local
    [ "$PG_PREFIX" = "" ] && PG_PREFIX=$BACKEND_PREFIX/lib/postgresql93 && PG_LIBDIR=$PG_PREFIX
    [ "$MYSQL_PREFIX" = "" ] && MYSQL_PREFIX=$BACKEND_PREFIX/lib/mysql56
    BACKEND_USER=`whoami`
    KILLALL="killall -m"
    ECHO=echo
    SED="sed -i .orig"
    ;;

  *)
    echo "Unsupported platform"
    exit 1
    ;;
esac

# Set paths after we know OS type and possible custom settings
[ "$BACKEND_PREFIX" = "" ] && BACKEND_PREFIX=/usr/local
[ "$BACKEND_DOMAIN" = "" ] && BACKEND_DOMAIN=localhost
[ "$BACKUP" = "" ] && BACKUP=$BACKEND_ROOT/backup
[ "$CASSANDRA_PREFIX" = "" ] && CASSANDRA_PREFIX=$BACKEND_PREFIX/cassandra
[ "$CASSANDRA_DIR" = "" ] && CASSANDRA_DIR=$BACKEND_ROOT/cassandra
[ "$PG_PREFIX" = "" ] && PG_PREFIX=/usr
[ "$PG_LIBDIR" = "" ] && PG_LIBDIR=$PG_PREFIX/lib
[ "$PG_DIR" = "" ] && PG_DIR=$BACKEND_ROOT/postgres
[ "$MYSQL_DIR" = "" ] && MYSQL_DIR=$BACKEND_ROOT/mysql
[ "$MYSQL_PREFIX" = "" ] && MYSQL_PREFIX=/usr
[ "$DYNAMODB_PREFIX" = "" ] && DYNAMODB_PREFIX=$BACKEND_PREFIX/dynamodb
[ "$MONGO_DIR" = "" ] && MONGO_DIR=$BACKEND_ROOT/mongo
[ "$NODE_PATH" = "" ] && NODE_PATH=$BACKEND_PREFIX/lib/node_modules
[ "$NODE_BACKEND" = "" ] && NODE_BACKEND=$NODE_PATH/$BKJS

export PATH=$BACKEND_ROOT/bin:$BACKEND_PREFIX/bin:$PG_PREFIX/bin:$CASSANDRA_PREFIX/bin:/sbin:/usr/sbin:/usr/local/bin:/opt/local/bin:$PATH
export PKG_CONFIG_PATH=$BACKEND_PREFIX/lib/pkgconfig:$PG_LIBDIR/pkgconfig:$PKG_CONFIG_PATH

# If started without parameters use script name as a parameter
NAME=$(echo $0 | awk -F/ '{print $NF}')
ARG=${1:-$NAME}

case "$ARG" in
  start)
    $0 run-server
    ;;

  restart)
    $0 stop
    sleep 2
    $0 start
    ;;

  stop)
    $KILLALL 'backend:'
    $KILLALL 'backend:'
    exit 0
    ;;

  stop-web)
    $KILLALL 'backend: web'
    $KILLALL 'backend: web'
    exit 0
    ;;

  init-server)
    echo "Initializing backend..."
    # Update to the latest code if necessary
    ($0 sync-server)

    # Restart itself with new code to continue the init sequence
    ($0 setup-server)
    ;;

  setup-server)
    # Optional config parametrrs for the environment
    rm -rf /etc/$BKRC
    while [ $# -gt 1 ]; do
      case "$2" in
      -root)
         BACKEND_ROOT=$3
         $ECHO "BACKEND_ROOT=$BACKEND_ROOT" >> /etc/$BKRC
         shift;shift
         ;;

      -domain)
         BACKEND_DOMAIN=$3
         $ECHO "BACKEND_DOMAIN=$BACKEND_DOMAIN" >> /etc/$BKRC
         shift;shift
         ;;

      -name)
         BACKEND_NAME=$3
         $ECHO "BACKEND_NAME=$BACKEND_NAME" >> /etc/$BKRC
         shift;shift
         ;;

      -user)
         BACKEND_USER=$3
         $ECHO "BACKEND_USER=$BACKEND_USER" >> /etc/$BKRC
         $ECHO "BACKEND_ARGS=\"$BACKEND_ARGS -uid $(id -u $BACKEND_USER)\"" >> /etc/$BKRC
         shift;shift
         ;;

      -web)
         $ECHO "BACKEND_ARGS=\"$BACKEND_ARGS -web" >> /etc/$BKRC
         shift;shift
         ;;
      esac
    done

    # System utilities
    yum -yq install ntp rsync dnsmasq poppler-utils wget socat postfix unzip lynx mc gdb nano git svn man telnet jna
    yum -yq remove sendmail

    # Set hostname with unique EC2 instance if not set explicitly
    [ "$BACKEND_NAME" = "" ] && BACKEND_NAME=$(echo "api-$(wget -q -t1 -T1 -O - http://169.254.169.254/latest/meta-data/instance-id)"|sed 's/-$//g')
    echo "Setting hostname to $BACKEND_NAME.$BACKEND_DOMAIN..."
    hostname $BACKEND_NAME.$BACKEND_DOMAIN
    echo $BACKEND_NAME.$BACKEND_DOMAIN > /etc/hostname
    if [ -f /etc/sysconfig/network ]; then
       echo "HOSTNAME=$BACKEND_NAME.$BACKEND_DOMAIN" > /tmp/network
       grep -v HOSTNAME /etc/sysconfig/network >> /tmp/network
       mv /tmp/network /etc/sysconfig/network
    fi

    # Additional arguments via EC2 instance user data
    BACKEND_ARGS="$BACKEND_ARGS $(wget -q -t1 -T1 -O - http://169.254.169.254/latest/user-data)"

    echo "Backend arguments: $BACKEND_ARGS"

    # Add local user
    if [ "$(grep $BACKEND_USER /etc/passwd)" = "" ]; then
       echo "Adding user $BACKEND_USER..."
       useradd -g 0 -u $BACKEND_UID -m $BACKEND_USER
       echo "$BACKEND_USER ALL = NOPASSWD: ALL" > /etc/sudoers.d/$BKJS
       echo "Defaults env_keep += \"NODE_PATH\"" >> /etc/sudoers.d/$BKJS
       echo "Defaults secure_path = /sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin" >> /etc/sudoers.d/$BKJS
       mkdir -p /home/$BACKEND_USER/.ssh
       [ -d /home/ec2-user ] && cp /home/ec2-user/.ssh/authorized_keys /home/$BACKEND_USER/.ssh
       echo 'alias slog="tail -100 /var/log/messages"' >> /home/$BACKEND_USER/.bashrc
       echo "alias blog=\"tail -100 $BACKEND_ROOT/log/backend.log\"" >> /home/$BACKEND_USER/.bashrc
       echo "alias alog=\"tail -100 $BACKEND_ROOT/log/access.log\"" >> /home/$BACKEND_USER/.bashrc
       echo 'alias bcp="socat readline,history=.socat tcp4:localhost:2080"' >> /home/$BACKEND_USER/.bashrc
       echo 'alias bcp1="socat readline,history=.socat tcp4:localhost:2081"' >> /home/$BACKEND_USER/.bashrc
       echo 'alias ps="ps augx"' >> /home/$BACKEND_USER/.bashrc
       echo 'alias mc="mc -b"' >> /home/$BACKEND_USER/.bashrc
       echo 'export PATH=$HOME/node_modules/.bin' >> /home/$BACKEND_USER/.bash_profile
       echo 'ulimit -c unlimited' >> /home/$BACKEND_USER/.bash_profile
       echo 'export PGUSER=postgres' >> /home/$BACKEND_USER/.bash_profile
       echo 'export PGDATABASE=backend' >> /home/$BACKEND_USER/.bash_profile
       chmod -R g-rwx,o-rwx .ssh
       chown -R $BACKEND_USER /home/$BACKEND_USER $BACKEND_PREFIX
    fi

    # Allow only pubkey auth
    if [ "$(grep '#Backend' /etc/ssh/sshd_config)" = "" ]; then
       echo "Configuring ssh..."
       egrep -v '^(#Backend|PasswordAuth|GSSAPIAuth|MaxAuth|MaxSess|ClientAlive)' /etc/ssh/sshd_config > /tmp/sshd_config
       echo "" >> /tmp/sshd_config
       echo "#Backend config" >> /tmp/sshd_config
       echo "PasswordAuthentication no" >> /tmp/sshd_config
       echo "GSSAPIAuthentication no" >> /tmp/sshd_config
       echo "MaxAuthTries 5" >> /tmp/sshd_config
       echo "MaxSessions 10" >> /tmp/sshd_config
       echo "ClientAliveInterval 15" >> /tmp/sshd_config
       echo "ClientAliveCountMax 5" >> /tmp/sshd_config
       mv /tmp/sshd_config /etc/ssh
       service sshd restart
    fi

    # Setup postfix origin to domain name
    if [ "$(grep '#Backend' /etc/postfix/main.cf)" = "" ]; then
       echo "Configuring postfix..."
       echo '#Backend config' > /tmp/main.cf
       echo 'myorigin = $mydomain' >> /tmp/main.cf
       egrep -v '^(#Backend|myorigin)' /etc/postfix/main.cf >> /tmp/main.cf
       mv /tmp/main.cf /etc/postfix
       chkconfig postfix on
    fi

    # Update admin mail alias
    if [ "$LOGMAIL" != "" ]; then
       if [ "$(grep $LOGMAIL /etc/aliases)" = "" ] ; then
          echo "Setting mail alias to $LOGMAIL..."
          egrep -v '^root:' /etc/aliases > /tmp/aliases
          $ECHO "root:\t\t$LOGMAIL\n" >> /tmp/aliases
          mv /tmp/aliases /etc
          newaliases
       fi
    fi

    if [ "$(grep '#Backend $BACKEND_ROOT' /etc/logrotate.d/syslog)" = "" ]; then
       echo "Configuring logrotate..."
       echo "#Backend $BACKEND_ROOT" > /etc/logrotate.d/syslog
       echo "/var/log/cron /var/log/messages $BACKEND_ROOT/log/backend.log $BACKEND_ROOT/log/access.log {" >> /etc/logrotate.d/syslog
       echo " missingok" >> /etc/logrotate.d/syslog
       echo " weekly" >> /etc/logrotate.d/syslog
       echo " sharedscripts" >> /etc/logrotate.d/syslog
       echo " postrotate" >> /etc/logrotate.d/syslog
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/syslog
       echo " endscript" >> /etc/logrotate.d/syslog
       echo "}" >> /etc/logrotate.d/syslog
    fi

    # Setup syslog config
    if [ "$(grep '#Backend $BACKEND_ROOT' /etc/rsyslog.conf)" = "" ]; then
       echo "Configuring rsyslog..."
       echo "#Backend $BACKEND_ROOT" > /etc/rsyslog.conf
       echo '$ModLoad imklog' >> /etc/rsyslog.conf
       echo '$ModLoad imuxsock' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitBurst 1000' >> /etc/rsyslog.conf
       echo '$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat' >> /etc/rsyslog.conf
       echo '$IncludeConfig /etc/rsyslog.d/*.conf' >> /etc/rsyslog.conf
       echo 'kern.*,*.emerg /dev/console' >> /etc/rsyslog.conf
       echo '*.info;cron.none,local0.none,local5.none /var/log/messages' >> /etc/rsyslog.conf
       echo 'cron.* /var/log/cron' >> /etc/rsyslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/rsyslog.conf
       echo "local0.* $BACKEND_ROOT/log/backend.log" >> /etc/rsyslog.conf
       echo "local5.* $BACKEND_ROOT/log/access.log" >> /etc/rsyslog.conf
       service rsyslogd restart
       rm -rf /var/log/maillog* /var/log/secure* /var/log/spooler*
    fi

    # Duplicate messages to the console for easier access
    if [[ $BACKEND_ARGS = *-instance* ]]; then
       echo '*.info /dev/console' > /etc/rsyslog.d/console.conf
       truncate -c -s 0 /var/log/messages $BACKEND_ROOT/log/backend.log $BACKEND_ROOT/log/error.log
       service rsyslogd restart
    fi

    # Coredumps for debugging
    if [ ! -f /etc/security/limits.d/90-core.conf ]; then
       $ECHO '* soft core unlimited\n* hard core unlimited\n* soft nofile 32768\n* hard nofile 32768\nroot soft nofile 32768\nroot hard nofile 32768\n* soft memlock unlimited\n* hard memlock unlimited\nroot soft memlock unlimited\nroot hard memlock unlimited\n* soft as unlimited\n* hard as unlimited\nroot soft as unlimited\nroot hard as unlimited\n' > /etc/security/limits.d/90-core.conf
       sed -i 's/1024/10024/' /etc/security/limits.d/90-nproc.conf
       sed -i 's/kernel.core_uses_pid = 1/kernel.core_uses_pid = 0/' /etc/sysctl.conf
       echo 'vm.max_map_count = 131072' >> /etc/sysctl.conf
    fi

    # DNS cache
    if [ ! -f /etc/dnsmasq.conf -o "$(grep '#Backend' /etc/dnsmasq.conf)" = "" ]; then
       echo "#Backend" > /etc/dnsmasq.conf
       echo "domain-needed" >> /etc/dnsmasq.conf
       echo "bogus-priv" >> /etc/dnsmasq.conf
       echo "no-resolv" >> /etc/dnsmasq.conf
       echo "no-poll" >> /etc/dnsmasq.conf
       grep nameserver /etc/resolv.conf |grep -v 127|sed 's/nameserver /server=/' >> /etc/dnsmasq.conf
       echo "server=8.8.8.8" >> /etc/dnsmasq.conf
       echo "server=8.8.4.4" >> /etc/dnsmasq.conf
       echo "listen-address=127.0.0.1" >> /etc/dnsmasq.conf
       echo "no-dhcp-interface=" >> /etc/dnsmasq.conf
       echo "nameserver 127.0.0.1" > /etc/resolv.conf
       chkconfig dnsmasq on
       service dnsmasq restart
    fi

    # Make sure we use right Java, DynamoDB/Cassandra requires version 7, has to be installed manually on CentOS
    if [ -f /usr/local/java ]; then
       alternatives --install /usr/bin/java java /usr/local/java/bin/java 20000
    fi

    # Setup environment files
    echo "export PATH=\$PATH:$PATH" > /etc/profile.d/$BKJS.sh
    echo "export PKG_CONFIG_PATH=\$PKG_CONFIG_PATH:$PKG_CONFIG_PATH" >> /etc/profile.d/$BKJS.sh
    echo "export NODE_PATH=$NODE_PATH" >> /etc/profile.d/$BKJS.sh
    echo "$BACKEND_PREFIX/lib" > /etc/ld.so.conf.d/local.conf
    postfix reload
    ldconfig

    # Disable firewall and SELinux
    if [ -f /etc/selinux/config ]; then
        sed -i 's/SELINUX=(enforcing|permissive)/SELINUX=disabled/' /etc/selinux/config
    fi
    chkconfig iptables off
    service iptables stop

    # Permissions
    echo "Setting permissions..."
    sed -i 's/requiretty/!requiretty/' /etc/sudoers
    [ ! -f $BACKEND_ROOT ] && mkdir -p $BACKEND_ROOT/etc $BACKEND_ROOT/var $BACKEND_ROOT/log && chown -R $BACKEND_USER $BACKEND_ROOT
    touch /var/log/messages $BACKEND_ROOT/log/access.log $BACKEND_ROOT/log/backend.log
    chmod -f g+r /var/log/messages $BACKEND_ROOT/log/*.log
    chown -fR $BACKEND_USER $BACKEND_PREFIX $BACKEND_ROOT/etc $BACKEND_ROOT/var $BACKEND_ROOT/log/*.log
    [ -f $BACKEND_ROOT/postgres ] && chown -fR postgres $BACKEND_ROOT/postgres

    # Support for shutdown as normal user for instances
    chmod u+s /sbin/reboot

    # Disable atime on the filesystem
    mount -o remount,noatime /

    # Setup startup scripts
    ($0 init-service)

    # Sync time
    ln -sf $BACKEND_PREFIX/bin/bkjs /etc/cron.hourly/ntp

    # Cleanup previous syncing scripts, we always setup from scratch
    find /etc/cron.hourly -name 'sync*' -type l -exec rm -f "{}" ";"
    find /etc/cron.d -name 'sync*' -type l -exec rm -f "{}" ";"

    # Setup syncing scripts
    for dir in $BACKEND_SYNC; do
       echo "Syncing sync-$dir..."
       ln -sf $BACKEND_PREFIX/bin/bkjs /etc/cron.hourly/sync-$dir
       ($0 sync-$dir)
    done

    # Make sure instances are not running indefinitely
    rm -rf /etc/cron.hourly/check-idle
    if [[ $BACKEND_ARGS =~ \-(instance ) ]]; then
       ln -sf $BACKEND_PREFIX/bin/bkjs /etc/cron.hourly/check-idle
    fi

    # Linux distro specific actions
    case "$OS_TYPE" in
      centos)
         if [ ! -f /etc/yum.repos.d/pgdg-93-centos.repo ]; then
            echo "Setting up PostgreSQL repo..."
            rpm -i http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-1.noarch.rpm
         fi

         if [ ! -f /etc/yum.repos.d/rpmforge.repo ]; then
            echo "Setting up RPM Forge..."
            rpm -i http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.3-1.el6.rf.x86_64.rpm
         fi
         yum -yq install postgresql93-devel postgresql93-server
         ;;

      amazon)
         yum -yq install postgresql9-devel postgresql9-server
         ;;

      *)
         ;;
    esac

    # Install required packages and utilities
    yum -yq install gcc-c++ make cmake autoconf automake libtool
    yum -yq install libuuid-devel openssl-devel libxml2-devel openldap-devel readline-devel
    yum -yq install libpng-devel libjpeg-turbo-devel
    yum -yq install mysql-devel mysql-server
    ;;

  init-service)
    ln -sf $BACKEND_PREFIX/bin/$BKJS /etc/init.d/$BKJS
    chkconfig $BKJS on
    ;;

  check-idle)
    uptime=$(</proc/uptime)
    uptime=${uptime%%.*}
    if [ $uptime -gt $BACKEND_IDLETIME ]; then
       ps=$(ps agx|grep backend|grep worker|grep -v grep)
       if [ "$ps" = "" ]; then
          logger "No backend running, $uptime/$BACKEND_IDLETIME, shutting down..."
          echo $ps >> /var/log/messages
          /sbin/halt
       fi
    fi
    if [ $uptime -gt $BACKEND_UPTIME ]; then
       logger "Too long running, $uptime/$BACKEND_UPTIME, shutting down..."
       /sbin/halt
    fi
    ;;

  ntp)
    ntpdate pool.ntp.org > /dev/null 2>&1
    ;;

  backup)
    [ "$BACKUP_DIR" = "" ] && exit
    DATE=$(date +%m-%d-%y)
    DOW=$(date +%w)
    DAY=$(date +%d|sed 's/^0*//g')
    FILE=backup
    # Even days will have 1 appended to the backup file name
    [ "$BACKUP_TWO" != "" -a $(($DAY % 2)) -eq 0 ] && FILE="${FILE}1"
    # Make backup copies daily/weekly...
    [ "$BACKUP_DAILY" != "" ] && FILE="$FILE$DAY"
    [ "$BACKUP_WEEKLY" != "" ] && FILE="$FILE$DOW"
    [ "$BACKUP_HALFWEEKLY" != "" ] && FILE="$FILE$((6 - $DOW))"
    FILE="$FILE-$HOST"
    # Additional options for tar
    BACKUP_TAR_ARGS="--ignore-failed-read --exclude-backup $BACKUP_TAR_ARGS"
    # Files and dirs to backup
    BACKUP_TAR_FILES="/etc /home/$BACKEND_USER $BACKEND_ROOT/etc $BACKEND_ROOT/web $BACKEND_PREFIX $BACKUP_FILES"
    # File extensions to exclude from the backup
    for ext in $BACKUP_TAR_EXCLUDE; do
       BACKUP_TAR_ARGS="--exclude='*.$ext' $BACKUP_TAR_ARGS"
    done
    mkdir -p $BACKUP_DIR

    # Database backup if exists
    if [ "$BACKUP_PG" != "" -a -d $PG_DIR/base ]; then
       BACKUP_TAR_FILES="$TAR_FILES $PG_DIR/*.conf"
       # PG directory on CentOS is separate
       [ -e $PG_PREFIX ] && BACKUP_TAR_FILES="$BACKUP_TAR_FILES $PG_PREFIX"
       $PG_PREFIX/bin/pg_dump -Fc -U postgres $BACKUP_PG > $BACKUP_DIR/$FILE.pgsql.dump
    fi
    if [ "$BACKUP_MYSQL" != "" -a -d $MYSQL_DIR/mysql ]; then
       $MYSQL_PREFIX/bin/mysqldump $BACKUP_MYSQL > $BACKUP_DIR/$FILE.mysql.dump
    fi

    # Filesystem backup
    if [ "$BACKUP_FS" != "" ]; then
       tar $BACKUP_TAR_ARGS -czf $BACKUP_DIR/$FILE.tar.gz $BACKUP_TAR_FILES 2>&1 |egrep -v "tar: Removing leading|tar:.+ignored|as we read it"
    fi

    # Send to remote host if configured, must be full ssh url with path like user@host:/path
    [ "$BACKUP_REMOTE" = "" ] && exit

    FILES=""
    [ -f $BACKUP_DIR/$FILE.tar.gz ] && FILES="$FILES $BACKUP_DIR/$FILE.tar.gz"
    [ -f $BACKUP_DIR/$FILE.pgsql.dump ] && FILES="$FILES $BACKUP_DIR/$FILE.pgsql.dump"
    [ -f $BACKUP_DIR/$FILE.mysql.dump ] && FILES="$FILES $BACKUP_DIR/$FILE.mysql.dump"
    [ "$FILES" = "" ] && exit

    for h in $BACKUP_REMOTE; do
      su - $BACKEND_USER -c "scp -q $FILES $h"
    done
    ;;

  init-pgsql)
    if [ ! -f $PG_DIR/postgresql.conf ]; then
       mkdir -p $PG_DIR
       $PG_PREFIX/bin/initdb -U postgres -D $PG_DIR
       $SED "s/#fsync = on/fsync = off/g" $PG_DIR/postgresql.conf
       $SED "s/#log_destination = 'stderr'/log_destination = 'syslog'/g" $PG_DIR/postgresql.conf
       $PG_PREFIX/bin/postgres -F -D $PG_DIR &
       sleep 3
       $PG_PREFIX/bin/createdb -U postgres backend
    fi
    ;;

  run-pgsql)
    exec nohup $PG_PREFIX/bin/postgres -F -D $PG_DIR >>$BACKEND_ROOT/log/backend.log 2>&1 &
    ;;

  stop-pgsql)
    killall postgres
    ;;

  init-mysql)
    if [ ! -d $MYSQL_DIR/mysql ]; then
       mkdir -p $MYSQL_DIR
       $ECHO "[client]\nuser=root\ndatabase=backend\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\n\n[mysqld]\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\ndatadir=$MYSQL_DIR\nkey_buffer_size=16M\nmax_allowed_packet=500M\ngroup_concat_max_len=16000\n" > ~/.my.cnf
       $MYSQL_PREFIX/bin/mysql_install_db --force --skip-name-resolve --datadir=$MYSQL_DIR --defaults-file=$HOME/.my.cnf
       ($0 run-mysql)
       sleep 3
       $MYSQL_PREFIX/bin/mysql -u root -e "DELETE FROM user WHERE user=''" mysql
       $MYSQL_PREFIX/bin/mysql -u root -e "DROP DATABASE test" mysql
       $MYSQL_PREFIX/bin/mysql -u root -e "CREATE DATABASE backend" mysql
    fi
    ;;

  run-mysql)
    [ -f $MYSQL_PREFIX/bin/mysqld ] && exec nohup $MYSQL_PREFIX/bin/mysqld >>$BACKEND_ROOT/log/backend.log 2>&1 &
    [ -f $MYSQL_PREFIX/libexec/mysqld ] && exec nohup $MYSQL_PREFIX/libexec/mysqld >>$BACKEND_ROOT/log/backend.log 2>&1 &
    ;;

  stop-mysql)
    killall mysqld
    ;;

  init-dynamodb)
    ($0 get-dynamodb)
    ($0 run-dynamodb)
    ;;

  get-dynamodb)
    if [ ! -d $DYNAMODB_PREFIX ]; then
       mkdir -p $DYNAMODB_PREFIX
       curl -L -o ddb.tar.gz https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_2014-04-24.tar.gz
       tar -C $DYNAMODB_PREFIX -xzf ddb.tar.gz
       rm -rf ddb.tar.gz
    fi
    ;;

  run-dynamodb)
    (cd $BACKEND_ROOT/var && exec nohup java -Djava.library.path=$DYNAMODB_PREFIX/DynamoDBLocal_lib -jar $DYNAMODB_PREFIX/DynamoDBLocal.jar --port 8181 >>$BACKEND_ROOT/log/backend.log 2>&1 &)
    ;;

  stop-dynamodb)
    kill $(ps agx|grep DynamoDBLocal|grep -v grep|awk '{print $1}')
    ;;

  get-cassandra)
    if [ ! -d $CASSANDRA_PREFIX ]; then
        mkdir -p $CASSANDRA_PREFIX $CASSANDRA_DIR/var $CASSANDRA_DIR/log
        curl -OL http://downloads.datastax.com/community/dsc.tar.gz
        tar -C $CASSANDRA_PREFIX --strip-components=1 -xzf dsc.tar.gz
        rm -rf dsc.tar.gz
        $SED "s|/var/lib/cassandra/|$CASSANDRA_DIR/var/|g" $CASSANDRA_PREFIX/conf/*.{yaml,properties,sh}
        $SED "s|/var/log/cassandra/|$CASSANDRA_DIR/log/|g" $CASSANDRA_PREFIX/conf/*.{yaml,properties,sh}
        chown -R $BACKEND_USER $CASSANDRA_DIR $CASSANDRA_PREFIX
    fi
    ;;

  init-cassandra)
    ($0 get-cassandra)
    ($0 run-cassandra)
    echo "CREATE KEYSPACE BACKEND WITH REPLICATION = {'class': 'SimpleStrategy' , 'replication_factor': 1 };" > /tmp/cql
    $CASSANDRA_PREFIX/bin/cqlsh -f /tmp/cql
    ;;

  run-cassandra)
    $CASSANDRA_PREFIX/bin/cassandra >>$BACKEND_ROOT/log/backend.log 2>&1
    ;;

  stop-cassandra)
    kill $(ps agx|grep cassandra|grep -v grep|awk '{print $1}')
    ;;

  get-mongodb)
    case "$PLATFORM" in
     Darwin)
       OS=osx
       ;;
     Linux)
       OS=linux
       ;;
    esac
    if [ ! -f $BACKEND_PREFIX/bin/mongod ]; then
       curl -L -o mongo.tar.gz http://fastdl.mongodb.org/osx/mongodb-$OS-x86_64-2.6.0.tgz
       tar -C $BACKEND_PREFIX/bin --strip-components=1 -xzf mongo.tar.gz '*/bin/*'
       rm -rf mongo.tar.gz
    fi
    ;;

  init-mongodb)
    ($0 get-mongodb)
    ($0 run-mongodb)
    ;;

  run-mongodb)
    mkdir -p $MONGO_DIR
    $BACKEND_PREFIX/bin/mongod --fork --dbpath $MONGO_DIR --syslog >>$BACKEND_ROOT/log/backend.log 2>&1
    ;;

  stop-mongodb)
    kill $(ps agx|grep mongod|grep -v grep|awk '{print $1}')
    ;;

  init-backend)
    case "$PLATFORM" in
     Darwin)
         mkdir -p $BACKEND_ROOT/etc
         if [ ! -f $BACKEND_ROOT/etc/config ]; then
            echo "Creating default config file in $BACKEND_ROOT/etc/config..."
            $ECHO "#debug=1\n#repl-port=2080\n#repl-port-web=2081\n#db-pool=cassandra\n#db-cassandra-pool=cql://127.0.0.1/backend\n#db-pgsql-pool=postgresql://postgres@127.0.0.1/backend\n#db-dynamodb-pool=http://localhost:8181\n#db-mysql-pool=mysql:///backend\n" > $BACKEND_ROOT/etc/config
         fi
         echo "Making global backend module accessible in $NODE_BACKEND..."
         rm -rf $NODE_BACKEND && ln -s $(pwd) $NODE_BACKEND
         ;;

     Linux)
         ;;
    esac
    echo "Linking $BACKEND_PREFIX/bin/bkjs to $(pwd)/bkjs"
    rm -rf $BACKEND_PREFIX/bin/bkjs && ln -s $(pwd)/bkjs $BACKEND_PREFIX/bin/bkjs
    ;;

  put-backend)
    # Put backend code to the remote site
    path=node_modules/$BKJS
    while [ $# -gt 1 ]; do
      case "$2" in
      -path) path=$3;shift;shift;;
      -user) BACKEND_USER=$3;shift;shift;;
      -host) BACKEND_MASTER=$3;shift;shift;;
      -exclude) BACKEND_EXCLUDE="$BACKEND_EXCLUDE --exclude $3";shift;shift;;
      esac
    done
    [ "$BACKEND_MASTER" = "" ] && echo "Remote host required, specify with -host or BACKEND_MASTER" && exit
    for f in build pages etc deps log tmp var images files web; do
        BACKEND_EXCLUDE="$BACKEND_EXCLUDE --exclude $f"
    done
    echo "Deploying the module to -l $BACKEND_USER $BACKEND_MASTER:$path ...exclude: $BACKEND_EXCLUDE"
    rsync -av -e "ssh -l $BACKEND_USER" --delete $BACKEND_EXCLUDE `ls` $BACKEND_MASTER:$path
    rsync -av -e "ssh -l $BACKEND_USER" web $BACKEND_MASTER:$path
    ;;

  sync-backend)
    # Sync code from the master, only inside backend home
    while [ $# -gt 1 ]; do
      case "$2" in
      -delete-after) args="$args --delete-after";shift;;
      -root) BACKEND_SYNC_DIR=$3;shift;shift;;
      -host) BACKEND_MASTER=$3;shift;shift;;
      -exclude) args="$args --exclude $3";shift;shift;;
      esac
    done
    [ "$BACKEND_MASTER" = "" -o "$BACKEND_SYNC_DIR" = "" ] && exit
    su - $BACKEND_USER -c "rsync -aqFF $args -e '$BACKEND_SSH_ARGS' $BACKEND_MASTER:$BACKEND_SYNC_DIR/ $BACKEND_ROOT"
    ;;

  run-backend|run-server|run-shell|backendjs|bksh)
    [ -f $NODE_BACKEND/server.js ] && SCRIPT=$NODE_BACKEND/server.js
    [ -f node_modules/$BKJS/server.js ] && SCRIPT=node_modules/$BKJS/server.js
    [ -f server.js ] && SCRIPT=server.js
    [ -f $BACKEND_ROOT/app.js ] && SCRIPT=$BACKEND_ROOT/app.js
    [ -f app.js ] && SCRIPT=app.js
    [ -z $SCRIPT ] && echo "ERROR: Cannot find $BKJS module or app.js" && exit 1
    case "$ARG" in
     run-server)
        # Additional arguments via EC2 instance user data
        BACKEND_ARGS="$BACKEND_ARGS $(wget -q -t1 -T1 -O - http://169.254.169.254/latest/user-data)"
        # Perform setup and possibly get newest source code is sync master is configured
        if [[ $BACKEND_ARGS = *-init-server* ]]; then
           ($0 init-server)
        fi
        echo "Starting node $NODE_ARGS $SCRIPT -home $BACKEND_ROOT $BACKEND_ARGS $@"
        $BACKEND_PREFIX/bin/node $NODE_ARGS $SCRIPT -home $BACKEND_ROOT -daemon -monitor -master -syslog $BACKEND_ARGS $@
        ;;

     run-backend)
        killall node
        $BACKEND_PREFIX/bin/node $SCRIPT -debug -watch `pwd` -home $BACKEND_ROOT -master -web $@
        ;;

     run-shell|bksh)
        $BACKEND_PREFIX/bin/node $SCRIPT -shell -home $BACKEND_ROOT $@
        ;;

     *)
        killall node
        $BACKEND_PREFIX/bin/node $SCRIPT -home $BACKEND_ROOT -master -web $@
        ;;
    esac
    ;;

  show-help)
    $BACKEND_PREFIX/bin/node -e "require('$BKJS').core.showHelp()"
    ;;

  clean-backend)
    rm -rf *~ *.o *.a *.so *.dylib *.node *.log build
    ;;

  build-backend)
    set -e
    if [ ! -f build/Makefile -o binding.gyp -nt build/Makefile ]; then
      $BACKEND_PREFIX/bin/npm build .
    else
      $BACKEND_PREFIX/bin/npm run-script preinstall
      make -C build
      $BACKEND_PREFIX/bin/npm run-script postinstall
    fi
    exit 0
    ;;

  build-node)
    if [ ! -d deps/node ]; then
       mkdir -p deps
       (cd deps && git clone -b v0.10 https://github.com/joyent/node.git)
    fi
    (cd deps/node && [ ! -f Makefile ] && CFLAGS=$CFLAGS CXXFLAGS=$CXXFLAGS LDFLAGS=$LDFLAGS ./configure --prefix=$BACKEND_PREFIX)
    (cd deps/node && git pull && make install clean)
    npm config set nodedir "$(pwd)/deps/node"
    ;;

  build-deps)
    BACKEND_PREFIX=$(pwd)/build
    CFLAGS="-fPIC -I$BACKEND_PREFIX/include"
    LDFLAGS="-L$BACKEND_PREFIX/lib"
    PKG_CONFIG_PATH=$BACKEND_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH
    [ -d /opt/local/lib ] && LDFLAGS="$LDFLAGS -L/opt/local/lib" && CFLAGS="$CFLAGS -I/opt/local/include" && PKG_CONFIG_PATH=/opt/local/lib/pkgconfig:$PKG_CONFIG_PATH
    [ -d /usr/local/lib ] && LDFLAGS="$LDFLAGS -L/usr/local/lib" && CFLAGS="$CFLAGS -I/usr/local/include"
    mkdir -p deps

    pkg-config --silence-errors --exists libopenjp2
    if [ "$?" = "1" -a "$npm_config_backend_deps_force" != "" ]; then
        if [ ! -d deps/openjpeg ]; then
           (cd deps && svn -r r2845 checkout http://openjpeg.googlecode.com/svn/trunk/ openjpeg)
        fi
        (cd deps/openjpeg && cmake -DCFLAGS_C_FLAGS=$CFLAGS -DCMAKE_INSTALL_PREFIX=$BACKEND_PREFIX -DBUILD_SHARED_LIBS:bool=off -DBUILD_CODEC:bool=off . && make)
        (cd deps/openjpeg && make install)
    fi

    pkg-config --silence-errors --exists libnanomsg
    if [ "$?" = "1" -a "$npm_config_backend_deps_force" != "" ]; then
        if [ ! -d deps/nanomsg ]; then
           (cd deps && git clone https://github.com/nanomsg/nanomsg.git)
        fi
        (cd deps/nanomsg && git pull && [ ! -f configure ] && ./autogen.sh)
        (cd deps/nanomsg && [ ! -f Makefile ] && CFLAGS=$CFLAGS CXXFLAGS=$CFLAGS LDFLAGS=$LDFLAGS ./configure --prefix=$BACKEND_PREFIX --enable-static --disable-shared)
        (cd deps/nanomsg && make install)
    fi

    pkg-config --silence-errors --exists Wand
    if [ "$?" = "1" -a "$npm_config_backend_deps_force" != "" ]; then
        if [ ! -d deps/ImageMagick ]; then
           mkdir -p deps/ImageMagick
           curl -OL http://www.imagemagick.org/download/ImageMagick.tar.gz
           tar -C deps/ImageMagick --strip-components=1 -xzf ImageMagick.tar.gz && rm -rf ImageMagick.tar.gz
        fi
        (cd deps/ImageMagick && [ ! -f Makefile ] && CFLAGS=$CFLAGS CXXFLAGS=$CFLAGS LDFLAGS=$LDFLAGS ./configure --prefix=$BACKEND_PREFIX --disable-docs --disable-installed --disable-shared --disable-deprecated --enable-zero-configuration --without-x --without-magick-plus-plus --without-perl CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS")
        (cd deps/ImageMagick && make install)
    fi
    exit 0
    ;;

  clean-deps)
    [ -d deps/node ] && make -C deps/node clean distclean
    [ -d deps/ImageMagick ] && make -C deps/ImageMagick clean distclean
    [ -d deps/nanomsg ] && make -C deps/nanomsg clean distclean
    ;;

  npm-deps)
    shift;
    modules=$(node -e 'console.log(Object.keys(JSON.parse(require("fs").readFileSync("package.json")).dependencies).join(" "))' | sed "s/$BKJS//g")
    $BACKEND_PREFIX/bin/npm install $modules $@
    ;;

  init-app)
    [ -f core.js ] && $ECHO "Cannot create new app inside the backend sources, please use some other directory\n" && exit
    NAME=app
    [ "$2" != "" -a "${2:0:1}" != "-" ] && NAME=$2 && shift
    mkdir -p etc web
    [ ! -e $NAME.sh ] && $ECHO "#!/bin/bash\n\nexec $BACKEND_PREFIX/bin/node $NAME.js -watch -web -debug -etc-dir \`pwd\`/etc -web-dir \`pwd\`/web \$@\n" > $NAME.sh && chmod 755 $NAME.sh
    if [ ! -e etc/config ]; then
       cat > etc/config <<@@@
#debug=1
#repl-port=2080
#repl-port-web=2081
#db-pool=pgsql
#db-mysql-pool=mysql:///backend
#db-cassandra-pool=cql://127.0.0.1/backend
#db-pgsql-pool=postgresql://postgres@127.0.0.1/backend
#db-dynamodb-pool=http://localhost:8181
#db-mongodb=mongodb://localhost
#aws-key=XXXXX
#aws-secret=XXXXX
#api-images-s3=S3BucketName
@@@
    fi

    if [ ! -e $NAME.js ]; then
      cat > $NAME.js <<@@@
//
// Backend app
// Created by $(whoami) on $(date)
//
var backend = require('$BKJS');
var db = backend.db;
var api = backend.api;
var core = backend.core;
var logger = backend.logger;

api.describeTables({
    test: { id: { primary: 1 },
            name: {},
            mtime: { type: "bigint", now: 1 },
    }
});

// Modify every row returned to the client, we can add/del properties
api.processTestRow = function(row, options, cols)
{
    row.url = '/test/list';
    return row;
}

api.initMiddleware = function()
{
    // Allow special URL without signature
    this.allow.push('/free/access');
    // Allow only admins for this URL
    this.allowAdmin.push('/admin/area');
}

api.initApplication = function(callback)
{
    db.setProcessRow('test', this.processTestRow);

    // Add new record
    this.app.all(/^\/test\/add/, function(req, res) {
        db.add('test', { id: req.query.id, name: req.query.name }, function(err, rows) {
            api.sendReply(res, err);
        });
    });
    // Update record
    this.app.all(/^\/test\/update/, function(req, res) {
        if (!req.query.id || !req.query.name) return api.sendRepy(res, { status: 400, message: "id and name required" });

        db.update('test', req.query, function(err, rows) {
            api.sendReply(res, err);
        });
    });
    // Retrieve record by id
    this.app.all(/^\/test\/([0-9]+)/, function(req, res) {
        var options = api.getOptions(req);
        db.get('test', { id: req.params[0] }, options, function(err, rows) {
            res.json(rows);
        });
    });
    callback()
};

api.registerPostProcess('', /^\/account\/([a-z\/]+)$/, function(req, res, rows)
{
    var self = this;
    switch (req.params[0]) {
    case 'add':
       // Perform our own additional work for new accounts, req.account contains new account record
       db.add('test', { id: req.account.id });
       break;
    case 'del':
       db.del('test', { id: req.account.id });
       break;
    }
    res.json(rows);
});

// Redirect on unauthorized access to the files
api.registerAuthCheck('', /^\/test\/list$/, function(req, status, callback) {
    if (status.status != 200) {
        status.status = 302;
        status.url = '/public/index.html';
    }
    callback(status);
});

backend.server.start();
@@@
      $ECHO "{\n \"version\": \"0.1.0\",\n \"author\": \"$(whoami)\",\n \"name\": \"app\",\n \"description\": \"app\",\n \"main\": \"app.js\",\n \"dependencies\": { \"$BKJS\": \">=0.9.0\" },\n \"engines\": { \"node\": \">= 0.10\" },\n \"scripts\": { \"start\": \"node app.js\" },\n \"license\": \"BSD-3-Clause\" }" > package.json
    fi
    ;;

  run-app)
    NAME=app
    [ "$2" != "" -a "${2:0:1}" != "-" ] && NAME=$2 && shift
    $BACKEND_PREFIX/bin/node $NAME.js -debug -watch `pwd` -web $@
    ;;

  show)
    set
    ;;

  *)
    echo "usage: $NAME command ..."
    echo "  where command is:"
    echo ""
    echo "  start - start the backend service"
    echo "  restart - restart the backend service"
    echo "  stop - stop the backend service"
    echo "  stop-web - kill Web worker processes so they will restart with possibly new node modules synced from the master host"
    echo "  init-server - sync the latest software if master is configured and run the setup phase iwth setup-server command"
    echo "  setup-server - initialize the backend environment, setup the Linux server with packages and change system config files for production use (Amazon AMI, CentOS), optional params: [-web] [-root ROOTDIR] [-doman DOMAIN] [-name HOSTNAME]"
    echo "  init-service - create bkjs service to be run on server startup, i.e. makes symlink /etc/init.d/$BKJS after which regular 'service' command can be used to manage the $BKJS service"
    echo "  run-server - run the backend server process, if -init-server argument passed it will run init-server command before starting the $BKJS daemon"
    echo "  check-idle - to be run on instances, check for idleness,if no jobs running then shutdown the host"
    echo "  ntp - run ntpdate to keep local clock"
    echo "  backup - run the backup script, store in $BACKEND_ROOT/backup"
    echo "  init-pgsql - setup and run the PostgreSQL server, install in $PG_PREFIX, data files in $PG_DIR"
    echo "  run-pgsql - run local PostgreSQL server"
    echo "  stop-pgsql - stop local PostgreSQL server"
    echo "  init-dynamodb - download and install local DynamoDB, start the server"
    echo "  get-dynamodb - install local DynamoDB server in $BACKEND_PREFIX/dynamodb"
    echo "  run-dynamodb - run local DynamoDB server installed in $BACKEND_PREFIX/dynamodb, data files in $BACKEND_ROOT/var"
    echo "  stop-dynamodb - stop local DynamoDB server"
    echo "  get-cassandra - download and install Cassandra server in $CASSANDRA_PREFIX"
    echo "  init-cassandra - download and initialize Cassandra, create backend keyspace, run the server"
    echo "  run-cassandra - run local Cassandra server installed in $CASSANDRA_PREFIX, data files in $CASSANDRA_DIR"
    echo "  stop-cassandra - stop local Cassandra server"
    echo "  init-mysql - setup MySQL server for development and create backend database, start the server"
    echo "  run-mysql - run local MySQL server installed in $MYSQL_DIR"
    echo "  stop-mysql - stop local MySQL server"
    echo "  init-mongodb - download and start the Mongo server"
    echo "  get-mongodb - download Mongo server and install in $BACKEND_PREFIX/bin"
    echo "  run-mongodb - run local Mongo server installed in $BACKEND_PREFIX/bin, db path is $MONGO_DIR"
    echo "  stop-mongodb - stop local Mongo server"
    echo "  build-deps - build all required nad optional software for the backend binary module"
    echo "  build-node - build node and install in $BACKEND_PREFIX"
    echo "  clean-backend - clean the source directory"
    echo "  build-backend - compile all required modules and libraries for the backend development(node.js, libs)"
    echo "  clean-deps - clean dependencies binary and object files"
    echo "  npm-deps - install required node.js packages specified in the package.json as dependencies"
    echo "  run-shell - run backend REPL in the current backend directory, works with the backend core or local app.js application"
    echo "  init-backend - init core backend environment, for the core development only, links NPM global backend module $NODE_BACKEND back to this sources"
    echo "  put-backend path [-host host] - push the backend code to the master server, uses env BACKEND_MASTER or host parameter from the command line, replaces all files and removes non-existing on the dest except in web/ directory, there files are only added, never removed"
    echo "  sync-backend [-host host] [-path path] [-delete-after] [-root remote-root] - synchronize other directories from the master host, runs on the instance"
    echo "  run-backend - run local backend server or the app.js if present, all command line params will be passed to the backend.js"
    echo "  show-help - show all backend command line and config parameters"
    echo "  init-app - create app skeleton for an application based on the backend, app name can be specified as the first argument"
    ;;
esac

