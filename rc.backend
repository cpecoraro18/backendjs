#!/bin/sh
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

DOMAIN=localhost

# Host specific settings and environment variables
[ -f /data/etc/profile ] && . /data/etc/profile
[ -f /etc/backendrc ] && . /etc/backendrc
[ -f /usr/local/etc/backendrc ] && . /usr/local/etc/backendrc
[ -f ~/.backend/etc/profile ] && . ~/.backend/etc/profile
[ -f ~/.backendrc ] && . ~/.backendrc

# Make sure we have defaults set
[ "$LOCAL_UID" = "" ] && LOCAL_UID=777
[ "$LOCAL_USER" = "" ] && LOCAL_USER=backend
[ "$BACKEND_USER" = "" ] && BACKEND_USER=backend
[ "$DISK" = "" ] && DISK=xvdb1
[ "$LOGMAIL" = "" ] && LOGMAIL=logwatcher@$DOMAIN
[ "$MAX_IDLETIME" = "" ] && MAX_IDLETIME=900
[ "$MAX_RUNTIME" = "" ] && MAX_RUNTIME=43200
[ "$SSH_ARGS" = "" ] && SSH_ARGS="ssh -l $BACKEND_USER -o ConnectTimeout=5"
[ "$PG_USER" = "" ] && PG_USER=postgres

HOST=$(uname -n | awk -F. '{print $1}')
PLATFORM=$(uname -s)
case "$PLATFORM" in
  Linux)
    [ "$(grep CentOS /etc/issue)" != "" ] && OS_TYPE=centos
    [ "$(grep Amazon /etc/issue)" != "" ] && OS_TYPE=amazon
    # In multi-os environment have to sync by os type due to different dependencies in each distro
    [ "$BACKEND_OS_TYPE" != "" ] && MASTER=$OS_TYPE-$MASTER
    KILLALL="killall -qr"
    ;;
    
  Darwin)
    OS_TYPE=macosx
    [ "$PREFIX" = "" ] && PREFIX=/opt/local
    [ "$PG_PREFIX" = "" ] && PG_PREFIX=$PREFIX/lib/postgresql93 && PG_DIR=$PREFIX/var/db/postgres
    [ "$MYSQL_PREFIX" = "" ] && MYSQL_PREFIX=$PREFIX/lib/mysql56 && MYSQL_DIR=$PREFIX/var/db/mysql56
    KILLALL="killall -m"
    ;;
esac

# Set paths after we know OS type and possible custom settings
[ "$ROOT" = "" ] && ROOT=~/.backend
[ "$PREFIX" = "" ] && PREFIX=/usr/local
[ "$BACKUP" = "" ] && BACKUP=$ROOT/backup
[ "$CDB_PREFIX" = "" ] && CDB_PREFIX=$PREFIX/cassandra
[ "$CDB_DIR" = "" ] && CDB_DIR=$ROOT/cassandra
[ "$PG_PREFIX" = "" ] && PG_PREFIX=/usr/pgsql-9.3
[ "$PG_DIR" = "" ] && PG_DIR=$ROOT/postgres
[ "$MYSQL_DIR" = "" ] && MYSQL_DIR=$ROOT/mysql
[ "$MYSQL_PREFIX" = "" ] && MYSQL_PREFIX=/usr
[ "$DDB_PREFIX" = "" ] && DDB_PREFIX=$PREFIX/dynamodb
[ "$NODE_PATH" = "" ] && NODE_PATH=$PREFIX/lib/node_modules
[ "$NODE_BACKEND" = "" ] && NODE_BACKEND=$NODE_PATH/backend
[ "$MASTER" != "" ] && MASTER=$MASTER.$DOMAIN

export PATH=$PREFIX/bin:$PG_PREFIX/bin:$CDB_PREFIX/bin:/sbin:/usr/sbin:/usr/local/bin:/opt/local/bin:$PATH
export PKG_CONFIG_PATH=$PREFIX/lib/pkgconfig:$PG_PREFIX/pkgconfig:$PKG_CONFIG_PATH

# If started without parameters use script name as a parameter
NAME=$(echo $0 | awk -F/ '{print $NF}')
ARG=${1:-$NAME}

case "$ARG" in
  start)
    case "$NAME" in
      *backend-init)
          $0 init-server
          ;;

      *backend-run)
          $0 run-server
          ;;
    esac
    ;;

  restart)
    $0 stop
    sleep 2
    $0 start
    ;;

  stop)
    $KILLALL 'backend:'
    $KILLALL 'backend:'
    exit 0
    ;;
  
  stop-web)
    $KILLALL 'backend: web'
    $KILLALL 'backend: web'
    exit 0
    ;;

  init)
    echo "Initializing backend..."
    # Update to the latest code if necessary
    ($0 sync)

    # Restart itself with new code to continue the init sequence
    ($0 setup-server)
    ;;
	
  setup-server)
    # Combine with command line arguments if running manually
    BACKEND_ARGS="$BACKEND_ARGS $@"

    # Mount data disk, for cases when all configs are on this disk so the bootstrap profile 
    # must be located somewhere else like home or etc
    if [ "$(grep $ROOT /proc/mounts)" = "" -a "$(grep $DISK /proc/diskstats)" != "" ] ; then
      echo "Mounting $ROOT to $DISK ..."
      mount -t ext4 -o noatime /dev/$DISK $ROOT
      [ -f $ROOT/etc/profile ] && . $ROOT/etc/profile
    fi

    # Set hostname with unique EC2 instance if not set explicitly
    [ "$BACKEND_NAME" = "" ] && BACKEND_NAME=$(echo "api-$(wget -q -t1 -T1 -O - http://169.254.169.254/latest/meta-data/instance-id)"|sed 's/-$//g')
    echo "Setting hostname to $BACKEND_NAME.$DOMAIN..."
    hostname $BACKEND_NAME.$DOMAIN
    echo $BACKEND_NAME.$DOMAIN > /etc/hostname
    if [ -f /etc/sysconfig/network ]; then
       echo "HOSTNAME=$BACKEND_NAME.$DOMAIN" > /tmp/network
       grep -v HOSTNAME /etc/sysconfig/network >> /tmp/network
       mv /tmp/network /etc/sysconfig/network
    fi

    # Additional arguments via EC2 instance user data
    BACKEND_ARGS="$BACKEND_ARGS $(wget -q -t1 -T1 -O - http://169.254.169.254/latest/user-data)"

    echo "Backend arguments: $BACKEND_ARGS"

    # System utilities
    yum -y install ntp rsync dnsmasq poppler-utils wget socat postfix unzip lynx mc gdb nano git man telnet jna
    yum -y remove sendmail

    # Add local user
    if [ "$(grep $LOCAL_USER /etc/passwd)" = "" ]; then
       echo "Adding user $LOCAL_USER..."
       useradd -g 0 -u $LOCAL_UID -m $LOCAL_USER
       echo "$LOCAL_USER ALL = NOPASSWD: ALL" > /etc/sudoers.d/backend
       mkdir -p /home/$LOCAL_USER/.ssh
       cd /home/$LOCAL_USER
       ln -s $ROOT
       ln -s $PREFIX
       ln -s $NODE_BACKEND
       echo "StrictHostKeyChecking no" >> .ssh/config
       cp /home/ec2-user/.ssh/authorized_keys .ssh
       chown -R $LOCAL_USER .ssh
       chmod -R g-rwx,o-rwx .ssh
       echo -e "global = true\ncolor = false\nnodedir = /home/$LOCAL_USER/src/node" > .npmrc
       echo 'alias slog="tail -100 /var/log/messages"' >> .bashrc
       echo "alias alog=\"tail -100 $ROOT/log/access.log\"" >> .bashrc
       echo 'alias mcp="socat readline,history=.socat tcp4:localhost:2080"' >> .bashrc
       echo 'alias brc="sudo $PREFIX/bin/rc.backend"' >> .bashrc
       echo 'alias bcp="$PREFIX/bin/rc.backend run-shell"' >> .bashrc
       echo 'alias ps="ps augx"' >> .bashrc
       echo 'alias mc="mc -b"' >> .bashrc
       echo 'ulimit -c unlimited' >> .bash_profile
       echo 'export JAVA_HOME=/usr' >> .bash_profile
       echo 'export EC2_HOME=/usr/local/ec2' >> .bash_profile
    fi

    # Allow only pubkey auth
    if [ "$(grep '#Backend' /etc/ssh/sshd_config)" = "" ]; then
       echo "Configuring ssh..."
       egrep -v '^(#Backend|PasswordAuth|GSSAPIAuth|MaxAuth|MaxSess|ClientAlive)' /etc/ssh/sshd_config > /tmp/sshd_config
       echo "" >> /tmp/sshd_config
       echo "#Backend config" >> /tmp/sshd_config
       echo "PasswordAuthentication no" >> /tmp/sshd_config
       echo "GSSAPIAuthentication no" >> /tmp/sshd_config
       echo "MaxAuthTries 5" >> /tmp/sshd_config
       echo "MaxSessions 10" >> /tmp/sshd_config
       echo "ClientAliveInterval 15" >> /tmp/sshd_config
       echo "ClientAliveCountMax 5" >> /tmp/sshd_config
       mv /tmp/sshd_config /etc/ssh
       service sshd restart
    fi

    # Setup postfix origin to domain name
    if [ "$(grep '#Backend' /etc/postfix/main.cf)" = "" ]; then
       echo "Configuring postfix..."
       echo '#Backend config' > /tmp/main.cf
       echo 'myorigin = $mydomain' >> /tmp/main.cf
       egrep -v '^(#Backend|myorigin)' /etc/postfix/main.cf >> /tmp/main.cf
       mv /tmp/main.cf /etc/postfix
       chkconfig postfix on
    fi

    # Update admin mail alias
    if [ "$(grep $LOGMAIL /etc/aliases)" = "" ] ; then
       echo "Setting mail alias to $LOGMAIL..."
       egrep -v '^root:' /etc/aliases > /tmp/aliases
       echo -e "root:\t\t$LOGMAIL\n" >> /tmp/aliases
       mv /tmp/aliases /etc
       newaliases
    fi

    # Setup syslog config
    if [ "$(grep '#Backend' /etc/rsyslog.conf)" = "" ]; then
       echo "Configuring rsyslog..."
       echo '#Backend config' > /etc/rsyslog.conf
       echo '$ModLoad imklog' >> /etc/rsyslog.conf
       echo '$ModLoad imuxsock' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitInterval 1' >> /etc/rsyslog.conf
       echo '$SystemLogRateLimitBurst 1000' >> /etc/rsyslog.conf
       echo '$ActionFileDefaultTemplate RSYSLOG_TraditionalFileFormat' >> /etc/rsyslog.conf
       echo '$IncludeConfig /etc/rsyslog.d/*.conf' >> /etc/rsyslog.conf
       echo 'kern.*,*.emerg /dev/console' >> /etc/rsyslog.conf
       echo '*.info;cron.none,local5.none /var/log/messages' >> /etc/rsyslog.conf
       echo 'cron.* /var/log/cron' >> /etc/rsyslog.conf
       echo 'local7.* /var/log/boot.log' >> /etc/rsyslog.conf
       echo "local5.* $ROOT/log/access.log" >> /etc/rsyslog.conf
       killall -HUP rsyslogd
       rm -rf /var/log/maillog* /var/log/secure* /var/log/spooler*
    fi

    # Duplicate messages to the console for easier access
    if [[ $BACKEND_ARGS = *-instance* ]]; then
       echo '*.info /dev/console' > /etc/rsyslog.d/console.conf
       truncate -c -s 0 /var/log/messages
       killall -HUP rsyslogd
    fi

    # Coredumps for debugging
    if [ ! -f /etc/security/limits.d/90-core.conf ]; then
       echo -e '* soft core unlimited\n* hard core unlimited\n* soft nofile 32768\n* hard nofile 32768\nroot soft nofile 32768\nroot hard nofile 32768\n* soft memlock unlimited\n* hard memlock unlimited\nroot soft memlock unlimited\nroot hard memlock unlimited\n* soft as unlimited\n* hard as unlimited\nroot soft as unlimited\nroot hard as unlimited\n' > /etc/security/limits.d/90-core.conf
       sed -i 's/1024/10024/' /etc/security/limits.d/90-nproc.conf
       sed -i 's/kernel.core_uses_pid = 1/kernel.core_uses_pid = 0/' /etc/sysctl.conf
       echo 'vm.max_map_count = 131072' >> /etc/sysctl.conf
    fi

    # DNS cache 
    if [ ! -f /etc/dnsmasq.conf -o "$(grep '#Backend' /etc/dnsmasq.conf)" = "" ]; then
       echo "#Backend" > /etc/dnsmasq.conf
       echo "domain-needed" >> /etc/dnsmasq.conf
       echo "bogus-priv" >> /etc/dnsmasq.conf
       echo "no-resolv" >> /etc/dnsmasq.conf
       echo "no-poll" >> /etc/dnsmasq.conf
       grep nameserver /etc/resolv.conf |grep -v 127|sed 's/nameserver /server=/' >> /etc/dnsmasq.conf
       echo "server=8.8.8.8" >> /etc/dnsmasq.conf
       echo "server=8.8.4.4" >> /etc/dnsmasq.conf
       echo "listen-address=127.0.0.1" >> /etc/dnsmasq.conf
       echo "no-dhcp-interface=" >> /etc/dnsmasq.conf
       echo "nameserver 127.0.0.1" > /etc/resolv.conf
       chkconfig dnsmasq on
       service dnsmasq restart
    fi

    if [ "$(grep '#Backend' /etc/logrotate.d/syslog)" = "" ]; then
       echo "Configuring logrotate..."
       echo "#Backend logging" > /etc/logrotate.d/syslog
       echo "/var/log/cron /var/log/messages $ROOT/log/access.log {" >> /etc/logrotate.d/syslog
       echo " missingok" >> /etc/logrotate.d/syslog
       echo " weekly" >> /etc/logrotate.d/syslog
       echo " sharedscripts" >> /etc/logrotate.d/syslog
       echo " postrotate" >> /etc/logrotate.d/syslog
       echo "  /usr/bin/killall -q -HUP rsyslogd" >> /etc/logrotate.d/syslog
       echo " endscript" >> /etc/logrotate.d/syslog
       echo "}" >> /etc/logrotate.d/syslog
    fi

    # Make sure we use right java
    if [ -f /usr/local/java ]; then
       alternatives --install /usr/bin/java java /usr/local/java/bin/java 20000
    fi

    # Setup environment files
    echo "export PATH=$ROOT/bin:$PREFIX/bin:$PG_PREFIX/bin:$CDB_PREFIX/bin:/sbin:/usr/sbin:/usr/local/bin:$PATH" > /etc/profile.d/backend.sh
    echo "export NODE_PATH=$NODE_PATH" >> /etc/profile.d/backend.sh
    echo "$PREFIX/lib" > /etc/ld.so.conf.d/local.conf
    postfix reload
    ldconfig

    # Disable firewall and SELinux
    if [ -f /etc/selinux/config ]; then
        sed -i 's/SELINUX=(enforcing|permissive)/SELINUX=disabled/' /etc/selinux/config
    fi
    chkconfig iptables off
    service iptables stop

    # Permissions
    echo "Setting permissions..."
    sed -i 's/requiretty/!requiretty/' /etc/sudoers
    [ ! -f $ROOT ] && mkdir -p $ROOT/bin $ROOT/etc $ROOT/var $ROOT/log && chown $LOCAL_USER $ROOT
    touch /var/log/messages $ROOT/log/access.log 
    chmod -f g+r /var/log/messages $ROOT/log/access.log
    chown -fR $LOCAL_USER $PREFIX $ROOT/etc $ROOT/var $ROOT/log/access.log
    [ -f $ROOT/postgres ] && chown -fR postgres $ROOT/postgres

    # Support for shutdown as normal user for instances
    chmod u+s /sbin/reboot
    
    # Disable atime on the filesystem
    mount -o remount,noatime /

    # Setup startup scripts
    ln -sf $PREFIX/bin/rc.backend /etc/init.d/backend
    (cd /etc/rc3.d && ln -sf ../init.d/backend S25backend-init)
    (cd /etc/rc3.d && ln -sf ../init.d/backend S70backend-run)
    
    # Sync time
    ln -sf $PREFIX/bin/rc.backend /etc/cron.hourly/ntp

    # Cleanup previous syncing scripts, we always setup from scratch
    find /etc/cron.hourly -name 'sync*' -type l -exec rm -f "{}" ";"
    find /etc/cron.d -name 'sync*' -type l -exec rm -f "{}" ";"
    
    # Setup syncing scripts
    for dir in $BACKEND_SYNC; do
       echo "Syncing sync-$dir..."
       ln -sf $PREFIX/bin/rc.backend /etc/cron.hourly/sync-$dir
       ($0 sync-$dir)
    done

    # Make sure instances are not running indefinetely
    rm -rf /etc/cron.hourly/check-idle
    if [[ $BACKEND_ARGS =~ \-(instance ) ]]; then
       ln -sf $PREFIX/bin/rc.backend /etc/cron.hourly/check-idle
    fi

    # Linux distro specific actions
    case "$OS_TYPE" in 
      centos)
         if [ ! -f /etc/yum.repos.d/pgdg-93-centos.repo ]; then
            echo "Setting up PostgreSQL repo..."
            rpm -i http://yum.postgresql.org/9.3/redhat/rhel-6-x86_64/pgdg-centos93-9.3-1.noarch.rpm
         fi

         if [ ! -f /etc/yum.repos.d/rpmforge.repo ]; then
            echo "Setting up RPM Forge..."
            rpm -i http://packages.sw.be/rpmforge-release/rpmforge-release-0.5.2-2.el6.rf.x86_64.rpm
         fi
         ;;

      amazon)
         ;;
    esac
    
    # Install required packages and utilities
    yum -y install gcc-c++ make cmake autoconf automake libtool 
    yum -y install libuuid-devel openssl-devel alsa-lib-devel pcre-devel libxml2-devel readline-devel 
    yum -y install postgresql93-devel

    ;;

  run-server)
    # Additional arguments via EC2 instance user data
    BACKEND_ARGS="$BACKEND_ARGS $(wget -q -t1 -T1 -O - http://169.254.169.254/latest/user-data)"
    [[ $BACKEND_ARGS = *-no-server* ]] && exit
 
    echo "Starting backend $BACKEND_ARGS ..."
    $PREFIX/bin/node $NODE_ARGS $NODE_BACKEND/server.js -home $ROOT -daemon -monitor -syslog -repl $BACKEND_ARGS
    ;;

  check-idle)
    uptime=$(</proc/uptime)
    uptime=${uptime%%.*}
    if [ $uptime -gt $MAX_IDLETIME ]; then
       ps=$(ps agx|grep backend|grep worker|grep -v grep)
       if [ "$ps" = "" ]; then
          logger "No backend running, $uptime/$MAX_IDLETIME, shutting down..."
          echo $ps >> /var/log/messages
          /sbin/halt
       fi
    fi 
    if [ $uptime -gt $MAX_RUNTIME ]; then
       logger "Too long running, $uptime/$MAX_RUNTIME, shutting down..."
       /sbin/halt
    fi
    ;;

  sync)
    # Sync code from the master
    [ "$MASTER" = "" ] && exit
    su - $LOCAL_USER -c "rsync -aq --delete-after -e '$SSH_ARGS' $MASTER:$PREFIX/bin/ $PREFIX/bin"
    su - $LOCAL_USER -c "rsync -aq --delete-after -e '$SSH_ARGS' $MASTER:$PREFIX/include/ $PREFIX/include"
    su - $LOCAL_USER -c "rsync -aqFF --delete-after -e '$SSH_ARGS' $MASTER:$PREFIX/lib/ $PREFIX/lib"
    ldconfig
    ;;

  sync-*)
    [ "$MASTER" = "" ] && exit
    dir=${ARG:5}
    case "$dir" in
      del-*)
        dir=${dir:4}
        args="--delete-after"
        ;;
      *)
        args=""
        ;;
    esac
    mkdir -p $ROOT/$dir
    su - $LOCAL_USER -c "rsync -aqFF $args -e '$SSH_ARGS' $MASTER:$ROOT/$dir/ $ROOT/$dir"
    ;;

  ntp)
    ntpdate pool.ntp.org > /dev/null 2>&1
    ;;

  backup)
    DATE=$(date +%m-%d-%y)
    DOW=$(date +%w)
    DAY=$(date +%d|sed 's/^0*//g')
    FILE=backup
    # Even days will have 1 appended to the backup file name
    [ "$BACKUP_COPY" != "" -a $(($DAY % 2)) -eq 0 ] && FILE="${FILE}1"
    # Make backup copies daily/weekly...
    [ "$BACKUP_COPY_DAILY" != "" ] && FILE="$FILE$DAY"
    [ "$BACKUP_COPY_WEEKLY" != "" ] && FILE="$FILE$DOW"
    [ "$BACKUP_COPY_HALFWEEKLY" != "" ] && FILE="$FILE$((6 - $DOW))"
    FILE="$FILE-$HOST"
    # Additional options for tar
    TAR_ARGS="--ignore-failed-read --exclude-backup $TAR_ARGS"
    # Files and dirs to backup
    TAR_FILES="/etc /home/$LOCAL_USER $ROOT/etc $ROOT/web $PREFIX $BACKUP_FILES"
    # File extensions to exclude from the backup
    for ext in $TAR_EXCLUDE; do 
       TAR_ARGS="--exclude='*.$ext' $TAR_ARGS"
    done
    mkdir -p $BACKUP
    
    # Database backup if exists
    if [ "$BACKUP_PG" != "" -a -e $PG_DIR/base ]; then
       TAR_FILES="$TAR_FILES $PG_DIR/*.conf"
       # PG directry on CentOS is separate
       [ -e $PG_PREFIX ] && TAR_FILES="$TAR_FILES $PG_PREFIX"
       $PG_PREFIX/bin/pg_dump -Fc -U postgres $BACKUP_PG > $BACKUP/$FILE.dump
    fi

    # Filesystem backup
    if [ "$BACKUP_FS" != "" ]; then
       tar $TAR_ARGS -czf $BACKUP/$FILE.tar.gz $TAR_FILES 2>&1 |egrep -v "tar: Removing leading|tar:.+ignored|as we read it"
    fi
 
    # Send to remote site backup files   
    REMOTE_BACKUP="$REMOTE_BACKUP $REMOTE_BACKUP_WEEKLY $REMOTE_BACKUP_MONTHLY"
    [ -f $BACKUP/$FILE.tar.gz ] && SCP_FILES="$SCP_FILES $BACKUP/$FILE.tar.gz"
    [ -f $BACKUP/$FILE.dump ] && SCP_FILES="$SCP_FILES $BACKUP/$FILE.dump"

    # Send to remote host if configured, must be full ssh url with path like user@host:/path
    if [ "$SCP_FILES" != "" ]; then
       for h in $REMOTE_BACKUP; do
         su - $LOCAL_USER -c "scp -q $SCP_FILES $h"
       done
    fi
    ;;

  init-pg)
    if [ ! -d $PG_DIR ]; then
       mkdir -p $PG_DIR
       $PG_PREFIX/bin/initdb -U postgres -D $PG_DIR
       sed -i '' "s/#fsync = on/fsync = off/g" $PG_DIR/postgresql.conf 
       sed -i '' "s/#log_destination = 'stderr'/log_destination = 'syslog'/g" $PG_DIR/postgresql.conf 
       $PG_PREFIX/bin/postgres -F -D $PG_DIR &
       sleep 3
       $PG_PREFIX/bin/createdb -U $PG_USER backend
    fi   
    ;;
      
  run-pg)
    $PG_PREFIX/bin/postgres -F -D $PG_DIR &
    ;;
    
  stop-pg)
    killall postgres
    ;;  
    
  init-mysql)
    if [ ! -d $MYSQL_DIR ]; then
       mkdir -p $MYSQL_DIR
       echo "[client]\nuser=root\ndatabase=backend\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\n\n[mysqld]\nport=3306\nsocket=$MYSQL_DIR/mysql.sock\nkey_buffer_size=16M\nmax_allowed_packet=500M\ngroup_concat_max_len=16000\n" > ~/.my.cnf
       $MYSQL_PREFIX/bin/mysql_install_db
       $MYSQL_PREFIX/bin/mysqld &
       sleep 3
       $MYSQL_PREFIX/bin/mysql -u root -e "DELETE FROM user WHERE user='';" mysql
    fi   
    ;;
      
  stop-mysql)
    killall mysqld
    ;;
        
  get-ddb)
    mkdir -p $DDB_PREFIX
    curl -L -o ddb.tar.gz https://s3-us-west-2.amazonaws.com/dynamodb-local/dynamodb_local_2013-09-12.tar.gz
    tar -C $DDB_PREFIX --strip-components=1 -xzf ddb.tar.gz
    rm -rf ddb.tar.gz
    ;;
    
  run-ddb)
    (cd $ROOT/var && exec nohup java -Djava.library.path=$DDB_PREFIX -jar $DDB_PREFIX/DynamoDBLocal.jar --port 8181 >../log/ddb.log 2>&1 &)
    ;;
    
  stop-ddb)
    kill $(ps agx|grep dynamodb|grep -v grep|awk '{print $1}')
    ;;
      
  get-cdb)
    if [ ! -d $CDB_PREFIX ]; then
        mkdir -p $CDB_PREFIX $CDB_DIR/var $CDB_DIR/log
        curl -OL http://downloads.datastax.com/community/dsc.tar.gz
        tar -C $CDB_PREFIX --strip-components=1 -xzf dsc.tar.gz
        rm -rf dsc.tar.gz
        sed -i "s|/var/lib/cassandra/|$CDB_DIR/var/|g" $CDB_PREFIX/conf/*
        sed -i "s|/var/log/cassandra/|$CDB_DIR/log/|g" $CDB_PREFIX/conf/*
        chown -R $LOCAL_USER $CDB_DIR $CDB_PREFIX
    fi
    ;;
  
  init-cdb)
    ($0 run-cdb)
    echo "create keyspace backend with replication = {'class': 'SimpleStrategy' , 'replication_factor': 1 };" > /tmp/cql
    $CDB_PREFIX/bin/cqlsh -f /tmp/cql
    ;;
    
  run-cdb)
    $CDB_PREFIX/bin/cassandra
    ;;
    
  stop-cdb)
    kill $(ps agx|grep cassandra|grep -v grep|awk '{print $1}')
    ;;
      
  init-backend)
    echo "Settings permissions for $PREFIX to $(whoami)..."
    sudo chown -R $(whoami) $PREFIX
    mkdir -p $ROOT/etc
    echo "Creating default config file in $ROOT/etc/config..."
    echo "#db-pool=cassandra\n#db-cassandra-pool=cql://127.0.0.1/backend\n#db-pgsql-pool=postgresql://postgres@127.0.0.1/backend\n#db-dynamodb-pool=http://localhost:8181\n" > $ROOT/etc/config
    echo "Making global backend module accessible in $NODE_BACKEND..."
    rm -rf $NODE_BACKEND && ln -s $(pwd) $NODE_BACKEND
    rm -rf $PREFIX/bin/rc.backend && ln -s $(pwd) $NODE_BACKEND/rc.backend $PREFIX/bin/rc.backend
    ;;
    
  put-backend)
    [ "$MASTER" = "" ] && exit
    rsync -av -e "ssh -l $BACKEND_USER" --delete --exclude '*.o' --exclude '*.so' --exclude 'build' .rsync-filter *.js Makefile* lib node $MASTER:$NODE_BACKEND
    rsync -av -e "ssh -l $BACKEND_USER" backend rc.backend $MASTER:$PREFIX/bin
    rsync -av -e "ssh -l $BACKEND_USER" web/ $MASTER:$ROOT/web
    ;;
    
  run-backend)
    killall node
    SCRIPT=$NODE_BACKEND/server.js
    [ -f server.js ] && SCRIPT=server.js
    $PREFIX/bin/node $SCRIPT -watch `pwd` -debug -home $ROOT -repl -watch-delay 0 -nocron -console -master -web -port 8000 -web-repl-port 2081 $BACKEND_ARGS $@
    ;;
    
  run-shell)
    SCRIPT=$NODE_BACKEND/server.js
    [ -f server.js ] && SCRIPT=server.js
    $PREFIX/bin/node $SCRIPT -shell -home $ROOT $@
    ;;

  show-help)
    $PREFIX/bin/node -e "require('backend').core.help()"
    ;;

  clean-backend)
    rm -rf *~ *.o *.a *.so *.dylib *.node *.log build
    [ -f lib/Makefile ] && make -C lib clean
    ;;
    
  build-backend)
    set -e
    if [ ! -f build/Makefile -o binding.gyp -nt build/Makefile ]; then
      $PREFIX/bin/npm build .
    else  
      $PREFIX/bin/npm run-script preinstall
      make -C build
      $PREFIX/bin/npm run-script postinstall
    fi  
    exit 0
    ;;
    
  build-node)
    if [ ! -d deps/node ]; then
       mkdir -p deps
       (cd deps && git clone -b v0.10 https://github.com/joyent/node.git)
       echo "global=true\nnodedir=`pwd`/deps/node" > $HOME/.npmrc
       CFLAGS="-fno-omit-frame-pointer" 
       CXXFLAGS="-fno-omit-frame-pointer"
    fi
    (cd deps/node && [ ! -f Makefile ] && ./configure --prefix=$PREFIX)
    (cd deps/node && git pull && make install clean)
    ;;
    
  build-deps)
    set -e
    PREFIX=$(pwd)/build
    PKG_CONFIG_PATH="$PREFIX/lib/pkgconfig"
    mkdir -p deps
    
    if [ ! -d deps/nanomsg ]; then
       (cd deps && git clone https://github.com/nanomsg/nanomsg.git)
       (cd deps/nanomsg && [ ! -f configure ] && ./autogen.sh)
    fi
    (cd deps/nanomsg && [ ! -f Makefile ] && ./configure --prefix=$PREFIX --enable-static --disable-shared)
    (cd deps/nanomsg && git pull && make install)
    
    if [ ! -d deps/snappy-1.1.1 ]; then
       curl -OL https://snappy.googlecode.com/files/snappy-1.1.1.tar.gz
       tar -C deps -xzf snappy-1.1.1.tar.gz && rm -rf snappy-1.1.1.tar.gz
    fi   
    (cd deps/snappy-1.1.1 && [ ! -f Makefile ] && ./configure --prefix=$PREFIX --enable-static --disable-shared)
    (cd deps/snappy-1.1.1 && make install)
    
    if [ ! -d deps/leveldb ]; then
       (cd deps && git clone https://code.google.com/p/leveldb)
    fi   
    (cd deps/leveldb && git pull && make OPT="-O2 -DNDEBUG -DSNAPPY -I$PREFIX/include" libleveldb.a && cp -r include/leveldb $PREFIX/include && cp *.a $PREFIX/lib)

    if [ ! -d deps/ImageMagick ]; then
       mkdir -p deps/ImageMagick
       curl -OL http://www.imagemagick.org/download/ImageMagick.tar.gz
       tar -C deps/ImageMagick --strip-components=1 -xzf ImageMagick.tar.gz && rm -rf ImageMagick.tar.gz
    fi
    CFLAGS="-I$PREFIX/include"
    LDFLAGS="-L$PREFIX/lib"
    [ -d /opt/local/lib ] && LDFLAGS="$LDFLAGS -L/opt/local/lib" && CFLAGS="$CFLAGS -I/opt/local/include"
    [ -d /usr/local/lib ] && LDFLAGS="$LDFLAGS -L/usr/locall/lib" && CFLAGS="$CFLAGS -I/usr/local/include" 
    (cd deps/ImageMagick && [ ! -f Makefile ] && ./configure --prefix=$PREFIX --disable-installed --disable-shared --disable-deprecated --enable-zero-configuration --without-x --without-magick-plus-plus --without-perl CFLAGS="$CFLAGS" LDFLAGS="$LDFLAGS") 
    (cd deps/ImageMagick && make install)
    exit 0
    ;;

  clean-deps)
    [ ! -d deps/node ] && make -C deps/node clean
    [ ! -d deps/nanomsg ] && make -C deps/nanomsg clean
    [ ! -d deps/leveldb ] && make -C deps/leveldb clean
    [ ! -d deps/snappy-1.1.1 ] && make -C deps/snappy-1.1.1 clean
    ;;
    
  npm-deps)
    $PREFIX/bin/npm install $(node -e 'console.log(Object.keys(JSON.parse(require("fs").readFileSync("package.json")).dependencies).join(" "))')
    ;;
    
  init-app)
    NAME=app
    [ "$2" != "" -a "${2:0:1}" != "-" ] && NAME=$2 && shift
    mkdir -p $ROOT/etc
    [ ! -e $NAME.sh ] && echo "#!/bin/bash\n\nexec $PREFIX/bin/node $NAME.js \$@\n" > $NAME.sh && chmod 755 $NAME.sh
    [ ! -e $ROOT/etc/config ] && echo "#db-pool=pgsql\n#db-mysql-pool=mysql:///backend\n#db-cassandra-pool=cql://127.0.0.1/backend\n#db-pgsql-pool=postgresql://postgres@127.0.0.1/backend\n#db-dynamodb-pool=http://localhost:8181\n" > $ROOT/etc/config
    if [ ! -e $NAME.js ]; then
      echo "//\n// Backend app\n// Created by $(whoami) on $(date)\n//\n" >> $NAME.js
      echo "var backend = require('backend');" >> $NAME.js
      echo "var express = require('express');\n" >> $NAME.js
      echo "backend.api.registerTables({ test: { id: { primary: 1 }, name: {} } });\n" >> $NAME.js
      echo "backend.api.initMiddleware = function()" >> $NAME.js 
      echo "{" >> $NAME.js
      echo "    // Use web pages from current directory" >> $NAME.js
      echo "    this.app.use(express.static(__dirname + "/web"));" >> $NAME.js       
      echo "}\n" >> $NAME.js
      echo "backend.api.initApplication = function(callback) {" >> $NAME.js
      echo "    // Add new record" >> $NAME.js
      echo "    this.app.all(/^\/test\/add/, function(req, res) {" >> $NAME.js
      echo "        backend.db.add('test', { id: req.query.id, name: req.query.name }, function(err, rows) { backend.api.sendReply(res, err); });" >> $NAME.js
      echo "    });" >> $NAME.js
      echo "    // Retrieve record by id" >> $NAME.js
      echo "    this.app.all(/^\/test\/([0-9]+)/, function(req, res) {" >> $NAME.js
      echo "        backend.db.get('test', { id: req.params[0] }, function(err, rows) { res.json(rows); });" >> $NAME.js
      echo "    });" >> $NAME.js
      echo "    callback()" >> $NAME.js
      echo "};\n" >> $NAME.js
      echo "backend.server.start();" >> $NAME.js
    fi  
    ;;
    
  run-app)
    NAME=app
    [ "$2" != "" -a "${2:0:1}" != "-" ] && NAME=$2 && shift
    $PREFIX/bin/node $NAME.js -web -port 8000 $@ 
    ;;  
    
  show)
    set
    ;;
    
  *)
    echo "usage: $NAME command ..."
    echo "  where command is:"
    echo ""
    echo "  start - start the backend server process, to be used in Linux system startup scripts /etc/init.d by symlinking rc.backend to one of:"
    echo "    SXXbackend-init - startup script to be run very early to setup all required dependencies and directories, similar to rc.backend init-server"
    echo "    SXXbackend-run - to start the backend server, similar to rc.backend run-server"
    echo "  restart - restart the backend server"
    echo "  stop - stop the backend server"
    echo "  stop-web - kill Web worker processes so they will restart with possibly new node modules synced from the master host"
    echo "  init-server - sync the latest software and run the setup phase, this is what is called by the /etc/init.d script symlinked in one of the /etc/rc.d directories"
    echo "  setup-server - initialize the backend environment, setup the Linux server with packages and change sytem config files for production use (Amazon AMI, CentOS)" 
    echo "  run-server - run the backend server process"
    echo "  check-idle - to be run on instances, check for idleness,if no jobs running then shutdown the host"
    echo "  sync - synchronize the backend code from the master server, uses '$MASTER.$DOMAIN' hostname to rsync over ssh"
    echo "  sync-* - synchronize other directories from the master host, * must be a single word representing a folder inside the backend root"
    echo "  ntp - run ntpdate to keep local clock"
    echo "  backup - run the backup script, store in $ROOT/backup"
    echo "  init-pg - setup local PostgreSQL server for development, Mac OS X, install in $PG_PREFIX, data files in $PG_DIR"
    echo "  run-pg - run local PostgreSQL server"
    echo "  stop-pg - stop local PostgreSQL server"
    echo "  get-ddb - install local DynamoDB server in $PREFIX/dynamodb"
    echo "  run-ddb - run local DynamoDB server installed in $PREFIX/dynamodb"
    echo "  stop-ddb - stop local DynamoDB server"
    echo "  get-cdb - install Cassandra server in $PREFIX/cassandra"
    echo "  init-cdb - run Cassandra server and create backend keyspace"
    echo "  run-cdb - run local Cassandra server installed in $PREFIX/cassandra"
    echo "  stop-cdb - stop local Cassandra server"
    echo "  build-deps - build all required software for the backend binary module"
    echo "  build-node - build node and install in $PREFIX"
    echo "  build-imagemagick - build ImageMagick and install in $PREFIX"
    echo "  clean-deps - clean dependencies binary and object files"
    echo "  npm-deps - install required node.js packages specified in the package.json as dependencies"
    echo "  run-shell - run backend REPL in the current backend directory, works with the backend core or an application based on the backend"
    echo "  init-backend - init core backend environment, for the core developemnt only, links NPM global backend module $NODE_BACKEND back to this sources"
    echo "  put-backend - push the backend code to the master server, $MASTER"
    echo "  run-backend - run local backend server"
    echo "  show-help - show all backend command line and config parameters"
    echo "  clean-backend - clean the source directory"
    echo "  build-backend - compile all required modules and libraries for the bakend development(node.js, libs)"
    echo "  init-app - create app skeleton for an application based on the backend, app name can be specified as the first argument"
    echo "  run-app - run the application created with init-app, default is port 8000"
    ;;
esac

