#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  check-server)
    if [ "$OS_TYPE" = "amazon" ]; then
       region=$(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone/|sed 's/[a-z]$//')
       aws configure set region $region
       [ "$(whoami)" = "root" ] && su ec2-user -c "aws configure set region $region"
    fi
    ;;

  send-alert)
    topic=$(get_config_value alert-topic)
    if [ "$topic" != "" ]; then
       region=$(get_arg -region)
       [ "$region" != "" ] && region="--region $region"
       aws sns publish $region --topic-arn $topic --message "$msg"
       [ "$?" = "0" ] && exit 0
    fi
    ;;

  ec2-show|ec2-ls)
    region=$(get_arg -region)
    [ "$region" != "" ] && region="--region $region"
    tag=$(get_arg -tag)
    [ "$tag" != "" -a "$tag" != "." ] && tags="Name=tag:Name,Values=${tag}"
    instances=$(aws ec2 describe-instances $region --filter "Name=instance-state-name,Values=running" $tags --query 'Reservations[*].Instances[*].[InstanceId,PrivateIpAddress,PublicIpAddress,KeyName,Tags[?Key==`Name`]]' --output text|awk '{if($4=="None")print $0;else if($1=="Name")print $2;else printf "%s\t",$0;}')
    skip=$(get_arg -skip-tag)
    [ "$skip" != "" ] && instances=$(echo "$instances"|grep -v -F "$(echo "$skip"| tr ',' '\n')")
    [ "$PLATFORM" = "Linux" -a "$(get_flag -nomyip)" != "" ] && instances=$(echo "$instances"|grep -v -F $(get_local_ip))
    fmt=$(get_arg -fmt)
    [ "$fmt" != "" ] && instances=$(echo "$instances"|awk "{print $(echo $fmt|sed -e 's/id/\$1/' -e 's/ip/\$2/' -e 's/host/\$3/' -e 's/key/\$4/' -e 's/name/\$5/')}")
    if [ "$(get_flag -line)" != "" ]; then
       echo "$instances" | tr '\n' ' '
    else
       echo "$instances"
    fi
    ;;

  ec2-host)
    $0 ec2-show -line -nomyip -fmt ip -tag "$(get_arg -tag)" -region "$(get_arg -region)" -skip-tag "$(get_arg -skip-tag)"
    ;;

  ec2-ssh)
    tag=$(get_arg -tag)
    [ "$tag" = "" ] && echo "-tag is required" && exit 1
    user=$(get_arg -user ec2-user)
    region=$(get_arg -region)
    index=$(get_arg -index)
    cmd=$(get_arg -cmd)
    pub=$(get_flag -pub)
    quiet=$(get_flag -quiet)
    skip=$(get_arg -skip-tag)
    sshargs=$(concat_arg -ssh $BKJS_SSH_ARGS)
    instances=$($0 ec2-show -nomyip -region "$region" -tag "$tag" -skip-tag "$skip"|tr '\t' ',')
    [ "$cmd" = "" -a "$index" = "" ] && index=1
    [ "$index" != "" -a "$index" != "." ] && instances=$(echo "$instances"|head -$index|tail -1)
    [ "$instances" = "" ] && exit 1
    for h in $instances; do
        [ "$quiet" = "" ] && echo "-- $h --"
        if [ "$pub" != "" ]; then
            host=$(echo $h|awk -F, '{print $3}')
        else
            host=$(echo $h|awk -F, '{print $2}')
        fi
        key=$(echo $h|awk -F, '{print $4}')
        ssh="$sshargs -l $user"
        [ "$key" != "" -a -f "~/.ssh/$key.pem" ] && ssh="$ssh -i ~/.ssh/$key.pem"
        ssh $ssh $host "$cmd"
    done
    ;;

  ec2-run)
    cmd=$(get_arg -cmd)
    [ "$cmd" = "" ] && echo "-cmd is required" && exit 1
    id=$(get_arg -id)
    tag=$(get_arg -tag)
    region=$(get_arg -region)
    if [ "$id" = "all" -o "$tag" = "all" -o "$tag" = "." ]; then
       id=$($0 ec2-show -region "$region" -fmt id|awk '{printf "%s,",$1}'|sed 's/,$//')
       tag=""
    fi
    [ "$id" != "" ] && targets="Key=instanceIds,Values=$id"
    [ "$tag" != "" ] && targets="Key=tag:Name,Values=$tag"
    [ "$targets" = "" ] && echo "no targets specified, either -tag or -id is required" && exit 1
    user=$(get_arg -user)
    [ "$user" != "" ] && cmd="su -l $user -c '$cmd'"
    [ "$region" != "" ] && region="--region $region"
    aws ssm send-command --targets $targets --document-name "AWS-RunShellScript" --parameters "commands=[\"$cmd\"]" $region
    ;;

  ec2-region)
    echo $(curl -s http://169.254.169.254/latest/meta-data/placement/availability-zone/|sed 's/[a-z]$//')
    ;;

  ec2-tag)
    tag=$(get_arg -tag Name)
    instance=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
    aws ec2 describe-tags --filter "Name=key,Values=$tag" "Name=resource-id,Values=$instance" --output text| cut -f5|head -1
    ;;

  ec2-stop-api)
    $0 ec2-run -tag $(get_arg -tag api) -user $(get_arg -user ec2-user) -cmd "bkjs stop-api"
    ;;

  create-ami)
    tag=$(get_arg -tag)
    [ "$tag" != "" ] && instance_id=$(bkjs ec2-show -tag $tag -fmt id | head -1)
    instance_id=$(get_arg -instance-id $instance_id)
    [ "$(uname -s)" = "Linux" ] && echo 1 > $HOME/var/bkjs.init
    bksh -aws-create-image -wait -instance-id $instance_id
    rm -f $HOME/var/bkjs.init
    ;;

  create-launch-config)
    name=$(get_arg -name)
    if [ -z "$name" ]; then
       name=$(aws autoscaling describe-launch-configurations --query 'LaunchConfigurations[*].LaunchConfigurationName' --output text|sed 's/[0-9\.-]//g'|sed 's/\t/\n/g'|sort|uniq)
    fi
    for c in $name; do bksh -aws-create-launch-config -config-name $c -update-groups; done
    ;;

  create-launch-template-version)
    name=$(get_arg -name)
    if [ -z "$name" ]; then
       name=$(aws ec2 describe-launch-templates --query 'LaunchTemplates[*].LaunchTemplateName' --output text|sed 's/\t/\n/g'|sort|uniq)
    fi
    for c in $name; do bksh -aws-create-launch-template-version -name $c; done
    ;;

  init-sendmail-ses)
    get_config user -alert-user
    get_config host -alert-host
    get_config password -alert-password
    [ "$user" = "" -o "$password" = "" -o "$host" = "" ] && echo "-host,-user,-password must be provided" && exit
    [ "$(whoami)" != "root" ] && echo "must run by root" && exit 1
    yum -y install sendmail-cf
    echo "AuthInfo:$host \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" > /etc/mail/authinfo
    if [[ $host =~ us-east ]]; then
       echo "AuthInfo:ses-smtp-prod-335357831.us-east-1.elb.amazonaws.com \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" >> /etc/mail/authinfo
    fi
    if [[ $host =~ us-west ]]; then
       echo "AuthInfo:ses-smtp-us-west-2-prod-14896026.us-west-2.elb.amazonaws.com \"U:root\" \"I:$user\" \"P:$password\" \"M:LOGIN\"" >> /etc/mail/authinfo
    fi
    makemap hash /etc/mail/authinfo.db < /etc/mail/authinfo
    if [ "$(grep -s "$host" /etc/mail/access)" = "" ]; then
       echo "Connect:$host RELAY" >> /etc/mail/access
       makemap hash /etc/mail/access.db < /etc/mail/access
    fi
    if [ "$(grep -s "ses-smtp" /etc/mail/access)" = "" ]; then
       if [[ $host =~ us-east ]]; then
          echo "Connect:ses-smtp-prod-335357831.us-east-1.elb.amazonaws.com RELAY" >> /etc/mail/access
       fi
       if [[ $host =~ us-west ]]; then
          echo "Connect:ses-smtp-us-west-2-prod-14896026.us-west-2.elb.amazonaws.com RELAY" >> /etc/mail/access
       fi
       makemap hash /etc/mail/access.db < /etc/mail/access
    fi
    file=/etc/mail/relay.mc
    egrep -v '^MAILER' /etc/mail/sendmail.mc > $file
    echo "define(\`SMART_HOST', \`$host')dnl" >> $file
    echo "define(\`RELAY_MAILER_ARGS', \`TCP \$h 587')dnl" >> $file
    echo "define(\`confAUTH_MECHANISMS', \`LOGIN PLAIN')dnl" >> $file
    echo "FEATURE(\`authinfo', \`hash -o /etc/mail/authinfo.db')dnl" >> $file
    get_config domain -domain
    if [ "$domain" != "" ]; then
       echo "MASQUERADE_AS(\`$domain')dnl" >> $file
       echo "FEATURE(masquerade_envelope)dnl" >> $file
       echo "FEATURE(masquerade_entire_domain)dnl" >> $file
    fi
    egrep '^MAILER' /etc/mail/sendmail.mc >> $file
    m4 $file > /etc/mail/sendmail.cf
    service sendmail restart
    ;;

  init-sendmail-ses-relay)
    off=$(get_flag -off)
    if [ "$off" != "" ]; then
       if [ "$(egrep -s -E "^DSemail-smtp" /etc/mail/sendmail.cf)" != "" ]; then
          sed -i 's/^DSemail-smtp/#DSemail-smtp/' /etc/mail/sendmail.cf
          service sendmail restart
       fi
    else
       if [ "$(egrep -s -E "^DSemail-smtp" /etc/mail/sendmail.cf)" = "" ]; then
          sed -r -i 's/^#+DSemail-smtp/DSemail-smtp/' /etc/mail/sendmail.cf
          service sendmail restart
       fi
    fi
    ;;

  help)
    echo ""
    echo "AWS provisioning commands using:"
    echo ""
    echo "  ec2-show [-region region] [-tag NAME] [-skip-tag NAME] [-nomyip] [-line] [-fmt fmt]- show running instances in region, optional tag pattern can be used for filter, FMT may contain: id,ip,host,key,name which will be replaced with actual values"
    echo "  ec2-run -tag NAME [-id ID] -cmd cmd [-region  region] [-user NAME] - run a command over SSM by tag name or instance id, if -tag or -id one is 'all' then all instances will run the command"
    echo "  ec2-ssh -tag NAME [-region region] [-pub] [-cmd cmd] [-index N|.] - ssh into a host by tag name, key name will be used to specify a keypair from ~/.ssh/, -pub tells to use public IP, -cmd if specified will be run on all matched hosts, -index tell which specific host to use only, dot means all hosts"
    echo "  ec2-host [-tag NAME] [-skip-tag NAME] - show running instances local IP addresses by tag"
    echo "  ec2-region - current instance region"
    echo "  ec2-tag [-tag NAME] - current instance tag name, default key is Name"
    echo "  ec2-stop-api [-tag NAME] - restart gracefully on the specified instances by tag"
    echo "  create-ami [-tag NAME] - create a new AMI from the given running instance by tag or the current instance"
    echo "  create-launch-config [-name NAME] - create new launch configuration from the latest AMI, if no -name is given all existing configs will be copied"
    echo "  create-launch-template-version [-name NAME] - create new launch template verson with the latest AMI, if no -name is given all existing templates will be updated"
    echo "  init-sendmail-ses - [-domain DOMAIN] -alert-host HOST -alert-user USER -alert-password PW - configure sendmail as relay to SES SMTP"
    ;;

  *)
    BKJS_UNKNOWN=1
    ;;
esac

