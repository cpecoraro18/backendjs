#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2017
#

case "$BKJS_CMD" in

  publish-pkg)
    bucket=$(get_arg -bucket $BKJS_DEPLOY_BUCKET)
    [ -z "$bucket" ] && echo "-bucket is required" && exit 1
    [[ ! -z $(git status -s) ]] && echo "Please commit before publishing" && exit 1
    name=$(node -e 'try{console.log(JSON.parse(require("fs").readFileSync("package.json")).name)}catch(e){}')
    version=$(node -e 'try{console.log(JSON.parse(require("fs").readFileSync("package.json")).version)}catch(e){}')
    [ "$name" = "" -o "$version" = "" ] && echo "invalid package" && exit 1
    pkg=$name-$version.tgz
    $0 cleanup
    npm pack
    [ "$?" != "0" ] && exit 1
    aws s3 cp $pkg $bucket/$pkg
    rc=$?
    rm -f $pkg
    [ "$rc" != "0" ] && exit $rc
    ver=$(get_arg -bump patch)
    if [ "$ver" = "major" -o "$ver" = "minor" -o "$ver" = "patch" ]; then
       npm version $ver -f -m "Published $name-$version"
    fi
    tag=$(get_arg -tag)
    stop=$(get_arg -stop)
    [ ! -z "$tag" -a ! -z "$stop" ] && $0 deploy-pkg -name $name -version $version -tag "$tag" -stop "$stop"
    exit 0
    ;;

  update-pkg)
    name=$(get_arg -name)
    bucket=$(get_arg -bucket $BKJS_DEPLOY_BUCKET)
    [ -z "$bucket" ] && bucket=$(get_config_value deploy-bucket)
    [ "$name" = "" -o "$bucket" = "" ] && echo "-name and -bucket are required" && exit 1
    version=$(get_arg -version)
    if [ "$version" = "" -o "$version" = "latest" ]; then
       pkg=$($0 shell -aws-s3-list -path $bucket -sort version -filter "^$name-" -count 1)
    elif [ "$version" = "prev" ]; then
       pkg=$($0 shell -aws-s3-list -path $bucket -sort version -filter "^$name-" -start 1 -count 1)
    else
       pkg=$name-$version.tgz
    fi
    [ "$pkg" = "" ] && exit 0
    cd /home/$user
    out=$(aws s3 cp $bucket/$pkg tmp/$pkg 2>&1)
    rc=$?
    if [ "$rc" = "0" ]; then
       out=$(npm -q -y -q --progress=false install tmp/$pkg 2>&1)
       rc=$?
    fi
    if [ "$rc" = "0" ]; then
       [ "$(whoami)" = "root" ] && chown -R $user tmp/$pkg node_modules/$name
       stop=$(get_arg -stop)
       if [ ! -z "$stop" ]; then
          case "$stop" in
          all)
             bkjs stop
             ;;
          api)
             bkjs stop-api
             ;;
          worker)
             bkjs stop-worker
             ;;
          none)
             ;;
          *)
             rc=13
             ;;
          esac
       fi
    fi
    [ "$rc" != "0" ] && $0 send-alert -event "Update failed for $name-$version from $bucket/$pkg" -descr "Command: $0 $(get_all_args)\n\n$out"
    exit $rc
    ;;

  deploy-pkg)
    name=$(get_arg -name)
    [ "$name" = "" ] && echo "-name is required" && exit 1
    cmd="bkjs update-pkg -name $name"
    version=$(get_arg -version)
    [ "$version" != "" ] && cmd="$cmd -version $version"
    stop=$(get_arg -stop)
    [ "$stop" != "" ] && cmd="$cmd -stop $stop"
    $0 ec2-run -tag $(get_arg -tag) -id $(get_arg -id) -region $(get_arg -region) -user $(get_arg -user ec2-user) -cmd $cmd
    ;;

  cleanup-deploy-bucket)
    name=$(get_arg -name)
    bucket=$(get_arg -bucket $BKJS_DEPLOY_BUCKET)
    [ -z "$bucket" ] && bucket=$(get_config_value deploy-bucket)
    [ "$name" = "" -o "$bucket" = "" ] && echo "-name and -bucket are required" && exit
    count=$(get_arg -count 10)
    [[ $count -le 0 ]] && echo "-count must be greater than zero" && exit
    pkgs=$($0 shell -aws-s3-list -path $bucket -sort version -filter "^$name-" -start $count)
    for p in $pkgs; do
      aws s3 rm $bucket/$p
    done
    ;;

  help)
    echo ""
    echo "Deployment commands:"
    echo ""
    echo "  publish-pkg -bucket S3BUCKET [-tag TAG] [-stop all|api|worker] - publishes the current package into S3 deployment bucket $BKJS_DEPLOY_BUCKET, if -stop and -tag are provided the deploy-pkg will be executed after publish"
    echo "  deploy-pkg -name NAME [-version VER] [-tag TAG] [-stop all|api|worker] - update instances by tags with the specified package/version, uses AWS SSM to send the update cmmand"
    echo "  update-pkg - updates in place the specified package using NPM, this can only be run on an instance, if -stop provided then one of the stop|stop-api|stop-worker commands will be executed after successful update"
    echo "  cleanup-deploy-bucket [-count 10] - delete old packages from the S3 deployment bucket, keep the latest -count versions only"
    ;;

  *)
    BKJS_UNKNOWN=1
    ;;
esac
