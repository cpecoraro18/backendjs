#!/bin/bash
#
#  Author: Vlad Seryakov vseryakov@gmail.com
#  Sep 2013
#

case "$BKJS_CMD" in

  get-elasticsearch)
    [ "$ELASTICSEARCH_PREFIX" = "" ] && ELASTICSEARCH_PREFIX=$BKJS_PREFIX/elasticsearch
    [ "$(get_flag -force)" != "" -a "$ELASTICSEARCH_PREFIX" != "" ] && rm -rf $ELASTICSEARCH_PREFIX
    if [ ! -d $ELASTICSEARCH_PREFIX ]; then
        mkdir -p $ELASTICSEARCH_PREFIX
        platform=$(echo $PLATFORM | tr [:upper:] [:lower:])-x86_64
        curl -L -o es.tgz https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-7.4.1-$platform.tar.gz
        tar -C $ELASTICSEARCH_PREFIX --strip-components=1 -xzf es.tgz
        rm -rf es.tgz
        cd $ELASTICSEARCH_PREFIX
        echo "node.master: true" >> config/elasticsearch.yml
        echo "node.data: true" >> config/elasticsearch.yml
        echo "path.data: $BKJS_HOME/var" >> config/elasticsearch.yml
        echo "path.logs: $BKJS_HOME/log" >> config/elasticsearch.yml
        echo "action.destructive_requires_name: true" >> config/elasticsearch.yml
        if [ "$OS_TYPE" = "amazon" ]; then
            echo 'network.host: ["_ec2_","_local_"]' >> config/elasticsearch.yml
            echo 'discovery.zen.hosts_provider: ec2' >> config/elasticsearch.yml
            echo 'cloud.node.auto_attributes: true' >> config/elasticsearch.yml
            echo 'cluster.routing.allocation.awareness.attributes: aws_availability_zone' >> config/elasticsearch.yml
            bin/elasticsearch-plugin install discovery-ec2 -b
        fi
    fi
    ;;

  init-elasticsearch)
    ($0 get-elasticsearch)
    ($0 run-elasticsearch $(get_all_args))
    if [ "$PLATFORM" = "Linux" ]; then
       sudo $0 init-monit-elasticsearch $(get_all_args)
    fi
    ;;

  run-elasticsearch)
    [ "$ELASTICSEARCH_PREFIX" = "" ] && ELASTICSEARCH_PREFIX=$BKJS_PREFIX/elasticsearch
    # Percent from the total memory
    memsize=$(get_arg -memsize)
    [ "$memsize" != "" ] && memmax="$(( ($(free -m|grep Mem:|awk '{print $2}') * $memsize) / 100 ))m"
    memmax=$(get_arg -memmax $memmax)
    if [ "$memmax" != "" ]; then
       $SED "s/^-Xms.+/-Xms$memmax/" $ELASTICSEARCH_PREFIX/config/jvm.options
       $SED "s/^-Xmx.+/-Xmx$memmax/" $ELASTICSEARCH_PREFIX/config/jvm.options
    fi
    case "$(get_arg -nodetype)" in
    node)
      $SED -e "s/^node.master.+/node.master: true/" -e "s/^node.data.+/node.data: true/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    master)
      $SED -e "s/^node.master.+/node.master: true/" -e "s/^node.data.+/node.data: false/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    data)
      $SED -e "s/^node.master.+/node.master: false/" -e "s/^node.data.+/node.data: true/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    client)
      $SED -e "s/^node.master.+/node.master: false/" -e "s/^node.data.+/node.data: false/" $ELASTICSEARCH_PREFIX/config/elasticsearch.yml
      ;;
    esac
    $ELASTICSEARCH_PREFIX/bin/elasticsearch -p $BKJS_HOME/var/elasticsearch.pid -d >>$BKJS_HOME/log/message.log 2>&1
    ;;

  stop-elasticsearch)
    pkill -f org.elasticsearch
    ;;

  restart-elasticsearch)
    pkill -f org.elasticsearch
    sleep 1
    pkill -f -9 org.elasticsearch
    $0 run-elasticsearch $(get_all_args)
    ;;

  reset-elasticsearch)
    pkill -f org.elasticsearch
    rm -rf $BKJS_HOME/var/nodes
    rm -f $BKJS_HOME/log/elasticsearch*
    $0 run-elasticsearch
    ;;

  stop-elasticsearch-replication)
    host=$(get_arg -host localhost)
    curl -XPUT -H 'Content-Type: application/json' -d '{"transient":{"cluster.routing.allocation.enable":"none"}}' http://$host:9200/_cluster/settings
    curl -XPOST $host:9200/_flush/synced
    ;;

  start-elasticsearch-replication)
    host=$(get_arg -host localhost)
    curl -XPUT -H 'Content-Type: application/json' -d '{"transient":{"cluster.routing.allocation.enable":"all"}}' http://$host:9200/_cluster/settings
    ;;

  exclude-elasticsearch-node)
    host=$(get_arg -host localhost)
    ip=$(get_arg -ip $(get_local_ip))
    [ "$ip" = "." ] && ip=""
    curl -XPUT -H 'Content-Type: application/json' -d "{\"transient\":{\"cluster.routing.allocation.exclude._ip\":\"$ip\"}}" http://$host:9200/_cluster/settings
    ;;

  elasticsearch-health)
    host=$(get_arg -host localhost)
    curl -XGET http://$host:9200/_cluster/health?pretty
    ;;

  stop-elasticsearch-monit)
    [ "$(whoami)" != "root" ] && echo "Not root, skipping setup" && exit 1
    rm -rf /etc/monit.d/elasticsearch*
    monit reload
    $0 stop-elasticsearch
    ;;

  migrate-elasticsearch)
    limit=$(get_arg -limit 250)
    from=$(get_arg -from)
    to=$(get_arg -to http://localhost:9200)
    list="$(curl -XGET $from/_cat/indices?pretty=true -v | cut -d $' ' -f3)"
    for idx in $list
    do
      elasticdump --bulk=true --limit=$limit --output=$to/$idx --input=$from/$idx
    done
    ;;

  help)
    echo ""
    echo "Elasticsearch commands:"
    echo ""
    echo "  get-elasticsearch [-force] - install local ElasticSearch server in $BKJS_PREFIX/elasticsearch"
    echo "  init-elasticsearch - download and install local ElasticSearch, start the server, configure monit"
    echo "  run-elasticsearch [-memsize PERCENT] [-memmax SIZE] [-nodetype TYPE] - run local ElasticSearch server installed in $BKJS_PREFIX/elasticsearch, -memmax is max heap size, -memsize is the percent of the total memory to use, -nodetype can be node,master,data,client"
    echo "  stop-elasticsearch - stop local ElasticSearch server"
    echo "  reset-elasticsearch - remove local ElasticSearch database and restart the server"
    echo ""
    ;;

  *)
    BKJS_UNKNOWN=1
    ;;
esac

