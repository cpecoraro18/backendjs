//
//  Author: Vlad Seryakov vseryakov@gmail.com
//  backendjs 2018
//

const lib = require(__dirname + '/lib');
const db = require(__dirname + '/db');
const api = require(__dirname + '/api');
const bcrypt = require('bcrypt');
const argon2 = require("argon2");
const crypto = require('crypto');

const mod = {
    args: [
        { name: "table", descr: "Table to use for user accounts" },
        { name: "err-(.+)", descr: "Error messages for various cases" },
        { name: "admin-roles", type: "list", descr: "List of special super admin roles" },
        { name: "sigversion", type: "int", descr: "Signature version for secrets" },
        { name: "hash", descr: "Hashing method to use by default: bcrypt, argon2, none" },
        { name: "bcrypt", type: "int", min: 12, descr: "Number of iterations for bcrypt" },
        { name: "argon2", type: "map", datatype: "auto", nocamel: 1, descr: "Argon2 parameteres, ex: type:2,memoryCost:1,hashLength:32" },
    ],
    table: "bk_user",
    sigversion: -1,
    hash: "bcrypt",
    bcrypt: 12,
    argon2: {},
    adminRoles: ["root", "admin"],
    errInvalidSecret: "Invalid user name or password",
    errInvalidUser: "The username is required",
    errInvalidPasswd: "The password is required",
    errInvalidName: "The name is required",
    errInvalidParams: "No username or id provided",
    errInvalidId: "Invalid id provided",
    errInvalidLogin: "No username or password provided",

    srp: {
        hexN: 'AC6BDB41324A9A9BF166DE5E1389582FAF72B6651987EE07FC3192943DB56050A37329CBB4A099ED8193E0757767A13DD52312AB4B03310D' +
              'CD7F48A9DA04FD50E8083969EDB767B0CF6095179A163AB3661A05FBD5FAAAE82918A9962F0B93B855F97993EC975EEAA80D740ADBF4FF74' +
              '7359D041D5C33EA71D281E446B14773BCA97B43A23FB801676BD207A436C6481F1D2B9078717461A5B9D32E688F87748544523B524B0D57D' +
              '5EA77A2775D2ECFA032CFBDBF52FB3786160279004E57AE6AF874E7303CE53299CCC041C7BC308D82A5698F3A8D0C38271AE35F8E9DBFBB6' +
              '94B5C803D89F7AE435DE236D525F54759B65E372FCD68EF20FA7111F9E4AFF73',
        hexG: '02',
    },
};
module.exports = mod;

mod.configure = function(options, callback)
{
    this.tables = {
        [this.table]: {
            login: { primary: 1 },                                      // Account login/username
            id: { type: "uuid", prefix: "u_", unique: 1 },              // Autogenerated ID
            name: { type: "text" },                                     // Account name
            status: { type: "text" },                                   // Status of the account
            secret: { priv: 1 },                                        // Signature secret or scrambled password
            api_secret: { priv: 1 },                                    // Secret for API access token
            type: { type: "list", list: 1, lower: 1, internal: 1 },     // Account roles: admin, ....
            flags: { type: "list", list: 1 },                           // Tags/flags about the account
            expires: { type: "bigint", internal: 1, priv: 1 },          // Deny access to the account if this value is before current date, ms
            ctime: { type: "now", readonly: 1 },                        // Create time
            mtime: { type: "now" }
        },
    };

    callback();
}

mod.configureWeb = function(options, callback)
{
    // For health checks
    api.app.all("/ping", (req, res) => {
        api.sendStatus(res, { type: "text/plain" });
    });

    // Authentication check without accounts module
    api.app.all("/auth", (req, res) => {
        if (!req.account || !req.account.id) {
            return api.sendReply(res, { status: 417, message: mod.errInvalidLogin, code: "NOLOGIN" });
        }
        api.handleSessionSignature(req, () => {
            req.options.cleanup = mod.table;
            req.options.isInternal = 1;
            api.sendJSON(req, null, req.account);
        });
    });

    // Login with just the secret without signature
    api.app.all("/login", (req, res) => {
        if (!req.query.login || !req.query.secret) {
            return api.sendReply(res, { status: 417, message: api.checkErrmsg(req, null, mod.errInvalidLogin), code: "NOLOGIN" });
        }
        // Create internal signature from the login data
        req.signature = api.newSignature(req, "version", mod.sigversion, "source", "l", "login", req.query.login, "secret", req.query.secret);
        delete req.query.login;
        delete req.query.secret;
        api.checkRequestSignature(req, (err) => {
            if (!req.account || !req.account.id) {
                return api.sendJSON(req, err || { status: 417, message: mod.errInvalidLogin, code: "NOLOGIN" });
            }
            api.handleSessionSignature(req, () => {
                req.options.cleanup = mod.table;
                req.options.isInternal = 1;
                api.sendJSON(req, null, req.account);
            });
        });
    });

    // Clear sessions and access tokens
    api.app.all("/logout", (req, res) => {
        api.clearSessionSignature(req);
        api.sendJSON(req);
    });

    // Return images by prefix, id and possibly type
    api.app.all(/^\/image\/([a-zA-Z0-9_.:-]+)\/([^/ ]+)\/?([^/ ]+)?$/, (req, res) => {
        var options = api.getOptions(req);
        options.prefix = req.params[0];
        options.type = req.params[2];
        var id = req.params[1];
        // Image extension at the end so it looks like an image path
        if (options.type) {
            const d = options.type.match(/^(.+)\.(png|jpg|jpeg|gif)$/);
            if (d) options.type = d[1], options.ext = d[2];
        } else {
            const d = id.match(/^(.+)\.(png|jpg|jpeg|gif)$/);
            if (d) id = d[1], options.ext = d[2];
        }
        api.sendIcon(req, id, options);
    });

    callback();
}

// If specified in the options, prepare credentials to be stored in the db, if no error occurred return null, otherwise an error object
//  - scramble is used to encrypt the secret with login as HMAC_SHA256 so the db never stores cleartext credentials
//  - hash - use bcrypt or argon2 explicitely, otherwise use the config
mod.prepareSecret = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (!options) options = {};

    if (!query.secret) delete query.secret;

    if (query.login && query.secret && options.scramble) {
        query.secret = lib.sign(query.secret, query.login, "sha256");
    }

    lib.series([
        function(next) {
            if (!query.secret || (options.hash || mod.hash) != "bcrypt") return next();
            bcrypt.hash(query.secret, mod.bcrypt, (err, hash) => {
                if (!err) query.secret = hash;
                next(err);
            });
        },
        function(next) {
            if (!query.secret || (options.hash || mod.hash) != "argon2") return next();
            argon2.hash(query.secret, mod.argon2).then((hash) => {
                query.secret = hash;
                next();
            }).catch(next);
        },
        function(next) {
            var hooks = api.findHook('secret', '', query.login);
            if (!hooks.length) return next();
            lib.forEachSeries(hooks, function(hook, next2) {
                hook.callback.call(api, query, options, next2);
            }, next);
        },
    ], callback);
}

// Verify an existing user record with given password,
//  - user - if a string it is a hashed secret from an existing user record, otherwise must be an user object
//  - password - plain text password or other secret passed to be verified
mod.checkSecret = function(user, password, callback)
{
    if (typeof user == "string") user = { secret: user };
    if (!user || !user.secret || !password) {
        return callback({ status: 400, message: this.errInvalidSecret });
    }

    // Exact
    if (user.secret == password) return callback();

    // Scrambled
    var scrambled = user.login ? lib.sign(password, user.login, "sha256") : NaN;
    if (user.secret == scrambled) return callback();

    lib.series([
        function(next) {
            if (!/^\$2b\$/.test(user.secret)) return next();
            bcrypt.compare(password, user.secret, (err, rc) => {
                if (rc) return callback();
                next();
            });
        },
        function(next) {
            if (!/^\$2b\$/.test(user.secret)) return next();
            if (!scrambled) return next();
            bcrypt.compare(scrambled, user.secret, (err, rc) => {
                if (rc) return callback();
                next();
            });
        },
        function(next) {
            if (!/^\$argon/.test(user.secret)) return next();
            argon2.verify(user.secret, password).then((rc) => {
                if (rc) return callback();
                next();
            }).catch(() => (next()));
        },
        function(next) {
            if (!/^\$argon/.test(user.secret)) return next();
            if (!scrambled) return next();
            argon2.verify(user.secret, scrambled).then((rc) => {
                if (rc) return callback();
                next();
            }).catch(() => (next()));
        },
    ], () => {
        callback({ status: 401, message: this.errInvalidSecret });
    });
}

mod.isUid = function(id)
{
    return lib.isUuid(id, this.tables[this.table].id.prefix);
}

// Returns an account record by login or id, to make use of a cache add to the config `db-cache-keys-bk_user-id=id`
mod.get = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (typeof query == "string") {
        query = { [lib.isUuid(query) ? "id" : "login"]: query };
    }
    if (query.login) {
        db.get(this.table, query, callback);
    } else
    if (query.id) {
        var opts = { noscan: 1, cacheKeyName: "id", ops: { id: "eq" }, count: 1, first: 1 };
        db.select(this.table, { id: query.id }, opts, (err, row, info) => {
            if (!row) return callback(err);
            // For databases that do not support all columns with indexes(DynamoDB) we have to re-read by the primary key
            if (row.name && row.mtime) return callback(null, row, info);
            db.get(this.table, { login: row.login }, callback);
        });
    } else {
        callback();
    }
}

mod.checkWriteAccess = function(query, options)
{
}

// Registers a new account, returns new record in the callback, when `options.isInternal` is true then allow to set all properties
// otherwise internal properties will not be added
mod.add = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (!query.login) return lib.tryCall(callback, { status: 400, message: this.errInvalidUser });
    if (!query.secret) return lib.tryCall(callback, { status: 400, message: this.errInvalidPasswd });
    if (!query.name) return lib.tryCall(callback, { status: 400, message: this.errInvalidName });
    options = lib.objClone(options, "result_obj", 1, "first", 1);
    this.prepareSecret(query, options, (err) => {
        if (err) return lib.tryCall(callback, err);
        if (!(options.isInternal || api.checkAccountType(options.account, this.adminRoles))) {
            api.clearQuery(this.table, query, "internal");
        }
        delete query.id;
        db.add(this.table, query, options, (err, row, info) => {
            if (!err) {
                for (const p in row) query[p] = row[p];
            }
            lib.tryCall(callback, err, query, info);
        });
    });
}

// Updates an existing account by login or id, if `options.isInternal` is true then allow to update all properties, returns a new record in the callback
mod.update = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    options = lib.objClone(options, "returning", "*", "first", 1);
    this.prepareSecret(query, options, (err) => {
        if (err) return lib.tryCall(callback, err);
        if (!(options.isInternal || api.checkAccountType(options.account, this.adminRoles))) {
            api.clearQuery(this.table, query, "internal");
            if (query.login) delete query.id;
        }
        if (!query.name) delete query.name;
        if (!this.isUid(query.id)) delete query.id;
        if (query.login) {
            db.update(this.table, query, options, callback);
        } else
        if (query.id) {
            db.select(this.table, { id: query.id }, { cacheKeyName: "id", count: 1, first: 1 }, (err, row) => {
                if (!row) return callback(err, { status: 404, message: this.errInvalidId });
                query.login = row.login;
                db.update(this.table, query, options, callback);
            });
        } else {
            lib.tryCall(callback, { status: 400, message: this.errInvalidParams });
        }
    });
}

// Deletes an existing account by login or id, no admin checks, returns the old record in the callback
mod.del = function(query, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (typeof query == "string") {
        query = { [this.isUid(query) ? "id" : "login"]: query };
    }
    options = lib.objClone(options, "returning", "old", "first", 1);
    if (query.login) {
        db.del(this.table, query, options, callback);
    } else
    if (query.id) {
        db.select(this.table, { id: query.id }, { cacheKeyName: "id", count: 1, first: 1 }, (err, row) => {
            if (!row) return callback(err, { status: 404, message: this.errInvalidId });
            query.login = row.login;
            db.del(this.table, query, options, callback);
        });
    } else {
        lib.tryCall(callback, { status: 400, message: this.errInvalidParams });
    }
}

mod.srp.init = function()
{
    if (!this._) {
        this.BigInteger = require("jsbn").BigInteger;
        this.N = new this.BigInteger(this.hexN, 16);
        this.g = new this.BigInteger(this.hexG, 16);
        this.k = this.hash(this.N, this.g);
        this._ = 1;
    }
}

mod.srp.toInt = function(n)
{
    return n instanceof this.BigInteger ? n : typeof n == "string" ? new this.BigInteger(n, 16) : this.rand();
}

mod.srp.hash = function(...args)
{
    const h = crypto.createHash('sha256');
    for (const i in args) {
        if (args[i] instanceof this.BigInteger) {
            h.update(Buffer.from(args[i].toString(16).padStart(this.hexN.length/8, "0"), "hex"));
        } else {
            h.update(args[i]);
        }
    }
    return new this.BigInteger(h.digest("hex"), 16);
}

mod.srp.test = function(user, secret, salt, a, b)
{
    var u = this.register(user, secret, salt);
    console.log("user:", u)
    var l1 = this.login1(a)
    console.log("l1:", l1)
    var v1 = this.verify1(u[1], b)
    console.log("v1:", v1)
    var l2 = this.login2(user, secret, u[0], v1[1])
    console.log("l2:", l2)
    var v2 = this.verify2(user, u[0], u[1], v1[0], l1[1], l2[1])
    console.log("v2:", v2)
}

mod.srp.rand = function()
{
    return new this.BigInteger(crypto.randomBytes(32).toString('hex'), 16);
}

mod.srp.verifier = function(user, secret, salt)
{
    this.init();
    const s = this.toInt(salt);
    const x = this.hash(s, this.hash(user, ':', secret));
    const v = this.g.modPow(x, this.N);
    return [s.toString(16), v.toString(16)];
}

mod.srp.register = function(user, secret, salt)
{
    this.init();
    return this.verifier(user, secret, salt);
}

mod.srp.login1 = function(salt)
{
    this.init();
    const a = this.toInt(salt);
    const A = this.g.modPow(a, this.N);
    return [a.toString(16), A.toString(16)];
}

mod.srp.login2 = function(user, secret, salt, a, B)
{
    this.init();
    B = this.toInt(B);
    if (B.mod(this.N).toString() == "0") return null;
    a = this.toInt(a);
    const s = this.toInt(salt);
    const v = this.hash(s, this.hash(user, ':', secret));
    const A = this.g.modPow(a, this.N);
    const u = this.hash(A, B);
    const S = B.subtract(this.k.multiply(this.g.modPow(v, this.N))).modPow(a.add(u.multiply(v)), this.N);
    const K = this.hash(S);
    const M = this.hash(this.hash(this.N).xor(this.hash(this.g)), this.hash(user), s, A, B, K);
    return [K.toString(16), M.toString(16)];
}

mod.srp.login3 = function(A, M, K, proof)
{
    return this.hash(this.toInt(A), this.toInt(M), this.toInt(K)).equals(this.toInt(proof));
}

mod.srp.verify1 = function(verifier, salt)
{
    this.init();
    const b = this.toInt(salt);
    const v = this.toInt(verifier);
    const B = this.k.multiply(v).add(this.g.modPow(b, this.N)).mod(this.N);
    return [b.toString(16), B.toString(16)];
}

mod.srp.verify2 = function(user, salt, verifier, b, A, proof)
{
    this.init();
    b = this.toInt(b);
    A = this.toInt(A);
    if (A.mod(this.N).toString() == '0') return null;

    const v = this.toInt(verifier);
    const B = this.k.multiply(v).add(this.g.modPow(b, this.N)).mod(this.N);
    if (B.mod(this.N).toString() == '0') return null;

    const u = this.hash(A, B);
    const s = this.toInt(salt);
    const S = A.multiply(v.modPow(u, this.N)).modPow(B, this.N)
    const K = this.hash(S);
    const M = this.hash(this.hash(this.N).xor(this.hash(this.g)), this.hash(user), s, A, B, K);
    if (!M.equals(this.toInt(proof))) return null;
    const P = this.hash(A, M, K);
    return [K.toString(16), P.toString(16)];
}

