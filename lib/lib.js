//
//  Author: Vlad Seryakov vseryakov@gmail.com
//  backendjs 2018
//

const fs = require('fs');
const util = require('util');
const path = require('path');
const bkutils = require('bkjs-utils');
const logger = require(__dirname + '/logger');
const child = require("child_process");
const os = require("os");

// Common utilities and useful functions
const lib = {
    name: 'lib',
    deferTimeout: 50,
    deferId: 1,
    maxStackDepth: 250,
    geoHashRanges: [ [12, 0], [8, 0.019], [7, 0.076], [6, 0.61], [5, 2.4], [4, 20.0], [3, 78.0], [2, 630.0], [1, 2500.0], [1, 99999] ],
    rxNumber: /^(-|\+)?([0-9]+|[0-9]+\.[0-9]+)$/,
    rxFloat: /^(-|\+)?([0-9]+)?\.[0-9]+$/,
    rxUuid: /^([0-9a-z]{1,5}_)?[0-9a-z]{32}(_[0-9a-z]+)?$/,
    rxUrl: /^https?:\/\/.+/,
    rxAscii: /[\x20-\x7F]/,
    rxEmail: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,16}$/i,
    rxEmail1: /[^@<> ]+@[^@<> ]+/,
    rxEmail2: /<?([^@<> ]+@[^@<> ]+)>?/,
    rxPhone: /^([0-9 .+()-]+)/,
    rxPhone2: /[^0-9]/g,
    rxEmpty: /^\s*$/,
    rxGeo: /^[0-9.]+,[0-9.]+$/,
    rxLine: /[\r\n]\n?/,
    rxIpaddress: /^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}(\/[0-9]{1,2})?$/,
    rxNumericType: /^(int|smallint|bigint|now|clock|mtime|random|counter|real|float|double|numeric|number|decimal|long)/i,
    rxObjectType: /^(obj|object|list|set|array)$/i,
    rxTextType: /^(str|string|text)$/i,
    rxCamel: /(?:[-_.])(\w)/g,
    rxSplit: /[,|]/,
    locales: {},
    locale: "",
    hashids: {},
    base64: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    uriSafe: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789._~-",
    base36: "0123456789abcdefghijklmnopqrstuvwxyz",
    base62: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ",
    base62Dict: "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ".split(""),
    base64Dict: {},
    whitespace: " \r\n\t\u2001\u2002\u2003\u2004\u2005\u2006\u2007\u2008\u2009\u200A\u202F\u205F\u3000\u008D\u009F\u0080\u0090\u009B\u0010\u0009\u0000\u0003\u0004\u0017\u0019\u0011\u0012\u0013\u0014\u2028\u2029\u2060\u202C",
    unicodeAsciiMap: {
        "\u00AB": "\"", "\u00BB": "\"", "\u201C": "\"", "\u201D": "\"", "\u02BA": "\"", "\u02EE": "\"", "\u201F": "\"", "\u275D": "\"", "\u275E": "\"", "\u301D": "\"", "\u301E": "\"",
        "\uFF02": "\"", "\u2018": "'", "\u2019": "'", "\u02BB": "'", "\u02C8": "'", "\u02BC": "'", "\u02BD": "'", "\u02B9": "'", "\u201B": "'", "\uFF07": "'", "\u00B4": "'", "\u02CA": "'",
        "\u0060": "'", "\u02CB": "'", "\u275B": "'", "\u275C": "'", "\u0313": "'", "\u0314": "'", "\uFE10": "'", "\uFE11": "'", "\u00F7": "/", "\u00BC": "1/4", "\u00BD": "1/2", "\u00BE": "3/4",
        "\u29F8": "/", "\u0337": "/", "\u0338": "/", "\u2044": "/", "\u2215": "/", "\uFF0F": "/", "\u29F9": "\\", "\u29F5": "\\", "\u20E5": "\\", "\uFE68": "\\", "\uFF3C": "\\", "\u0332": "_",
        "\uFF3F": "_", "\u20D2": "|", "\u20D3": "|", "\u2223": "|", "\uFF5C": "|", "\u23B8": "|", "\u23B9": "|", "\u23D0": "|", "\u239C": "|", "\u239F": "|", "\u23BC": "-", "\u23BD": "-",
        "\u2015": "-", "\uFE63": "-", "\uFF0D": "-", "\u2010": "-", "\u2043": "-", "\uFE6B": "@", "\uFF20": "@", "\uFE69": "$", "\uFF04": "$", "\u01C3": "!", "\uFE15": "!", "\uFE57": "!",
        "\uFF01": "!", "\uFE5F": "#", "\uFF03": "#", "\uFE6A": "%", "\uFF05": "%", "\uFE60": "&", "\uFF06": "&", "\u201A": ", ", "\u0326": ", ", "\uFE50": ", ", "\uFE51": ", ", "\uFF0C": ", ",
        "\uFF64": ", ", "\u2768": "(", "\u276A": "(", "\uFE59": "(", "\uFF08": "(", "\u27EE": "(", "\u2985": "(", "\u2769": ")", "\u276B": ")", "\uFE5A": ")", "\uFF09": ")", "\u27EF": ")",
        "\u2986": ")", "\u204E": "*", "\u2217": "*", "\u229B": "*", "\u2722": "*", "\u2723": "*", "\u2724": "*", "\u2725": "*", "\u2731": "*", "\u2732": "*", "\u2733": "*", "\u273A": "*",
        "\u273B": "*", "\u273C": "*", "\u273D": "*", "\u2743": "*", "\u2749": "*", "\u274A": "*", "\u274B": "*", "\u29C6": "*", "\uFE61": "*", "\uFF0A": "*", "\u02D6": "+", "\uFE62": "+",
        "\uFF0B": "+", "\u3002": ".", "\uFE52": ".", "\uFF0E": ".", "\uFF61": ".", "\uFF10": "0", "\uFF11": "1", "\uFF12": "2", "\uFF13": "3", "\uFF14": "4", "\uFF15": "5", "\uFF16": "6",
        "\uFF17": "7", "\uFF18": "8", "\uFF19": "9", "\u02D0": ":", "\u02F8": ":", "\u2982": ":", "\uA789": ":", "\uFE13": ":", "\uFF1A": ":", "\u204F": ";", "\uFE14": ";", "\uFE54": ";",
        "\uFF1B": ";", "\uFE64": "<", "\uFF1C": "<", "\u0347": "=", "\uA78A": "=", "\uFE66": "=", "\uFF1D": "=", "\uFE65": ">", "\uFF1E": ">", "\uFE16": "?", "\uFE56": "?", "\uFF1F": "?",
        "\uFF21": "A", "\u1D00": "A", "\uFF22": "B", "\u0299": "B", "\uFF23": "C", "\u1D04": "C", "\uFF24": "D", "\u1D05": "D", "\uFF25": "E", "\u1D07": "E", "\uFF26": "F", "\uA730": "F",
        "\uFF27": "G", "\u0262": "G", "\uFF28": "H", "\u029C": "H", "\uFF29": "I", "\u026A": "I", "\uFF2A": "J", "\u1D0A": "J", "\uFF2B": "K", "\u1D0B": "K", "\uFF2C": "L", "\u029F": "L",
        "\uFF2D": "M", "\u1D0D": "M", "\uFF2E": "N", "\u0274": "N", "\uFF2F": "O", "\u1D0F": "O", "\uFF30": "P", "\u1D18": "P", "\uFF31": "Q", "\uFF32": "R", "\u0280": "R", "\uFF33": "S",
        "\uA731": "S", "\uFF34": "T", "\u1D1B": "T", "\uFF35": "U", "\u1D1C": "U", "\uFF36": "V", "\u1D20": "V", "\uFF37": "W", "\u1D21": "W", "\uFF38": "X", "\uFF39": "Y", "\u028F": "Y",
        "\uFF3A": "Z", "\u1D22": "Z", "\u02C6": "^", "\u0302": "^", "\uFF3E": "^", "\u1DCD": "^", "\u2774": "{", "\uFE5B": "{", "\uFF5B": "{", "\u2775": "}", "\uFE5C": "}", "\uFF5D": "}",
        "\uFF3B": "[", "\uFF3D": "]", "\u02DC": "~", "\u02F7": "~", "\u0303": "~", "\u0330": "~", "\u0334": "~", "\u223C": "~", "\uFF5E": "~", "\u00A0": "'", "\u2000": "'", "\u2001": " ",
        "\u2002": " ", "\u2003": " ", "\u2004": " ", "\u2005": " ", "\u2006": " ", "\u2007": " ", "\u2008": " ", "\u2009": " ", "\u200A": " ", "\u202F": " ", "\u205F": " ", "\u3000": " ", "\u008D": " ",
        "\u009F": " ", "\u0080": " ", "\u0090": " ", "\u009B": " ", "\u0010": " ", "\u0009": " ", "\u0000": " ", "\u0003": " ", "\u0004": " ", "\u0017": " ", "\u0019": " ", "\u0011": " ", "\u0012": " ",
        "\u0013": " ", "\u0014": " ", "\u2017": "_", "\u2014": "-", "\u2013": "-", "\u2039": ">", "\u203A": "<", "\u203C": "!!", "\u201E": "\"",
        "\u2026": "...", "\u2028": " ", "\u2029": " ", "\u2060": " ", "\u202C": " ",
    },
    htmlEntities: {
        'AElig': '√Ü','AMP': '','Aacute': '√Å','Abreve': 'ƒÇ','Acirc': '√Ç',
        'Acy': '–ê','Afr': 'ùîÑ','Agrave': '√Ä','Alpha': 'Œë','Amacr': 'ƒÄ',
        'And': '‚©ì','Aogon': 'ƒÑ','Aopf': 'ùî∏','ApplyFunction': '','Aring': '√Ö',
        'Ascr': 'ùíú','Assign': '‚âî','Atilde': '√É','Auml': '√Ñ','Backslash': '‚àñ',
        'Barv': '‚´ß','Barwed': '‚åÜ','Bcy': '–ë','Because': '‚àµ','Bernoullis': '‚Ñ¨',
        'Beta': 'Œí','Bfr': 'ùîÖ','Bopf': 'ùîπ','Breve': 'Àò','Bscr': '‚Ñ¨',
        'Bumpeq': '‚âé','CHcy': '–ß','COPY': '¬©','Cacute': 'ƒÜ','Cap': '‚ãí',
        'CapitalDifferentialD': '‚ÖÖ','Cayleys': '‚Ñ≠','Ccaron': 'ƒå','Ccedil': '√á','Ccirc': 'ƒà',
        'Cconint': '‚à∞','Cdot': 'ƒä','Cedilla': '¬∏','CenterDot': '¬∑','Cfr': '‚Ñ≠',
        'Chi': 'Œß','CircleDot': '‚äô','CircleMinus': '‚äñ','CirclePlus': '‚äï','CircleTimes': '‚äó',
        'ClockwiseContourIntegral': '‚à≤','CloseCurlyDoubleQuote': '‚Äù','CloseCurlyQuote': '‚Äô','Colon': '‚à∑','Colone': '‚©¥',
        'Congruent': '‚â°','Conint': '‚àØ','ContourIntegral': '‚àÆ','Copf': '‚ÑÇ','Coproduct': '‚àê',
        'CounterClockwiseContourIntegral': '‚à≥','Cross': '‚®Ø','Cscr': 'ùíû','Cup': '‚ãì','CupCap': '‚âç',
        'DD': '‚ÖÖ','DDotrahd': '‚§ë','DJcy': '–Ç','DScy': '–Ö','DZcy': '–è',
        'Dagger': '‚Ä°','Darr': '‚Ü°','Dashv': '‚´§','Dcaron': 'ƒé','Dcy': '–î',
        'Del': '‚àá','Delta': 'Œî','Dfr': 'ùîá','DiacriticalAcute': '¬¥','DiacriticalDot': 'Àô',
        'DiacriticalDoubleAcute': 'Àù','DiacriticalGrave': '`','DiacriticalTilde': 'Àú','Diamond': '‚ãÑ','DifferentialD': '‚ÖÜ',
        'Dopf': 'ùîª','Dot': '¬®','DotDot': '‚Éú','DotEqual': '‚âê','DoubleContourIntegral': '‚àØ',
        'DoubleDot': '¬®','DoubleDownArrow': '‚áì','DoubleLeftArrow': '‚áê','DoubleLeftRightArrow': '‚áî','DoubleLeftTee': '‚´§',
        'DoubleLongLeftArrow': '‚ü∏','DoubleLongLeftRightArrow': '‚ü∫','DoubleLongRightArrow': '‚üπ','DoubleRightArrow': '‚áí','DoubleRightTee': '‚ä®',
        'DoubleUpArrow': '‚áë','DoubleUpDownArrow': '‚áï','DoubleVerticalBar': '‚à•','DownArrow': '‚Üì','DownArrowBar': '‚§ì',
        'DownArrowUpArrow': '‚áµ','DownBreve': 'Ãë','DownLeftRightVector': '‚•ê','DownLeftTeeVector': '‚•û','DownLeftVector': '‚ÜΩ',
        'DownLeftVectorBar': '‚•ñ','DownRightTeeVector': '‚•ü','DownRightVector': '‚áÅ','DownRightVectorBar': '‚•ó','DownTee': '‚ä§',
        'DownTeeArrow': '‚Üß','Downarrow': '‚áì','Dscr': 'ùíü','Dstrok': 'ƒê','ENG': '≈ä',
        'ETH': '√ê','Eacute': '√â','Ecaron': 'ƒö','Ecirc': '√ä','Ecy': '–≠',
        'Edot': 'ƒñ','Efr': 'ùîà','Egrave': '√à','Element': '‚àà','Emacr': 'ƒí',
        'EmptySmallSquare': '‚óª','EmptyVerySmallSquare': '‚ñ´','Eogon': 'ƒò','Eopf': 'ùîº','Epsilon': 'Œï',
        'Equal': '‚©µ','EqualTilde': '‚âÇ','Equilibrium': '‚áå','Escr': '‚Ñ∞','Esim': '‚©≥',
        'Eta': 'Œó','Euml': '√ã','Exists': '‚àÉ','ExponentialE': '‚Öá','Fcy': '–§',
        'Ffr': 'ùîâ','FilledSmallSquare': '‚óº','FilledVerySmallSquare': '‚ñ™','Fopf': 'ùîΩ','ForAll': '‚àÄ',
        'Fouriertrf': '‚Ñ±','Fscr': '‚Ñ±','GJcy': '–É','GT': '>','Gamma': 'Œì',
        'Gammad': 'œú','Gbreve': 'ƒû','Gcedil': 'ƒ¢','Gcirc': 'ƒú','Gcy': '–ì',
        'Gdot': 'ƒ†','Gfr': 'ùîä','Gg': '‚ãô','Gopf': 'ùîæ','GreaterEqual': '‚â•',
        'GreaterEqualLess': '‚ãõ','GreaterFullEqual': '‚âß','GreaterGreater': '‚™¢','GreaterLess': '‚â∑','GreaterSlantEqual': '‚©æ',
        'GreaterTilde': '‚â≥','Gscr': 'ùí¢','Gt': '‚â´','HARDcy': '–™','Hacek': 'Àá',
        'Hat': '^','Hcirc': 'ƒ§','Hfr': '‚Ñå','HilbertSpace': '‚Ñã','Hopf': '‚Ñç',
        'HorizontalLine': '‚îÄ','Hscr': '‚Ñã','Hstrok': 'ƒ¶','HumpDownHump': '‚âé','HumpEqual': '‚âè',
        'IEcy': '–ï','IJlig': 'ƒ≤','IOcy': '–Å','Iacute': '√ç','Icirc': '√é',
        'Icy': '–ò','Idot': 'ƒ∞','Ifr': '‚Ñë','Igrave': '√å','Im': '‚Ñë',
        'Imacr': 'ƒ™','ImaginaryI': '‚Öà','Implies': '‚áí','Int': '‚à¨','Integral': '‚à´',
        'Intersection': '‚ãÇ','InvisibleComma': '','InvisibleTimes': '','Iogon': 'ƒÆ','Iopf': 'ùïÄ',
        'Iota': 'Œô','Iscr': '‚Ñê','Itilde': 'ƒ®','Iukcy': '–Ü','Iuml': '√è',
        'Jcirc': 'ƒ¥','Jcy': '–ô','Jfr': 'ùîç','Jopf': 'ùïÅ','Jscr': 'ùí•',
        'Jsercy': '–à','Jukcy': '–Ñ','KHcy': '–•','KJcy': '–å','Kappa': 'Œö',
        'Kcedil': 'ƒ∂','Kcy': '–ö','Kfr': 'ùîé','Kopf': 'ùïÇ','Kscr': 'ùí¶',
        'LJcy': '–â','LT': '<','Lacute': 'ƒπ','Lambda': 'Œõ','Lang': '‚ü™',
        'Laplacetrf': '‚Ñí','Larr': '‚Üû','Lcaron': 'ƒΩ','Lcedil': 'ƒª','Lcy': '–õ',
        'LeftAngleBracket': '‚ü®','LeftArrow': '‚Üê','LeftArrowBar': '‚á§','LeftArrowRightArrow': '‚áÜ','LeftCeiling': '‚åà',
        'LeftDoubleBracket': '‚ü¶','LeftDownTeeVector': '‚•°','LeftDownVector': '‚áÉ','LeftDownVectorBar': '‚•ô','LeftFloor': '‚åä',
        'LeftRightArrow': '‚Üî','LeftRightVector': '‚•é','LeftTee': '‚ä£','LeftTeeArrow': '‚Ü§','LeftTeeVector': '‚•ö',
        'LeftTriangle': '‚ä≤','LeftTriangleBar': '‚ßè','LeftTriangleEqual': '‚ä¥','LeftUpDownVector': '‚•ë','LeftUpTeeVector': '‚•†',
        'LeftUpVector': '‚Üø','LeftUpVectorBar': '‚•ò','LeftVector': '‚Üº','LeftVectorBar': '‚•í','Leftarrow': '‚áê',
        'Leftrightarrow': '‚áî','LessEqualGreater': '‚ãö','LessFullEqual': '‚â¶','LessGreater': '‚â∂','LessLess': '‚™°',
        'LessSlantEqual': '‚©Ω','LessTilde': '‚â≤','Lfr': 'ùîè','Ll': '‚ãò','Lleftarrow': '‚áö',
        'Lmidot': 'ƒø','LongLeftArrow': '‚üµ','LongLeftRightArrow': '‚ü∑','LongRightArrow': '‚ü∂','Longleftarrow': '‚ü∏',
        'Longleftrightarrow': '‚ü∫','Longrightarrow': '‚üπ','Lopf': 'ùïÉ','LowerLeftArrow': '‚Üô','LowerRightArrow': '‚Üò',
        'Lscr': '‚Ñí','Lsh': '‚Ü∞','Lstrok': '≈Å','Lt': '‚â™','Map': '‚§Ö',
        'Mcy': '–ú','MediumSpace': '‚Åü','Mellintrf': '‚Ñ≥','Mfr': 'ùîê','MinusPlus': '‚àì',
        'Mopf': 'ùïÑ','Mscr': '‚Ñ≥','Mu': 'Œú','NJcy': '–ä','Nacute': '≈É',
        'Ncaron': '≈á','Ncedil': '≈Ö','Ncy': '–ù','NegativeMediumSpace': '','NegativeThickSpace': '',
        'NegativeThinSpace': '','NegativeVeryThinSpace': '','NestedGreaterGreater': '‚â´','NestedLessLess': '‚â™','NewLine': '\n',
        'Nfr': 'ùîë','NoBreak': '','NonBreakingSpace': '¬†','Nopf': '‚Ñï','Not': '‚´¨',
        'NotCongruent': '‚â¢','NotCupCap': '‚â≠','NotDoubleVerticalBar': '‚à¶','NotElement': '‚àâ','NotEqual': '‚â†',
        'NotEqualTilde': '‚âÇÃ∏','NotExists': '‚àÑ','NotGreater': '‚âØ','NotGreaterEqual': '‚â±','NotGreaterFullEqual': '‚âßÃ∏',
        'NotGreaterGreater': '‚â´Ã∏','NotGreaterLess': '‚âπ','NotGreaterSlantEqual': '‚©æÃ∏','NotGreaterTilde': '‚âµ','NotHumpDownHump': '‚âéÃ∏',
        'NotHumpEqual': '‚âèÃ∏','NotLeftTriangle': '‚ã™','NotLeftTriangleBar': '‚ßèÃ∏','NotLeftTriangleEqual': '‚ã¨','NotLess': '‚âÆ',
        'NotLessEqual': '‚â∞','NotLessGreater': '‚â∏','NotLessLess': '‚â™Ã∏','NotLessSlantEqual': '‚©ΩÃ∏','NotLessTilde': '‚â¥',
        'NotNestedGreaterGreater': '‚™¢Ã∏','NotNestedLessLess': '‚™°Ã∏','NotPrecedes': '‚äÄ','NotPrecedesEqual': '‚™ØÃ∏','NotPrecedesSlantEqual': '‚ã†',
        'NotReverseElement': '‚àå','NotRightTriangle': '‚ã´','NotRightTriangleBar': '‚ßêÃ∏','NotRightTriangleEqual': '‚ã≠','NotSquareSubset': '‚äèÃ∏',
        'NotSquareSubsetEqual': '‚ã¢','NotSquareSuperset': '‚äêÃ∏','NotSquareSupersetEqual': '‚ã£','NotSubset': '‚äÇ‚Éí','NotSubsetEqual': '‚äà',
        'NotSucceeds': '‚äÅ','NotSucceedsEqual': '‚™∞Ã∏','NotSucceedsSlantEqual': '‚ã°','NotSucceedsTilde': '‚âøÃ∏','NotSuperset': '‚äÉ‚Éí',
        'NotSupersetEqual': '‚äâ','NotTilde': '‚âÅ','NotTildeEqual': '‚âÑ','NotTildeFullEqual': '‚âá','NotTildeTilde': '‚ââ',
        'NotVerticalBar': '‚à§','Nscr': 'ùí©','Ntilde': '√ë','Nu': 'Œù','OElig': '≈í',
        'Oacute': '√ì','Ocirc': '√î','Ocy': '–û','Odblac': '≈ê','Ofr': 'ùîí',
        'Ograve': '√í','Omacr': '≈å','Omega': 'Œ©','Omicron': 'Œü','Oopf': 'ùïÜ',
        'OpenCurlyDoubleQuote': '‚Äú','OpenCurlyQuote': '‚Äò','Or': '‚©î','Oscr': 'ùí™','Oslash': '√ò',
        'Otilde': '√ï','Otimes': '‚®∑','Ouml': '√ñ','OverBar': '‚Äæ','OverBrace': '‚èû',
        'OverBracket': '‚é¥','OverParenthesis': '‚èú','PartialD': '‚àÇ','Pcy': '–ü','Pfr': 'ùîì',
        'Phi': 'Œ¶','Pi': 'Œ†','PlusMinus': '¬±','Poincareplane': '‚Ñå','Popf': '‚Ñô',
        'Pr': '‚™ª','Precedes': '‚â∫','PrecedesEqual': '‚™Ø','PrecedesSlantEqual': '‚âº','PrecedesTilde': '‚âæ',
        'Prime': '‚Ä≥','Product': '‚àè','Proportion': '‚à∑','Proportional': '‚àù','Pscr': 'ùí´',
        'Psi': 'Œ®','QUOT': '"','Qfr': 'ùîî','Qopf': '‚Ñö','Qscr': 'ùí¨',
        'RBarr': '‚§ê','REG': '¬Æ','Racute': '≈î','Rang': '‚ü´','Rarr': '‚Ü†',
        'Rarrtl': '‚§ñ','Rcaron': '≈ò','Rcedil': '≈ñ','Rcy': '–†','Re': '‚Ñú',
        'ReverseElement': '‚àã','ReverseEquilibrium': '‚áã','ReverseUpEquilibrium': '‚•Ø','Rfr': '‚Ñú','Rho': 'Œ°',
        'RightAngleBracket': '‚ü©','RightArrow': '‚Üí','RightArrowBar': '‚á•','RightArrowLeftArrow': '‚áÑ','RightCeiling': '‚åâ',
        'RightDoubleBracket': '‚üß','RightDownTeeVector': '‚•ù','RightDownVector': '‚áÇ','RightDownVectorBar': '‚•ï','RightFloor': '‚åã',
        'RightTee': '‚ä¢','RightTeeArrow': '‚Ü¶','RightTeeVector': '‚•õ','RightTriangle': '‚ä≥','RightTriangleBar': '‚ßê',
        'RightTriangleEqual': '‚äµ','RightUpDownVector': '‚•è','RightUpTeeVector': '‚•ú','RightUpVector': '‚Üæ','RightUpVectorBar': '‚•î',
        'RightVector': '‚áÄ','RightVectorBar': '‚•ì','Rightarrow': '‚áí','Ropf': '‚Ñù','RoundImplies': '‚•∞',
        'Rrightarrow': '‚áõ','Rscr': '‚Ñõ','Rsh': '‚Ü±','RuleDelayed': '‚ß¥','SHCHcy': '–©',
        'SHcy': '–®','SOFTcy': '–¨','Sacute': '≈ö','Sc': '‚™º','Scaron': '≈†',
        'Scedil': '≈û','Scirc': '≈ú','Scy': '–°','Sfr': 'ùîñ','ShortDownArrow': '‚Üì',
        'ShortLeftArrow': '‚Üê','ShortRightArrow': '‚Üí','ShortUpArrow': '‚Üë','Sigma': 'Œ£','SmallCircle': '‚àò',
        'Sopf': 'ùïä','Sqrt': '‚àö','Square': '‚ñ°','SquareIntersection': '‚äì','SquareSubset': '‚äè',
        'SquareSubsetEqual': '‚äë','SquareSuperset': '‚äê','SquareSupersetEqual': '‚äí','SquareUnion': '‚äî','Sscr': 'ùíÆ',
        'Star': '‚ãÜ','Sub': '‚ãê','Subset': '‚ãê','SubsetEqual': '‚äÜ','Succeeds': '‚âª',
        'SucceedsEqual': '‚™∞','SucceedsSlantEqual': '‚âΩ','SucceedsTilde': '‚âø','SuchThat': '‚àã','Sum': '‚àë',
        'Sup': '‚ãë','Superset': '‚äÉ','SupersetEqual': '‚äá','Supset': '‚ãë','THORN': '√û',
        'TRADE': '‚Ñ¢','TSHcy': '–ã','TScy': '–¶','Tab': '  ','Tau': 'Œ§',
        'Tcaron': '≈§','Tcedil': '≈¢','Tcy': '–¢','Tfr': 'ùîó','Therefore': '‚à¥',
        'Theta': 'Œò','ThickSpace': '‚Åü‚Ää','ThinSpace': '‚Äâ','Tilde': '‚àº','TildeEqual': '‚âÉ',
        'TildeFullEqual': '‚âÖ','TildeTilde': '‚âà','Topf': 'ùïã','TripleDot': '‚Éõ','Tscr': 'ùíØ',
        'Tstrok': '≈¶','Uacute': '√ö','Uarr': '‚Üü','Uarrocir': '‚•â','Ubrcy': '–é',
        'Ubreve': '≈¨','Ucirc': '√õ','Ucy': '–£','Udblac': '≈∞','Ufr': 'ùîò',
        'Ugrave': '√ô','Umacr': '≈™','UnderBar': '_','UnderBrace': '‚èü','UnderBracket': '‚éµ',
        'UnderParenthesis': '‚èù','Union': '‚ãÉ','UnionPlus': '‚äé','Uogon': '≈≤','Uopf': 'ùïå',
        'UpArrow': '‚Üë','UpArrowBar': '‚§í','UpArrowDownArrow': '‚áÖ','UpDownArrow': '‚Üï','UpEquilibrium': '‚•Æ',
        'UpTee': '‚ä•','UpTeeArrow': '‚Ü•','Uparrow': '‚áë','Updownarrow': '‚áï','UpperLeftArrow': '‚Üñ',
        'UpperRightArrow': '‚Üó','Upsi': 'œí','Upsilon': 'Œ•','Uring': '≈Æ','Uscr': 'ùí∞',
        'Utilde': '≈®','Uuml': '√ú','VDash': '‚ä´','Vbar': '‚´´','Vcy': '–í',
        'Vdash': '‚ä©','Vdashl': '‚´¶','Vee': '‚ãÅ','Verbar': '‚Äñ','Vert': '‚Äñ',
        'VerticalBar': '‚à£','VerticalLine': '|','VerticalSeparator': '‚ùò','VerticalTilde': '‚âÄ','VeryThinSpace': '‚Ää',
        'Vfr': 'ùîô','Vopf': 'ùïç','Vscr': 'ùí±','Vvdash': '‚ä™','Wcirc': '≈¥',
        'Wedge': '‚ãÄ','Wfr': 'ùîö','Wopf': 'ùïé','Wscr': 'ùí≤','Xfr': 'ùîõ',
        'Xi': 'Œû','Xopf': 'ùïè','Xscr': 'ùí≥','YAcy': '–Ø','YIcy': '–á',
        'YUcy': '–Æ','Yacute': '√ù','Ycirc': '≈∂','Ycy': '–´','Yfr': 'ùîú',
        'Yopf': 'ùïê','Yscr': 'ùí¥','Yuml': '≈∏','ZHcy': '–ñ','Zacute': '≈π',
        'Zcaron': '≈Ω','Zcy': '–ó','Zdot': '≈ª','ZeroWidthSpace': '','Zeta': 'Œñ',
        'Zfr': '‚Ñ®','Zopf': '‚Ñ§','Zscr': 'ùíµ','aacute': '√°','abreve': 'ƒÉ',
        'ac': '‚àæ','acE': '‚àæÃ≥','acd': '‚àø','acirc': '√¢','acute': '¬¥',
        'acy': '–∞','aelig': '√¶','af': '','afr': 'ùîû','agrave': '√†',
        'alefsym': '‚Ñµ','aleph': '‚Ñµ','alpha': 'Œ±','amacr': 'ƒÅ','amalg': '‚®ø',
        'amp': '','and': '‚àß','andand': '‚©ï','andd': '‚©ú','andslope': '‚©ò',
        'andv': '‚©ö','ang': '‚à†','ange': '‚¶§','angle': '‚à†','angmsd': '‚à°',
        'angmsdaa': '‚¶®','angmsdab': '‚¶©','angmsdac': '‚¶™','angmsdad': '‚¶´','angmsdae': '‚¶¨',
        'angmsdaf': '‚¶≠','angmsdag': '‚¶Æ','angmsdah': '‚¶Ø','angrt': '‚àü','angrtvb': '‚äæ',
        'angrtvbd': '‚¶ù','angsph': '‚à¢','angst': '√Ö','angzarr': '‚çº','aogon': 'ƒÖ',
        'aopf': 'ùïí','ap': '‚âà','apE': '‚©∞','apacir': '‚©Ø','ape': '‚âä',
        'apid': '‚âã','apos': "'",'approx': '‚âà','approxeq': '‚âä','aring': '√•',
        'ascr': 'ùí∂','ast': '*','asymp': '‚âà','asympeq': '‚âç','atilde': '√£',
        'auml': '√§','awconint': '‚à≥','awint': '‚®ë','bNot': '‚´≠','backcong': '‚âå',
        'backepsilon': 'œ∂','backprime': '‚Äµ','backsim': '‚àΩ','backsimeq': '‚ãç','barvee': '‚äΩ',
        'barwed': '‚åÖ','barwedge': '‚åÖ','bbrk': '‚éµ','bbrktbrk': '‚é∂','bcong': '‚âå',
        'bcy': '–±','bdquo': '‚Äû','becaus': '‚àµ','because': '‚àµ','bemptyv': '‚¶∞',
        'bepsi': 'œ∂','bernou': '‚Ñ¨','beta': 'Œ≤','beth': '‚Ñ∂','between': '‚â¨',
        'bfr': 'ùîü','bigcap': '‚ãÇ','bigcirc': '‚óØ','bigcup': '‚ãÉ','bigodot': '‚®Ä',
        'bigoplus': '‚®Å','bigotimes': '‚®Ç','bigsqcup': '‚®Ü','bigstar': '‚òÖ','bigtriangledown': '‚ñΩ',
        'bigtriangleup': '‚ñ≥','biguplus': '‚®Ñ','bigvee': '‚ãÅ','bigwedge': '‚ãÄ','bkarow': '‚§ç',
        'blacklozenge': '‚ß´','blacksquare': '‚ñ™','blacktriangle': '‚ñ¥','blacktriangledown': '‚ñæ','blacktriangleleft': '‚óÇ',
        'blacktriangleright': '‚ñ∏','blank': '‚ê£','blk12': '‚ñí','blk14': '‚ñë','blk34': '‚ñì',
        'block': '‚ñà','bne': '=‚É•','bnequiv': '‚â°‚É•','bnot': '‚åê','bopf': 'ùïì',
        'bot': '‚ä•','bottom': '‚ä•','bowtie': '‚ãà','boxDL': '‚ïó','boxDR': '‚ïî',
        'boxDl': '‚ïñ','boxDr': '‚ïì','boxH': '‚ïê','boxHD': '‚ï¶','boxHU': '‚ï©',
        'boxHd': '‚ï§','boxHu': '‚ïß','boxUL': '‚ïù','boxUR': '‚ïö','boxUl': '‚ïú',
        'boxUr': '‚ïô','boxV': '‚ïë','boxVH': '‚ï¨','boxVL': '‚ï£','boxVR': '‚ï†',
        'boxVh': '‚ï´','boxVl': '‚ï¢','boxVr': '‚ïü','boxbox': '‚ßâ','boxdL': '‚ïï',
        'boxdR': '‚ïí','boxdl': '‚îê','boxdr': '‚îå','boxh': '‚îÄ','boxhD': '‚ï•',
        'boxhU': '‚ï®','boxhd': '‚î¨','boxhu': '‚î¥','boxminus': '‚äü','boxplus': '‚äû',
        'boxtimes': '‚ä†','boxuL': '‚ïõ','boxuR': '‚ïò','boxul': '‚îò','boxur': '‚îî',
        'boxv': '‚îÇ','boxvH': '‚ï™','boxvL': '‚ï°','boxvR': '‚ïû','boxvh': '‚îº',
        'boxvl': '‚î§','boxvr': '‚îú','bprime': '‚Äµ','breve': 'Àò','brvbar': '¬¶',
        'bscr': 'ùí∑','bsemi': '‚Åè','bsim': '‚àΩ','bsime': '‚ãç','bsol': '\\',
        'bsolb': '‚ßÖ','bsolhsub': '‚üà','bull': '‚Ä¢','bullet': '‚Ä¢','bump': '‚âé',
        'bumpE': '‚™Æ','bumpe': '‚âè','bumpeq': '‚âè','cacute': 'ƒá','cap': '‚à©',
        'capand': '‚©Ñ','capbrcup': '‚©â','capcap': '‚©ã','capcup': '‚©á','capdot': '‚©Ä',
        'caps': '‚à©Ô∏Ä','caret': '‚ÅÅ','caron': 'Àá','ccaps': '‚©ç','ccaron': 'ƒç',
        'ccedil': '√ß','ccirc': 'ƒâ','ccups': '‚©å','ccupssm': '‚©ê','cdot': 'ƒã',
        'cedil': '¬∏','cemptyv': '‚¶≤','cent': '¬¢','centerdot': '¬∑','cfr': 'ùî†',
        'chcy': '—á','check': '‚úì','checkmark': '‚úì','chi': 'œá','cir': '‚óã',
        'cirE': '‚ßÉ','circ': 'ÀÜ','circeq': '‚âó','circlearrowleft': '‚Ü∫','circlearrowright': '‚Üª',
        'circledR': '¬Æ','circledS': '‚ìà','circledast': '‚äõ','circledcirc': '‚äö','circleddash': '‚äù',
        'cire': '‚âó','cirfnint': '‚®ê','cirmid': '‚´Ø','cirscir': '‚ßÇ','clubs': '‚ô£',
        'clubsuit': '‚ô£','colon': ':','colone': '‚âî','coloneq': '‚âî','comma': ',',
        'commat': '@','comp': '‚àÅ','compfn': '‚àò','complement': '‚àÅ','complexes': '‚ÑÇ',
        'cong': '‚âÖ','congdot': '‚©≠','conint': '‚àÆ','copf': 'ùïî','coprod': '‚àê',
        'copy': '¬©','copysr': '‚Ñó','crarr': '‚Üµ','cross': '‚úó','cscr': 'ùí∏',
        'csub': '‚´è','csube': '‚´ë','csup': '‚´ê','csupe': '‚´í','ctdot': '‚ãØ',
        'cudarrl': '‚§∏','cudarrr': '‚§µ','cuepr': '‚ãû','cuesc': '‚ãü','cularr': '‚Ü∂',
        'cularrp': '‚§Ω','cup': '‚à™','cupbrcap': '‚©à','cupcap': '‚©Ü','cupcup': '‚©ä',
        'cupdot': '‚äç','cupor': '‚©Ö','cups': '‚à™Ô∏Ä','curarr': '‚Ü∑','curarrm': '‚§º',
        'curlyeqprec': '‚ãû','curlyeqsucc': '‚ãü','curlyvee': '‚ãé','curlywedge': '‚ãè','curren': '¬§',
        'curvearrowleft': '‚Ü∂','curvearrowright': '‚Ü∑','cuvee': '‚ãé','cuwed': '‚ãè','cwconint': '‚à≤',
        'cwint': '‚à±','cylcty': '‚å≠','dArr': '‚áì','dHar': '‚••','dagger': '‚Ä†',
        'daleth': '‚Ñ∏','darr': '‚Üì','dash': '‚Äê','dashv': '‚ä£','dbkarow': '‚§è',
        'dblac': 'Àù','dcaron': 'ƒè','dcy': '–¥','dd': '‚ÖÜ','ddagger': '‚Ä°',
        'ddarr': '‚áä','ddotseq': '‚©∑','deg': '¬∞','delta': 'Œ¥','demptyv': '‚¶±',
        'dfisht': '‚•ø','dfr': 'ùî°','dharl': '‚áÉ','dharr': '‚áÇ','diam': '‚ãÑ',
        'diamond': '‚ãÑ','diamondsuit': '‚ô¶','diams': '‚ô¶','die': '¬®','digamma': 'œù',
        'disin': '‚ã≤','div': '√∑','divide': '√∑','divideontimes': '‚ãá','divonx': '‚ãá',
        'djcy': '—í','dlcorn': '‚åû','dlcrop': '‚åç','dollar': '$','dopf': 'ùïï',
        'dot': 'Àô','doteq': '‚âê','doteqdot': '‚âë','dotminus': '‚à∏','dotplus': '‚àî',
        'dotsquare': '‚ä°','doublebarwedge': '‚åÜ','downarrow': '‚Üì','downdownarrows': '‚áä','downharpoonleft': '‚áÉ',
        'downharpoonright': '‚áÇ','drbkarow': '‚§ê','drcorn': '‚åü','drcrop': '‚åå','dscr': 'ùíπ',
        'dscy': '—ï','dsol': '‚ß∂','dstrok': 'ƒë','dtdot': '‚ã±','dtri': '‚ñø',
        'dtrif': '‚ñæ','duarr': '‚áµ','duhar': '‚•Ø','dwangle': '‚¶¶','dzcy': '—ü',
        'dzigrarr': '‚üø','eDDot': '‚©∑','eDot': '‚âë','eacute': '√©','easter': '‚©Æ',
        'ecaron': 'ƒõ','ecir': '‚âñ','ecirc': '√™','ecolon': '‚âï','ecy': '—ç',
        'edot': 'ƒó','ee': '‚Öá','efDot': '‚âí','efr': 'ùî¢','eg': '‚™ö',
        'egrave': '√®','egs': '‚™ñ','egsdot': '‚™ò','el': '‚™ô','elinters': '‚èß',
        'ell': '‚Ñì','els': '‚™ï','elsdot': '‚™ó','emacr': 'ƒì','empty': '‚àÖ',
        'emptyset': '‚àÖ','emptyv': '‚àÖ','emsp13': '‚ÄÑ','emsp14': '‚ÄÖ','emsp': '‚ÄÉ',
        'eng': '≈ã','ensp': '‚ÄÇ','eogon': 'ƒô','eopf': 'ùïñ','epar': '‚ãï',
        'eparsl': '‚ß£','eplus': '‚©±','epsi': 'Œµ','epsilon': 'Œµ','epsiv': 'œµ',
        'eqcirc': '‚âñ','eqcolon': '‚âï','eqsim': '‚âÇ','eqslantgtr': '‚™ñ','eqslantless': '‚™ï',
        'equals': '=','equest': '‚âü','equiv': '‚â°','equivDD': '‚©∏','eqvparsl': '‚ß•',
        'erDot': '‚âì','erarr': '‚•±','escr': '‚ÑØ','esdot': '‚âê','esim': '‚âÇ',
        'eta': 'Œ∑','eth': '√∞','euml': '√´','euro': '‚Ç¨','excl': '!',
        'exist': '‚àÉ','expectation': '‚Ñ∞','exponentiale': '‚Öá','fallingdotseq': '‚âí','fcy': '—Ñ',
        'female': '‚ôÄ','ffilig': 'Ô¨É','fflig': 'Ô¨Ä','ffllig': 'Ô¨Ñ','ffr': 'ùî£',
        'filig': 'Ô¨Å','fjlig': 'fj','flat': '‚ô≠','fllig': 'Ô¨Ç','fltns': '‚ñ±',
        'fnof': '∆í','fopf': 'ùïó','forall': '‚àÄ','fork': '‚ãî','forkv': '‚´ô',
        'fpartint': '‚®ç','frac12': '¬Ω','frac13': '‚Öì','frac14': '¬º','frac15': '‚Öï',
        'frac16': '‚Öô','frac18': '‚Öõ','frac23': '‚Öî','frac25': '‚Öñ','frac34': '¬æ',
        'frac35': '‚Öó','frac38': '‚Öú','frac45': '‚Öò','frac56': '‚Öö','frac58': '‚Öù',
        'frac78': '‚Öû','frasl': '‚ÅÑ','frown': '‚å¢','fscr': 'ùíª','gE': '‚âß',
        'gEl': '‚™å','gacute': '«µ','gamma': 'Œ≥','gammad': 'œù','gap': '‚™Ü',
        'gbreve': 'ƒü','gcirc': 'ƒù','gcy': '–≥','gdot': 'ƒ°','ge': '‚â•',
        'gel': '‚ãõ','geq': '‚â•','geqq': '‚âß','geqslant': '‚©æ','ges': '‚©æ',
        'gescc': '‚™©','gesdot': '‚™Ä','gesdoto': '‚™Ç','gesdotol': '‚™Ñ','gesl': '‚ãõÔ∏Ä',
        'gesles': '‚™î','gfr': 'ùî§','gg': '‚â´','ggg': '‚ãô','gimel': '‚Ñ∑',
        'gjcy': '—ì','gl': '‚â∑','glE': '‚™í','gla': '‚™•','glj': '‚™§',
        'gnE': '‚â©','gnap': '‚™ä','gnapprox': '‚™ä','gne': '‚™à','gneq': '‚™à',
        'gneqq': '‚â©','gnsim': '‚ãß','gopf': 'ùïò','grave': '`','gscr': '‚Ñä',
        'gsim': '‚â≥','gsime': '‚™é','gsiml': '‚™ê','gt': '>','gtcc': '‚™ß',
        'gtcir': '‚©∫','gtdot': '‚ãó','gtlPar': '‚¶ï','gtquest': '‚©º','gtrapprox': '‚™Ü',
        'gtrarr': '‚•∏','gtrdot': '‚ãó','gtreqless': '‚ãõ','gtreqqless': '‚™å','gtrless': '‚â∑',
        'gtrsim': '‚â≥','gvertneqq': '‚â©Ô∏Ä','gvnE': '‚â©Ô∏Ä','hArr': '‚áî','hairsp': '‚Ää',
        'half': '¬Ω','hamilt': '‚Ñã','hardcy': '—ä','harr': '‚Üî','harrcir': '‚•à',
        'harrw': '‚Ü≠','hbar': '‚Ñè','hcirc': 'ƒ•','hearts': '‚ô•','heartsuit': '‚ô•',
        'hellip': '‚Ä¶','hercon': '‚äπ','hfr': 'ùî•','hksearow': '‚§•','hkswarow': '‚§¶',
        'hoarr': '‚áø','homtht': '‚àª','hookleftarrow': '‚Ü©','hookrightarrow': '‚Ü™','hopf': 'ùïô',
        'horbar': '‚Äï','hscr': 'ùíΩ','hslash': '‚Ñè','hstrok': 'ƒß','hybull': '‚ÅÉ',
        'hyphen': '‚Äê','iacute': '√≠','ic': '','icirc': '√Æ','icy': '–∏',
        'iecy': '–µ','iexcl': '¬°','iff': '‚áî','ifr': 'ùî¶','igrave': '√¨',
        'ii': '‚Öà','iiiint': '‚®å','iiint': '‚à≠','iinfin': '‚ßú','iiota': '‚Ñ©',
        'ijlig': 'ƒ≥','imacr': 'ƒ´','image': '‚Ñë','imagline': '‚Ñê','imagpart': '‚Ñë',
        'imath': 'ƒ±','imof': '‚ä∑','imped': '∆µ','in': '‚àà','incare': '‚ÑÖ',
        'infin': '‚àû','infintie': '‚ßù','inodot': 'ƒ±','int': '‚à´','intcal': '‚ä∫',
        'integers': '‚Ñ§','intercal': '‚ä∫','intlarhk': '‚®ó','intprod': '‚®º','iocy': '—ë',
        'iogon': 'ƒØ','iopf': 'ùïö','iota': 'Œπ','iprod': '‚®º','iquest': '¬ø',
        'iscr': 'ùíæ','isin': '‚àà','isinE': '‚ãπ','isindot': '‚ãµ','isins': '‚ã¥',
        'isinsv': '‚ã≥','isinv': '‚àà','it': '','itilde': 'ƒ©','iukcy': '—ñ',
        'iuml': '√Ø','jcirc': 'ƒµ','jcy': '–π','jfr': 'ùîß','jmath': '»∑',
        'jopf': 'ùïõ','jscr': 'ùíø','jsercy': '—ò','jukcy': '—î','kappa': 'Œ∫',
        'kappav': 'œ∞','kcedil': 'ƒ∑','kcy': '–∫','kfr': 'ùî®','kgreen': 'ƒ∏',
        'khcy': '—Ö','kjcy': '—ú','kopf': 'ùïú','kscr': 'ùìÄ','lAarr': '‚áö',
        'lArr': '‚áê','lAtail': '‚§õ','lBarr': '‚§é','lE': '‚â¶','lEg': '‚™ã',
        'lHar': '‚•¢','lacute': 'ƒ∫','laemptyv': '‚¶¥','lagran': '‚Ñí','lambda': 'Œª',
        'lang': '‚ü®','langd': '‚¶ë','langle': '‚ü®','lap': '‚™Ö','laquo': '¬´',
        'larr': '‚Üê','larrb': '‚á§','larrbfs': '‚§ü','larrfs': '‚§ù','larrhk': '‚Ü©',
        'larrlp': '‚Ü´','larrpl': '‚§π','larrsim': '‚•≥','larrtl': '‚Ü¢','lat': '‚™´',
        'latail': '‚§ô','late': '‚™≠','lates': '‚™≠Ô∏Ä','lbarr': '‚§å','lbbrk': '‚ù≤',
        'lbrace': '{','lbrack': '[','lbrke': '‚¶ã','lbrksld': '‚¶è','lbrkslu': '‚¶ç',
        'lcaron': 'ƒæ','lcedil': 'ƒº','lceil': '‚åà','lcub': '{','lcy': '–ª',
        'ldca': '‚§∂','ldquo': '‚Äú','ldquor': '‚Äû','ldrdhar': '‚•ß','ldrushar': '‚•ã',
        'ldsh': '‚Ü≤','le': '‚â§','leftarrow': '‚Üê','leftarrowtail': '‚Ü¢','leftharpoondown': '‚ÜΩ',
        'leftharpoonup': '‚Üº','leftleftarrows': '‚áá','leftrightarrow': '‚Üî','leftrightarrows': '‚áÜ','leftrightharpoons': '‚áã',
        'leftrightsquigarrow': '‚Ü≠','leftthreetimes': '‚ãã','leg': '‚ãö','leq': '‚â§','leqq': '‚â¶',
        'leqslant': '‚©Ω','les': '‚©Ω','lescc': '‚™®','lesdot': '‚©ø','lesdoto': '‚™Å',
        'lesdotor': '‚™É','lesg': '‚ãöÔ∏Ä','lesges': '‚™ì','lessapprox': '‚™Ö','lessdot': '‚ãñ',
        'lesseqgtr': '‚ãö','lesseqqgtr': '‚™ã','lessgtr': '‚â∂','lesssim': '‚â≤','lfisht': '‚•º',
        'lfloor': '‚åä','lfr': 'ùî©','lg': '‚â∂','lgE': '‚™ë','lhard': '‚ÜΩ',
        'lharu': '‚Üº','lharul': '‚•™','lhblk': '‚ñÑ','ljcy': '—ô','ll': '‚â™',
        'llarr': '‚áá','llcorner': '‚åû','llhard': '‚•´','lltri': '‚ó∫','lmidot': '≈Ä',
        'lmoust': '‚é∞','lmoustache': '‚é∞','lnE': '‚â®','lnap': '‚™â','lnapprox': '‚™â',
        'lne': '‚™á','lneq': '‚™á','lneqq': '‚â®','lnsim': '‚ã¶','loang': '‚ü¨',
        'loarr': '‚áΩ','lobrk': '‚ü¶','longleftarrow': '‚üµ','longleftrightarrow': '‚ü∑','longmapsto': '‚üº',
        'longrightarrow': '‚ü∂','looparrowleft': '‚Ü´','looparrowright': '‚Ü¨','lopar': '‚¶Ö','lopf': 'ùïù',
        'loplus': '‚®≠','lotimes': '‚®¥','lowast': '‚àó','lowbar': '_','loz': '‚óä',
        'lozenge': '‚óä','lozf': '‚ß´','lpar': '(','lparlt': '‚¶ì','lrarr': '‚áÜ',
        'lrcorner': '‚åü','lrhar': '‚áã','lrhard': '‚•≠','lrm': '','lrtri': '‚äø',
        'lsaquo': '‚Äπ','lscr': 'ùìÅ','lsh': '‚Ü∞','lsim': '‚â≤','lsime': '‚™ç',
        'lsimg': '‚™è','lsqb': '[','lsquo': '‚Äò','lsquor': '‚Äö','lstrok': '≈Ç',
        'lt': '<','ltcc': '‚™¶','ltcir': '‚©π','ltdot': '‚ãñ','lthree': '‚ãã',
        'ltimes': '‚ãâ','ltlarr': '‚•∂','ltquest': '‚©ª','ltrPar': '‚¶ñ','ltri': '‚óÉ',
        'ltrie': '‚ä¥','ltrif': '‚óÇ','lurdshar': '‚•ä','luruhar': '‚•¶','lvertneqq': '‚â®Ô∏Ä',
        'lvnE': '‚â®Ô∏Ä','mDDot': '‚à∫','macr': '¬Ø','male': '‚ôÇ','malt': '‚ú†',
        'maltese': '‚ú†','map': '‚Ü¶','mapsto': '‚Ü¶','mapstodown': '‚Üß','mapstoleft': '‚Ü§',
        'mapstoup': '‚Ü•','marker': '‚ñÆ','mcomma': '‚®©','mcy': '–º','mdash': '‚Äî',
        'measuredangle': '‚à°','mfr': 'ùî™','mho': '‚Ñß','micro': '¬µ','mid': '‚à£',
        'midast': '*','midcir': '‚´∞','middot': '¬∑','minus': '‚àí','minusb': '‚äü',
        'minusd': '‚à∏','minusdu': '‚®™','mlcp': '‚´õ','mldr': '‚Ä¶','mnplus': '‚àì',
        'models': '‚äß','mopf': 'ùïû','mp': '‚àì','mscr': 'ùìÇ','mstpos': '‚àæ',
        'mu': 'Œº','multimap': '‚ä∏','mumap': '‚ä∏','nGg': '‚ãôÃ∏','nGt': '‚â´‚Éí',
        'nGtv': '‚â´Ã∏','nLeftarrow': '‚áç','nLeftrightarrow': '‚áé','nLl': '‚ãòÃ∏','nLt': '‚â™‚Éí',
        'nLtv': '‚â™Ã∏','nRightarrow': '‚áè','nVDash': '‚äØ','nVdash': '‚äÆ','nabla': '‚àá',
        'nacute': '≈Ñ','nang': '‚à†‚Éí','nap': '‚ââ','napE': '‚©∞Ã∏','napid': '‚âãÃ∏',
        'napos': '≈â','napprox': '‚ââ','natur': '‚ôÆ','natural': '‚ôÆ','naturals': '‚Ñï',
        'nbsp': '¬†','nbump': '‚âéÃ∏','nbumpe': '‚âèÃ∏','ncap': '‚©É','ncaron': '≈à',
        'ncedil': '≈Ü','ncong': '‚âá','ncongdot': '‚©≠Ã∏','ncup': '‚©Ç','ncy': '–Ω',
        'ndash': '‚Äì','ne': '‚â†','neArr': '‚áó','nearhk': '‚§§','nearr': '‚Üó',
        'nearrow': '‚Üó','nedot': '‚âêÃ∏','nequiv': '‚â¢','nesear': '‚§®','nesim': '‚âÇÃ∏',
        'nexist': '‚àÑ','nexists': '‚àÑ','nfr': 'ùî´','ngE': '‚âßÃ∏','nge': '‚â±',
        'ngeq': '‚â±','ngeqq': '‚âßÃ∏','ngeqslant': '‚©æÃ∏','nges': '‚©æÃ∏','ngsim': '‚âµ',
        'ngt': '‚âØ','ngtr': '‚âØ','nhArr': '‚áé','nharr': '‚ÜÆ','nhpar': '‚´≤',
        'ni': '‚àã','nis': '‚ãº','nisd': '‚ã∫','niv': '‚àã','njcy': '—ö',
        'nlArr': '‚áç','nlE': '‚â¶Ã∏','nlarr': '‚Üö','nldr': '‚Ä•','nle': '‚â∞',
        'nleftarrow': '‚Üö','nleftrightarrow': '‚ÜÆ','nleq': '‚â∞','nleqq': '‚â¶Ã∏','nleqslant': '‚©ΩÃ∏',
        'nles': '‚©ΩÃ∏','nless': '‚âÆ','nlsim': '‚â¥','nlt': '‚âÆ','nltri': '‚ã™',
        'nltrie': '‚ã¨','nmid': '‚à§','nopf': 'ùïü','not': '¬¨','notin': '‚àâ',
        'notinE': '‚ãπÃ∏','notindot': '‚ãµÃ∏','notinva': '‚àâ','notinvb': '‚ã∑','notinvc': '‚ã∂',
        'notni': '‚àå','notniva': '‚àå','notnivb': '‚ãæ','notnivc': '‚ãΩ','npar': '‚à¶',
        'nparallel': '‚à¶','nparsl': '‚´Ω‚É•','npart': '‚àÇÃ∏','npolint': '‚®î','npr': '‚äÄ',
        'nprcue': '‚ã†','npre': '‚™ØÃ∏','nprec': '‚äÄ','npreceq': '‚™ØÃ∏','nrArr': '‚áè',
        'nrarr': '‚Üõ','nrarrc': '‚§≥Ã∏','nrarrw': '‚ÜùÃ∏','nrightarrow': '‚Üõ','nrtri': '‚ã´',
        'nrtrie': '‚ã≠','nsc': '‚äÅ','nsccue': '‚ã°','nsce': '‚™∞Ã∏','nscr': 'ùìÉ',
        'nshortmid': '‚à§','nshortparallel': '‚à¶','nsim': '‚âÅ','nsime': '‚âÑ','nsimeq': '‚âÑ',
        'nsmid': '‚à§','nspar': '‚à¶','nsqsube': '‚ã¢','nsqsupe': '‚ã£','nsub': '‚äÑ',
        'nsubE': '‚´ÖÃ∏','nsube': '‚äà','nsubset': '‚äÇ‚Éí','nsubseteq': '‚äà','nsubseteqq': '‚´ÖÃ∏',
        'nsucc': '‚äÅ','nsucceq': '‚™∞Ã∏','nsup': '‚äÖ','nsupE': '‚´ÜÃ∏','nsupe': '‚äâ',
        'nsupset': '‚äÉ‚Éí','nsupseteq': '‚äâ','nsupseteqq': '‚´ÜÃ∏','ntgl': '‚âπ','ntilde': '√±',
        'ntlg': '‚â∏','ntriangleleft': '‚ã™','ntrianglelefteq': '‚ã¨','ntriangleright': '‚ã´','ntrianglerighteq': '‚ã≠',
        'nu': 'ŒΩ','num': '#','numero': '‚Ññ','numsp': '‚Äá','nvDash': '‚ä≠',
        'nvHarr': '‚§Ñ','nvap': '‚âç‚Éí','nvdash': '‚ä¨','nvge': '‚â•‚Éí','nvgt': '>‚Éí',
        'nvinfin': '‚ßû','nvlArr': '‚§Ç','nvle': '‚â§‚Éí','nvlt': '<‚Éí','nvltrie': '‚ä¥‚Éí',
        'nvrArr': '‚§É','nvrtrie': '‚äµ‚Éí','nvsim': '‚àº‚Éí','nwArr': '‚áñ','nwarhk': '‚§£',
        'nwarr': '‚Üñ','nwarrow': '‚Üñ','nwnear': '‚§ß','oS': '‚ìà','oacute': '√≥',
        'oast': '‚äõ','ocir': '‚äö','ocirc': '√¥','ocy': '–æ','odash': '‚äù',
        'odblac': '≈ë','odiv': '‚®∏','odot': '‚äô','odsold': '‚¶º','oelig': '≈ì',
        'ofcir': '‚¶ø','ofr': 'ùî¨','ogon': 'Àõ','ograve': '√≤','ogt': '‚ßÅ',
        'ohbar': '‚¶µ','ohm': 'Œ©','oint': '‚àÆ','olarr': '‚Ü∫','olcir': '‚¶æ',
        'olcross': '‚¶ª','oline': '‚Äæ','olt': '‚ßÄ','omacr': '≈ç','omega': 'œâ',
        'omicron': 'Œø','omid': '‚¶∂','ominus': '‚äñ','oopf': 'ùï†','opar': '‚¶∑',
        'operp': '‚¶π','oplus': '‚äï','or': '‚à®','orarr': '‚Üª','ord': '‚©ù',
        'order': '‚Ñ¥','orderof': '‚Ñ¥','ordf': '¬™','ordm': '¬∫','origof': '‚ä∂',
        'oror': '‚©ñ','orslope': '‚©ó','orv': '‚©õ','oscr': '‚Ñ¥','oslash': '√∏',
        'osol': '‚äò','otilde': '√µ','otimes': '‚äó','otimesas': '‚®∂','ouml': '√∂',
        'ovbar': '‚åΩ','par': '‚à•','para': '¬∂','parallel': '‚à•','parsim': '‚´≥',
        'parsl': '‚´Ω','part': '‚àÇ','pcy': '–ø','percnt': '%','period': '.',
        'permil': '‚Ä∞','perp': '‚ä•','pertenk': '‚Ä±','pfr': 'ùî≠','phi': 'œÜ',
        'phiv': 'œï','phmmat': '‚Ñ≥','phone': '‚òé','pi': 'œÄ','pitchfork': '‚ãî',
        'piv': 'œñ','planck': '‚Ñè','planckh': '‚Ñé','plankv': '‚Ñè','plus': '+',
        'plusacir': '‚®£','plusb': '‚äû','pluscir': '‚®¢','plusdo': '‚àî','plusdu': '‚®•',
        'pluse': '‚©≤','plusmn': '¬±','plussim': '‚®¶','plustwo': '‚®ß','pm': '¬±',
        'pointint': '‚®ï','popf': 'ùï°','pound': '¬£','pr': '‚â∫','prE': '‚™≥',
        'prap': '‚™∑','prcue': '‚âº','pre': '‚™Ø','prec': '‚â∫','precapprox': '‚™∑',
        'preccurlyeq': '‚âº','preceq': '‚™Ø','precnapprox': '‚™π','precneqq': '‚™µ','precnsim': '‚ã®',
        'precsim': '‚âæ','prime': '‚Ä≤','primes': '‚Ñô','prnE': '‚™µ','prnap': '‚™π',
        'prnsim': '‚ã®','prod': '‚àè','profalar': '‚åÆ','profline': '‚åí','profsurf': '‚åì',
        'prop': '‚àù','propto': '‚àù','prsim': '‚âæ','prurel': '‚ä∞','pscr': 'ùìÖ',
        'psi': 'œà','puncsp': '‚Äà','qfr': 'ùîÆ','qint': '‚®å','qopf': 'ùï¢',
        'qprime': '‚Åó','qscr': 'ùìÜ','quaternions': '‚Ñç','quatint': '‚®ñ','quest': '?',
        'questeq': '‚âü','quot': '"','rAarr': '‚áõ','rArr': '‚áí','rAtail': '‚§ú',
        'rBarr': '‚§è','rHar': '‚•§','race': '‚àΩÃ±','racute': '≈ï','radic': '‚àö',
        'raemptyv': '‚¶≥','rang': '‚ü©','rangd': '‚¶í','range': '‚¶•','rangle': '‚ü©',
        'raquo': '¬ª','rarr': '‚Üí','rarrap': '‚•µ','rarrb': '‚á•','rarrbfs': '‚§†',
        'rarrc': '‚§≥','rarrfs': '‚§û','rarrhk': '‚Ü™','rarrlp': '‚Ü¨','rarrpl': '‚•Ö',
        'rarrsim': '‚•¥','rarrtl': '‚Ü£','rarrw': '‚Üù','ratail': '‚§ö','ratio': '‚à∂',
        'rationals': '‚Ñö','rbarr': '‚§ç','rbbrk': '‚ù≥','rbrace': '}','rbrack': ']',
        'rbrke': '‚¶å','rbrksld': '‚¶é','rbrkslu': '‚¶ê','rcaron': '≈ô','rcedil': '≈ó',
        'rceil': '‚åâ','rcub': '}','rcy': '—Ä','rdca': '‚§∑','rdldhar': '‚•©',
        'rdquo': '‚Äù','rdquor': '‚Äù','rdsh': '‚Ü≥','real': '‚Ñú','realine': '‚Ñõ',
        'realpart': '‚Ñú','reals': '‚Ñù','rect': '‚ñ≠','reg': '¬Æ','rfisht': '‚•Ω',
        'rfloor': '‚åã','rfr': 'ùîØ','rhard': '‚áÅ','rharu': '‚áÄ','rharul': '‚•¨',
        'rho': 'œÅ','rhov': 'œ±','rightarrow': '‚Üí','rightarrowtail': '‚Ü£','rightharpoondown': '‚áÅ',
        'rightharpoonup': '‚áÄ','rightleftarrows': '‚áÑ','rightleftharpoons': '‚áå','rightrightarrows': '‚áâ','rightsquigarrow': '‚Üù',
        'rightthreetimes': '‚ãå','ring': 'Àö','risingdotseq': '‚âì','rlarr': '‚áÑ','rlhar': '‚áå',
        'rlm': '','rmoust': '‚é±','rmoustache': '‚é±','rnmid': '‚´Æ','roang': '‚ü≠',
        'roarr': '‚áæ','robrk': '‚üß','ropar': '‚¶Ü','ropf': 'ùï£','roplus': '‚®Æ',
        'rotimes': '‚®µ','rpar': ')','rpargt': '‚¶î','rppolint': '‚®í','rrarr': '‚áâ',
        'rsaquo': '‚Ä∫','rscr': 'ùìá','rsh': '‚Ü±','rsqb': ']','rsquo': '‚Äô',
        'rsquor': '‚Äô','rthree': '‚ãå','rtimes': '‚ãä','rtri': '‚ñπ','rtrie': '‚äµ',
        'rtrif': '‚ñ∏','rtriltri': '‚ßé','ruluhar': '‚•®','rx': '‚Ñû','sacute': '≈õ',
        'sbquo': '‚Äö','sc': '‚âª','scE': '‚™¥','scap': '‚™∏','scaron': '≈°',
        'sccue': '‚âΩ','sce': '‚™∞','scedil': '≈ü','scirc': '≈ù','scnE': '‚™∂',
        'scnap': '‚™∫','scnsim': '‚ã©','scpolint': '‚®ì','scsim': '‚âø','scy': '—Å',
        'sdot': '‚ãÖ','sdotb': '‚ä°','sdote': '‚©¶','seArr': '‚áò','searhk': '‚§•',
        'searr': '‚Üò','searrow': '‚Üò','sect': '¬ß','semi': '','seswar': '‚§©',
        'setminus': '‚àñ','setmn': '‚àñ','sext': '‚ú∂','sfr': 'ùî∞','sfrown': '‚å¢',
        'sharp': '‚ôØ','shchcy': '—â','shcy': '—à','shortmid': '‚à£','shortparallel': '‚à•',
        'shy': '','sigma': 'œÉ','sigmaf': 'œÇ','sigmav': 'œÇ','sim': '‚àº',
        'simdot': '‚©™','sime': '‚âÉ','simeq': '‚âÉ','simg': '‚™û','simgE': '‚™†',
        'siml': '‚™ù','simlE': '‚™ü','simne': '‚âÜ','simplus': '‚®§','simrarr': '‚•≤',
        'slarr': '‚Üê','smallsetminus': '‚àñ','smashp': '‚®≥','smeparsl': '‚ß§','smid': '‚à£',
        'smile': '‚å£','smt': '‚™™','smte': '‚™¨','smtes': '‚™¨Ô∏Ä','softcy': '—å',
        'sol': '/','solb': '‚ßÑ','solbar': '‚åø','sopf': 'ùï§','spades': '‚ô†',
        'spadesuit': '‚ô†','spar': '‚à•','sqcap': '‚äì','sqcaps': '‚äìÔ∏Ä','sqcup': '‚äî',
        'sqcups': '‚äîÔ∏Ä','sqsub': '‚äè','sqsube': '‚äë','sqsubset': '‚äè','sqsubseteq': '‚äë',
        'sqsup': '‚äê','sqsupe': '‚äí','sqsupset': '‚äê','sqsupseteq': '‚äí','squ': '‚ñ°',
        'square': '‚ñ°','squarf': '‚ñ™','squf': '‚ñ™','srarr': '‚Üí','sscr': 'ùìà',
        'ssetmn': '‚àñ','ssmile': '‚å£','sstarf': '‚ãÜ','star': '‚òÜ','starf': '‚òÖ',
        'straightepsilon': 'œµ','straightphi': 'œï','strns': '¬Ø','sub': '‚äÇ','subE': '‚´Ö',
        'subdot': '‚™Ω','sube': '‚äÜ','subedot': '‚´É','submult': '‚´Å','subnE': '‚´ã',
        'subne': '‚ää','subplus': '‚™ø','subrarr': '‚•π','subset': '‚äÇ','subseteq': '‚äÜ',
        'subseteqq': '‚´Ö','subsetneq': '‚ää','subsetneqq': '‚´ã','subsim': '‚´á','subsub': '‚´ï',
        'subsup': '‚´ì','succ': '‚âª','succapprox': '‚™∏','succcurlyeq': '‚âΩ','succeq': '‚™∞',
        'succnapprox': '‚™∫','succneqq': '‚™∂','succnsim': '‚ã©','succsim': '‚âø','sum': '‚àë',
        'sung': '‚ô™','sup1': '¬π','sup2': '¬≤','sup3': '¬≥','sup': '‚äÉ',
        'supE': '‚´Ü','supdot': '‚™æ','supdsub': '‚´ò','supe': '‚äá','supedot': '‚´Ñ',
        'suphsol': '‚üâ','suphsub': '‚´ó','suplarr': '‚•ª','supmult': '‚´Ç','supnE': '‚´å',
        'supne': '‚äã','supplus': '‚´Ä','supset': '‚äÉ','supseteq': '‚äá','supseteqq': '‚´Ü',
        'supsetneq': '‚äã','supsetneqq': '‚´å','supsim': '‚´à','supsub': '‚´î','supsup': '‚´ñ',
        'swArr': '‚áô','swarhk': '‚§¶','swarr': '‚Üô','swarrow': '‚Üô','swnwar': '‚§™',
        'szlig': '√ü','target': '‚åñ','tau': 'œÑ','tbrk': '‚é¥','tcaron': '≈•',
        'tcedil': '≈£','tcy': '—Ç','tdot': '‚Éõ','telrec': '‚åï','tfr': 'ùî±',
        'there4': '‚à¥','therefore': '‚à¥','theta': 'Œ∏','thetasym': 'œë','thetav': 'œë',
        'thickapprox': '‚âà','thicksim': '‚àº','thinsp': '‚Äâ','thkap': '‚âà','thksim': '‚àº',
        'thorn': '√æ','tilde': 'Àú','times': '√ó','timesb': '‚ä†','timesbar': '‚®±',
        'timesd': '‚®∞','tint': '‚à≠','toea': '‚§®','top': '‚ä§','topbot': '‚å∂',
        'topcir': '‚´±','topf': 'ùï•','topfork': '‚´ö','tosa': '‚§©','tprime': '‚Ä¥',
        'trade': '‚Ñ¢','triangle': '‚ñµ','triangledown': '‚ñø','triangleleft': '‚óÉ','trianglelefteq': '‚ä¥',
        'triangleq': '‚âú','triangleright': '‚ñπ','trianglerighteq': '‚äµ','tridot': '‚ó¨','trie': '‚âú',
        'triminus': '‚®∫','triplus': '‚®π','trisb': '‚ßç','tritime': '‚®ª','trpezium': '‚è¢',
        'tscr': 'ùìâ','tscy': '—Ü','tshcy': '—õ','tstrok': '≈ß','twixt': '‚â¨',
        'twoheadleftarrow': '‚Üû','twoheadrightarrow': '‚Ü†','uArr': '‚áë','uHar': '‚•£','uacute': '√∫',
        'uarr': '‚Üë','ubrcy': '—û','ubreve': '≈≠','ucirc': '√ª','ucy': '—É',
        'udarr': '‚áÖ','udblac': '≈±','udhar': '‚•Æ','ufisht': '‚•æ','ufr': 'ùî≤',
        'ugrave': '√π','uharl': '‚Üø','uharr': '‚Üæ','uhblk': '‚ñÄ','ulcorn': '‚åú',
        'ulcorner': '‚åú','ulcrop': '‚åè','ultri': '‚ó∏','umacr': '≈´','uml': '¬®',
        'uogon': '≈≥','uopf': 'ùï¶','uparrow': '‚Üë','updownarrow': '‚Üï','upharpoonleft': '‚Üø',
        'upharpoonright': '‚Üæ','uplus': '‚äé','upsi': 'œÖ','upsih': 'œí','upsilon': 'œÖ',
        'upuparrows': '‚áà','urcorn': '‚åù','urcorner': '‚åù','urcrop': '‚åé','uring': '≈Ø',
        'urtri': '‚óπ','uscr': 'ùìä','utdot': '‚ã∞','utilde': '≈©','utri': '‚ñµ',
        'utrif': '‚ñ¥','uuarr': '‚áà','uuml': '√º','uwangle': '‚¶ß','vArr': '‚áï',
        'vBar': '‚´®','vBarv': '‚´©','vDash': '‚ä®','vangrt': '‚¶ú','varepsilon': 'œµ',
        'varkappa': 'œ∞','varnothing': '‚àÖ','varphi': 'œï','varpi': 'œñ','varpropto': '‚àù',
        'varr': '‚Üï','varrho': 'œ±','varsigma': 'œÇ','varsubsetneq': '‚ääÔ∏Ä','varsubsetneqq': '‚´ãÔ∏Ä',
        'varsupsetneq': '‚äãÔ∏Ä','varsupsetneqq': '‚´åÔ∏Ä','vartheta': 'œë','vartriangleleft': '‚ä≤','vartriangleright': '‚ä≥',
        'vcy': '–≤','vdash': '‚ä¢','vee': '‚à®','veebar': '‚äª','veeeq': '‚âö',
        'vellip': '‚ãÆ','verbar': '|','vert': '|','vfr': 'ùî≥','vltri': '‚ä≤',
        'vnsub': '‚äÇ‚Éí','vnsup': '‚äÉ‚Éí','vopf': 'ùïß','vprop': '‚àù','vrtri': '‚ä≥',
        'vscr': 'ùìã','vsubnE': '‚´ãÔ∏Ä','vsubne': '‚ääÔ∏Ä','vsupnE': '‚´åÔ∏Ä','vsupne': '‚äãÔ∏Ä',
        'vzigzag': '‚¶ö','wcirc': '≈µ','wedbar': '‚©ü','wedge': '‚àß','wedgeq': '‚âô',
        'weierp': '‚Ñò','wfr': 'ùî¥','wopf': 'ùï®','wp': '‚Ñò','wr': '‚âÄ',
        'wreath': '‚âÄ','wscr': 'ùìå','xcap': '‚ãÇ','xcirc': '‚óØ','xcup': '‚ãÉ',
        'xdtri': '‚ñΩ','xfr': 'ùîµ','xhArr': '‚ü∫','xharr': '‚ü∑','xi': 'Œæ',
        'xlArr': '‚ü∏','xlarr': '‚üµ','xmap': '‚üº','xnis': '‚ãª','xodot': '‚®Ä',
        'xopf': 'ùï©','xoplus': '‚®Å','xotime': '‚®Ç','xrArr': '‚üπ','xrarr': '‚ü∂',
        'xscr': 'ùìç','xsqcup': '‚®Ü','xuplus': '‚®Ñ','xutri': '‚ñ≥','xvee': '‚ãÅ',
        'xwedge': '‚ãÄ','yacute': '√Ω','yacy': '—è','ycirc': '≈∑','ycy': '—ã',
        'yen': '¬•','yfr': 'ùî∂','yicy': '—ó','yopf': 'ùï™','yscr': 'ùìé',
        'yucy': '—é','yuml': '√ø','zacute': '≈∫','zcaron': '≈æ','zcy': '–∑',
        'zdot': '≈º','zeetrf': '‚Ñ®','zeta': 'Œ∂','zfr': 'ùî∑','zhcy': '–∂',
    },
    strftimeFormat: "%Y-%m-%d %H:%M:%S %Z",
    strftimeMap: {
        weekDays: {
            "": [ 'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat' ]
        },
        weekDaysFull: {
            "": [ 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday' ]
        },
        months: {
            "": [ 'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec' ]
        },
        monthsFull: {
            "": [ 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December' ]
        },
    },
    tzMap: [
        // name, GMT offset, daylight, linux support
        ["EDT", "GMT-0400", true],
        ["EST", "GMT-0500", false],
        ["PDT", "GMT-0700", true],
        ["PST", "GMT-0800", false],
        ["CDT", "GMT-0500", true],
        ["CST", "GMT-0600", false],
        ["MDT", "GMT-0600", true],
        ["MST", "GMT-0700", false],
        ["HADT", "GMT-0900", true, false],
        ["HAST", "GMT-1000", false, false],
        ["AKDT", "GMT-0800", true, false],
        ["AKST", "GMT-0900", false, false],
        ["ADT", "GMT-0300", true, false],
        ["AST", "GMT-0400", false, false],
    ],
    // Respawn throttling
    respawn: { interval: 3000, timeout: 2000, delay: 30000, count: 4, time: null, events: 0 },
    // Empty function to be used when callback was no provided
    empty: {},
    emptylist: [],
    noop: function() {},
};

module.exports = lib;

// Run a callback if a valid function, all arguments after the callback will be passed as is
lib.tryCall = function(callback)
{
    if (typeof callback == "function") return callback.apply(null, Array.prototype.slice.call(arguments, 1));
    if (callback) logger.warn("tryCall:", arguments, new Error().stack);
}

// Run a callback inside try..catch block, all arguments after the callback will be passed as is, in case of error
// all arguments will be printed in the log
lib.tryCatch = function(callback)
{
    var args = Array.prototype.slice.call(arguments, 1);
    try {
        callback.apply(null, args);
    } catch (e) {
        args.unshift(e.stack);
        args.unshift("tryCatch:");
        logger.error.apply(logger, args);
    }
}

// Print all arguments into the console, for debugging purposes, if the first arg is an error only print the error
lib.log = function()
{
    if (util.isError(arguments[0])) return console.log(lib.traceError(arguments[0]));
    for (var i = 0; i < arguments.length; i++) {
        console.log(util.inspect(arguments[i], { depth: 5 }));
    }
}

// Simple i18n translation method compatible with other popular modules, supports the following usage:
// - __(name)
// - __(fmt, arg,...)
// - __({ phrase: "", locale: "" }, arg...
//
lib.__ = function()
{
    var lang = this.locale, txt, msg = arguments[0];

    if (typeof arguments[0] === "object" && arguments[0].phrase) {
        msg = arguments[0].phrase;
        lang = arguments[0].locale || lang;
    }
    var locale = lib.locales[lang];
    if (!locale && typeof lang == "string" && lang.indexOf("-") > 0) {
        locale = lib.locales[lang.split("-")[0]];
    }
    if (locale) {
        txt = locale[msg];
        if (!txt) logger.info("missing-locale:", lang, msg);
    }
    if (!txt) txt = msg;
    if (arguments.length == 1) return txt;
    return lib.sprintf(txt, Array.prototype.slice.call(arguments, 1));
}

// Return commandline argument value by name
lib.getArg = function(name, dflt)
{
    var idx = process.argv.lastIndexOf(name);
    var val = idx > -1 && idx + 1 < process.argv.length ? process.argv[idx + 1] : "";
    if (val[0] == "-") val = "";
    if (!val && typeof dflt != "undefined") val = dflt;
    return val;
}

// Return commandline argument value as a number
lib.getArgInt = function(name, dflt)
{
    return this.toNumber(this.getArg(name, dflt));
}

// Returns true of given arg(s) are present in the command line, name can be a string or an array of strings.
lib.isArg = function(name)
{
    if (!Array.isArray(name)) return process.argv.lastIndexOf(name) > 0;
    return name.some(function(x) { return process.argv.lastIndexOf(x) > 0 });
}

// Register the callback to be run later for the given message, the message may have the `__id` property which will be used for keeping track of the responses or it will be generated.
// The `parent` can be any object and is used to register the timer and keep reference to it.
//
// A timeout is created for this message, if `runCallback` for this message will not be called in time the timeout handler will call the callback
// anyway with the original message.
//
// The callback passed will be called with only one argument which is the message, what is inside the message this function does not care. If
// any errors must be passed, use the message object for it, no other arguments are expected.
lib.deferCallback = function(parent, msg, callback, timeout)
{
    if (!this.isObject(msg) || !callback) return;

    if (!msg.__deferId) msg.__deferId = this.deferId++;
    parent[msg.__deferId] = {
        callback: callback,
        timer: setTimeout(this.onDeferCallback.bind(parent, msg), timeout || this.deferTimeout)
    };
}

// To be called on timeout or when explicitely called by the `runCallback`, it is called in the context of the message.
lib.onDeferCallback = function(msg)
{
    var item = this[msg.__deferId];
    if (!item) return;
    delete this[msg.__deferId];
    clearTimeout(item.timer);
    logger.dev("onDeferCallback:", msg);
    try { item.callback(msg); } catch (e) { logger.error('onDeferCallback:', e, msg, e.stack); }
}

// Run delayed callback for the message previously registered with the `deferCallback` method.
// The message must have `id` property which is used to find the corresponding callback, if the msg is a JSON string it will be converted into the object.
//
// Same parent object must be used for `deferCallback` and this method.
lib.runCallback = function(parent, msg)
{
    if (msg && typeof msg == "string") msg = this.jsonParse(msg, { logger: "error" });
    if (!msg || !msg.__deferId || !parent[msg.__deferId]) return;
    setImmediate(this.onDeferCallback.bind(parent, msg));
}

// Assign or clear an interval timer, keep the reference in the given parent object
lib.deferInterval = function(parent, interval, name, callback)
{
    var tname = "_" + name + "Timer";
    var iname = "_" + name + "Interval";
    if (interval != parent[iname]) {
        if (parent[tname]) clearInterval(parent[tname]);
        if (interval > 0) {
            parent[tname] = setInterval(callback, interval);
            parent[iname] = interval;
        } else {
            delete parent[iname];
            delete parent[tname];
        }
    }
}

// Return object with geohash for given coordinates to be used for location search
//
// The options may contain the following properties:
//   - distance - limit the range key with the closest range smaller than then distance, required for search but for updates may be omitted
//   - minDistance - radius for the smallest bounding box in km containing single location, radius searches will combine neighboring boxes of
//      this size to cover the whole area with the given distance request, also this affects the length of geohash keys stored in the bk_location table
//      if not specified default `min-distance` value will be used.
lib.geoHash = function(latitude, longitude, options)
{
    if (!options) options = {};
    var minDistance = options.minDistance || 0.01;
    var range = this.geoHashRanges.filter(function(x) { return x[1] > minDistance })[0];
    var geohash = bkutils.geoHashEncode(latitude, longitude);
    return { geohash: geohash.substr(0, range[0]),
             _geohash: geohash,
             neighbors: options.distance ? bkutils.geoHashGrid(geohash.substr(0, range[0]), Math.ceil(options.distance / range[1])).slice(1) : [],
             latitude: latitude,
             longitude: longitude,
             minRange: range[1],
             minDistance: minDistance,
             distance: options.distance || 0 };
}

// Return distance between two locations
//
// The options can specify the following properties:
// - round - a number how to round the distance
//
//  Example: round to the nearest full 5 km and use only 1 decimal point, if the distance is 13, it will be 15.0
//
//      lib.geoDistance(34, -188, 34.4, -119, { round: 5.1 })
//
lib.geoDistance = function(latitude1, longitude1, latitude2, longitude2, options)
{
    var distance = bkutils.geoDistance(latitude1, longitude1, latitude2, longitude2);
    if (isNaN(distance) || distance === null || typeof distance == "undefined") return null;

    // Round the distance to the closes edge and fixed number of decimals
    if (options && typeof options.round == "number" && options.round > 0) {
        var decs = String(options.round).split(".")[1];
        distance = parseFloat(Number(Math.floor(distance/options.round)*options.round).toFixed(decs ? decs.length : 0));
        if (isNaN(distance)) return null;
    }
    return distance;
}

// Busy timer handler, supports commands:
// - init - start the timer with the given latency in ms
// - get - returns the latest latency
// - busy - returns true if busy i.e. latency is greater than configured
lib.busyTimer = function(name, val)
{
    switch (name) {
    case "init":
        bkutils.initBusy(val);
        break;
    case "get":
        return bkutils.getBusy();
    case "busy":
        return bkutils.isBusy();
    }
}

// Sort a list be version in descending order, an item can be a string or an object with
// a property to sort by, in such case `name` must be specified which property to use for sorting.
// The name format is assumed to be: `XXXXX-N.N.N`
lib.sortByVersion = function(list, name)
{
    if (!Array.isArray(list)) return [];
    return list.sort(function(a, b) {
        var v1 = typeof a == "string" ? a : a[name];
        var v2 = typeof b == "string" ? b : b[name];
        var n1 = v1 && v1.match(/^(.+)[ -]([0-9.]+)$/);
        if (n1) n1[2] = lib.toVersion(n1[2]);
        var n2 = v2 && v2.match(/^(.+)[ -]([0-9.]+)$/);
        if (n2) n2[2] = lib.toVersion(n2[2]);
        return !n1 || !n2 ? 0 : n1[1] > n2[1] ? -1 : n1[1] < n2[1] ? 1 : n2[2] - n1[2];
    });
}

// Return an object with user info from the /etc/passwd file, user can be uid or name, if user is ommitted the current user is returned
lib.getUser = function(user)
{
    return bkutils.getUser(user);
}

// Return an object with specified group info for the current user of for the given group id or name
lib.getGroup = function(group)
{
    return bkutils.getGroup(group);
}

// Drop root privileges and switch to a regular user
lib.dropPrivileges = function(uid, gid)
{
    if (process.getuid() == 0 && uid) {
        logger.debug('init: switching to', uid, gid);
        try { process.setgid(gid); } catch (e) { logger.error('setgid:', gid, e); }
        try { process.setuid(uid); } catch (e) { logger.error('setuid:', uid, e); }
    }
}

// Convert an IP address into integer
lib.ip2int = function(ip)
{
    return ip.split('.').reduce((int, oct) => (int << 8) + parseInt(oct, 10), 0) >>> 0;
}

// Convert an integer into IP address
lib.int2ip = function(int)
{
    return [(int >>> 24) & 0xFF, (int >>> 16) & 0xFF, (int >>> 8) & 0xFF, int & 0xFF].join('.');
}

// Return true if the given IP address is within the given CIDR block
lib.inCidr = function(ip, cidr)
{
    const [range, bits = 32] = cidr.split('/');
    const mask = ~(Math.pow(2, (32 - bits)) - 1);
    return (this.ip2int(ip) & mask) === (this.ip2int(range) & mask);
};

// Return first and last IP addresses for the CIDR block
lib.cidrRange = function(cidr)
{
    const [range, bits = 32] = cidr.split('/');
    const mask = ~(Math.pow(2, (32 - bits)) - 1);
    return [this.int2ip(this.ip2int(range) & mask), this.int2ip(this.ip2int(range) | ~mask)];
}


// Randomize the list items in place
lib.shuffle = function(list)
{
    if (!Array.isArray(list)) return [];
    if (list.length == 1) return list;
    for (var i = 0; i < list.length; i++) {
        var j = Math.round((list.length - 1) * this.randomFloat());
        if (i == j) {
            continue;
        }
        var item = list[j];
        list[j] = list[i];
        list[i] = item;
    }
    return list;
}

// Extract domain from the host name, takes all host parts except the first one
lib.domainName = function(host)
{
    if (typeof host != "string" || !host) return "";
    var name = this.strSplit(host, '.');
    return (name.length > 2 ? name.slice(1).join('.') : host).toLowerCase();
}

// Return a new Error object, msg can be a string or an object with message, code, status properties.
// The default error status is 400 if not specified.
lib.newError = function(msg, status, code)
{
    if (typeof msg == "string") msg = { status: typeof status == "number" ? status : 400, message: msg };
    var err = new Error(msg && msg.message || this.__("Internal error occurred, please try again later"));
    for (const p in msg) err[p] = msg[p];
    if (!err.status) err.status = 400;
    if (code) err.code = code;
    return err;
}

// Returns the error stack or the error itself, to be used in error messages
lib.traceError = function(err)
{
    return this.objDescr(err || "", { ignore: /^domain|req|res$/ }) + " " + (util.isError(err) && err.stack ? err.stack : "");
}

// Load a file with locale translations into memory
lib.loadLocale = function(file, callback)
{
    fs.readFile(file, function(err, data) {
        if (!err) {
            var d = lib.jsonParse(data.toString(), { logger: "error" });
            if (d) lib.locales[path.basename(file, ".json")] = d;
        }
        logger[err && err.code != "ENOENT" ? "error" : "debug"]("loadLocale:", file, err);
        if (typeof callback == "function") callback(err, d);
    });
}

// Run the process and return all output to the callback, this a simply wrapper around child_processes.exec so the lib.runProcess
// can be used without importing the child_processes module. All fatal errors are logged.
lib.execProcess = function(cmd, callback)
{
    return child.exec(cmd, (err, stdout, stderr) => {
        logger.debug('execProcess:', cmd, err, stderr);
        lib.tryCall(callback, err, typeof stdout == "string" ? stdout : "", typeof stderr == "string" ? stderr : "");
    });
}

// Return a list of matching processes, Linux only
lib.findProcess = function(options, callback)
{
    if (os.platform() == "linux") {
        lib.findFile("/proc", { include: /^\/proc\/[0-9]+$/, exclude: new RegExp("^/proc/" + process.pid + "$"), depth: 0, base: 1 }, (err, files) => {
            if (!err) {
                files = files.map((x) => ({ pid: x, cmd: lib.readFileSync(`/proc/${x}/cmdline`).replace(/\0/g," ").trim() })).
                        filter((x) => (options.filter ? x.cmd.match(options.filter) : x.cmd));
            }
            callback(err, files);
        });
    } else {
        lib.execProcess("/bin/ps agx -o pid,args", (err, stdout, stderr) => {
            var list = stdout.split("\n").
                              filter((x) => (lib.toNumber(x) != process.pid && (options.filter ? x.match(options.filter) : 1))).
                              map((x) => ({ pid: lib.toNumber(x), cmd: x.replace(/^[0-9]+/, "").trim() }));

            callback(err, list);
        });
    }
}

// Run specified command with the optional arguments, this is similar to child_process.spawn with callback being called after the process exited
//
//  Example
//
//          lib.spawProcess("ls", "-ls", { cwd: "/tmp" }, lib.log)
//
lib.spawnProcess = function(cmd, args, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (!options) options = { stdio: "inherit", env: process.env, cwd: process.cwd() };
    if (!options.stdio) options.stdio = "inherit";
    if (!Array.isArray(args)) args = [ args ];
    var proc = child.spawn(cmd, args, options);
    proc.on("error", function(err) {
        logger.error("spawnProcess:", cmd, args, err);
        lib.tryCall(callback, err);
    });
    proc.on('exit', function (code, signal) {
        logger.debug("spawnProcess:", cmd, args, "exit", code || signal);
        lib.tryCall(callback, code || signal);
    });
    return proc;
}

// If respawning too fast, delay otherwise call the callback after a short timeout
lib.checkRespawn = function(callback)
{
    if (this.exiting) return;
    var now = Date.now();
    logger.debug('checkRespawn:', this.respawn, now - this.respawn.time);
    if (this.respawn.time && now - this.respawn.time < this.respawn.interval) {
        if (this.respawn.count && this.respawn.events >= this.respawn.count) {
            logger.log('checkRespawn:', 'throttling for', this.respawn.delay, 'after', this.respawn.events, 'respawns');
            this.respawn.events = 0;
            this.respawn.time = now;
            return setTimeout(callback, this.respawn.delay);
        }
        this.respawn.events++;
    } else {
        this.respawn.events = 0;
    }
    this.respawn.time = now;
    setTimeout(callback, this.respawn.timeout);
}

// Run a series of commands, `cmds` is an object where a property name is a command to execute and the value is an array of arguments or null.
// if `options.error` is 1, then stop on first error or if non-zero status on a process exit.
//
//  Example:
//
//          lib.spawnSeries({"ls": "-la",
//                            "ps": "augx",
//                            "du": { argv: "-sh", stdio: "inherit", cwd: "/tmp" },
//                            "uname": ["-a"] },
//                           lib.log)
//
lib.spawnSeries = function(cmds, options, callback)
{
    if (typeof options == "function") callback = options, options = null;
    if (!options) options = { stdio: "inherit", env: process.env, cwd: process.cwd };
    this.forEachSeries(Object.keys(cmds), function(cmd, next) {
        var argv = cmds[cmd], opts = options;
        switch (lib.typeName(argv)) {
        case "null":
            argv = [];
            break;

        case "object":
            opts = argv;
            argv = opts.argv;
            break;

        case "array":
        case "string":
            break;

        default:
            logger.error("spawnSeries:", "invalid arguments", cmd, argv);
            return next(options.error ? lib.newError("invalid args", cmd) : null);
        }
        if (!options.stdio) options.stdio = "inherit";
        if (typeof argv == "string") argv = [ argv ];
        lib.spawnProcess(cmd, argv, opts, function(err) {
            next(options.error ? err : null);
        });
    }, callback);
}

// Returns current time in microseconds
lib.clock = function()
{
    return bkutils.getTimeOfDay();
}

// Return number of seconds for current time
lib.now = function()
{
    return Math.round(Date.now()/1000);
}

// Return an ISO week number for given date, from https://www.epochconverter.com/weeknumbers
lib.weekOfYear = function(date, utc)
{
    date = this.toDate(date, null);
    if (!date) return 0;
    utc = utc ? "UTC": "";
    var target = new Date(date.valueOf());
    target[`set${utc}Date`](target[`get${utc}Date`]() - ((date[`get${utc}Day`]() + 6) % 7) + 3);
    var firstThursday = target.valueOf();
    target[`set${utc}Month`](0, 1);
    var day = target[`get${utc}Day`]();
    if (day != 4) target[`set${utc}Month`](0, 1 + ((4 - day) + 7) % 7);
    return 1 + Math.ceil((firstThursday - target) / 604800000);
}

// Returns true if the given date is in DST timezone
lib.isDST = function(date)
{
    var jan = new Date(date.getFullYear(), 0, 1).getTimezoneOffset();
    var jul = new Date(date.getFullYear(), 6, 1).getTimezoneOffset();
    return Math.max(jan, jul) != date.getTimezoneOffset();
}

// Return a timezone human name if matched (EST, PDT...), tz must be in GMT-NNNN format
lib.tzName = function(tz)
{
    if (!tz || typeof tz != "string") return "";
    var t = tz.indexOf(":") > 0 ? tz.replace(":", "") : tz;
    for (const i in this.tzMap) {
        if (t == this.tzMap[i][1]) return this.tzMap[i][0];
    }
    return tz;
}

// Returns 0 if the current time is not within specified valid time range or it is invalid. Only continious time rang eis support, it
// does not handle over the midninght ranges, i.e. time1 is always must be greater than time2.
//
// `options.tz` to specify timezone, no timezone means current timezone.
// `options.date` if given must be a list of dates in the format: YYY-MM-DD,...
lib.isTimeRange = function(time1, time2, options)
{
    if (!time1 && !time2) return 0;
    var now = new Date(), tz = options && options.tz;
    if (tz === "GMT" || tz === "UTC") {
        tz = 0;
    } else {
        tz = typeof tz == "string" && tz.match(/GMT(-|\+)?([0-9]{2}):?([0-9]{2})/);
        if (tz) tz = (parseInt(tz[2], 10) * 3600000 + parseInt(tz[3], 10) * 60000) * (tz[1] == "+" ? 1 : -1);
        if (!tz) tz = now.getTimezoneOffset() * -60000;
    }
    now = new Date(now.getTime() + tz);
    if (options && options.date) {
        if (lib.strftime(now, "%Y-%m-%d") != lib.strftime(lib.toDate(options.date), "%Y-%m-%d")) return 0;
    }
    var h0 = now.getUTCHours();
    var m0 = now.getUTCMinutes();
    if (time1) {
        const d = String(time1).match(/^(([0-9]+)|([0-9]+):([0-9]+)) *(am|AM|pm|PM)?$/);
        if (!d) return 0;
        let h1 = lib.toNumber(d[2] || d[3]);
        const m1 = lib.toNumber(d[4]);
        switch (d[5]) {
        case "am":
        case "AM":
            if (h1 >= 12) h1 -= 12;
            break;
        case "pm":
        case "PM":
            if (h1 < 12) h1 += 12;
            break;
        }
        logger.debug("isTimeRange:", "start:", h0, m0, " - ", h1, m1, d[5], "tz:", tz, "now:", now);
        if (h0*100+m0 < h1*100+m1) return 0;
    }
    if (time2) {
        const d = String(time2).match(/^(([0-9]+)|([0-9]+):([0-9]+)) *(am|AM|pm|PM)?$/);
        if (!d) return 0;
        let h1 = lib.toNumber(d[2] || d[3]);
        const m1 = lib.toNumber(d[4]);
        switch (d[5]) {
        case "am":
        case "AM":
            if (h1 > 12) h1 -= 12;
            break;
        case "pm":
        case "PM":
            if (h1 <= 12) h1 += 12;
            break;
        }
        logger.debug("isTimeRange:", "end:", h0, m0, " - ", h1, m1, d[5], "tz:", tz, "now:", now);
        if (h0*100+m0 > h1*100+m1) return 0;
    }
    return 1;
}

// Return object type, try to detect any distinguished type
lib.typeName = function(v)
{
    if (v === null) return "null";
    var t = typeof(v);
    if (t === "object") {
        switch (v.constructor && v.constructor.name) {
        case "Array":
        case "Buffer":
        case "Date":
        case "Error":
        case "RegExp":
            return v.constructor.name.toLowerCase();
        }
    }
    return t;
}

// Returns true of the argument is a generic object, not a null, Buffer, Date, RegExp or Array
lib.isObject = function(v)
{
    return this.typeName(v) === "object";
}

// Return true if the value is a number
lib.isNumber = function(val)
{
    return typeof val === "number" && !isNaN(val);
}

// Return true if the value is prefixed
lib.isPrefix = function(val, prefix)
{
    return typeof prefix == "string" && prefix &&
           typeof val == "string" && val.substr(0, prefix.length) == prefix;
}

// Returns true if the value represents an UUID
lib.isUuid = function(val, prefix)
{
    if (this.rxUuid.test(val)) {
        if (typeof prefix == "string" && prefix) {
            if (val.substr(0, prefix.length) != prefix) return false;
        }
        return true;
    }
    return false;
}

// Returns true if the value represent tuuid
lib.isTuuid = function(str)
{
    if (typeof str != "string" || !str) return 0;
    var idx = str.indexOf("_");
    if (idx > 0) str = str.substr(idx + 1);
    var bytes = Buffer.from(str, 'hex');
    if (bytes.length != 15) return 0;
    return 1;
}

// Returns true of a string contains Unicode characters
lib.isUnicode = function(str)
{
    return /[\u007F-\uFFFF]/g.test(str);
}

// Returns true if a number is positive, i.e. greater than zero
lib.isPositive = function(val)
{
    return this.isNumber(val) && val > 0;
}

// Returns the array if the value is non empty array or dflt value if given or undefined
lib.isArray = function(val, dflt)
{
    return Array.isArray(val) && val.length ? val : dflt;
}

// Return true of the given value considered empty
lib.isEmpty = function(val)
{
    switch (this.typeName(val)) {
    case "null":
    case "undefined":
        return true;
    case "buffer":
    case "array":
        return val.length == 0;
    case "number":
    case "date":
        return isNaN(val);
    case "regexp":
    case "boolean":
    case "function":
        return false;
    case "object":
        for (const p in val) return false;
        return true;
    case "string":
        return this.rxEmpty.test(val) ? true : false;
    default:
        return val ? false: true;
    }
}

// Returns true if the value is a number or string representing a number
lib.isNumeric = function(val)
{
    if (typeof val == "number") return true;
    if (typeof val != "string") return false;
    return this.rxNumber.test(val);
}

// Returns true if the given type belongs to the numeric family of data types
lib.isNumericType = function(type)
{
    return type && this.rxNumericType.test(String(type).trim());
}

// Returns true if the given date is valid
lib.isDate = function(d)
{
    return util.isDate(d) && !isNaN(d.getTime());
}

// Returns true if `name` exists in the array `list`, search is case sensitive. if `name` is an array it will return true if
// any element in the array exists in the `list`.
lib.isFlag = function(list, name)
{
    return Array.isArray(list) && (Array.isArray(name) ? name.some(function(x) { return list.indexOf(x) > -1 }) : list.indexOf(name) > -1);
}

// Returns first valid number from the list of arguments or 0
lib.validNum = function(...args)
{
    for (const i in args) {
        if (this.isNumber(args[i])) return args[i];
    }
    return 0;
}

// Returns first valid positive number from the list of arguments or 0
lib.validPositive = function(...args)
{
    for (const i in args) {
        if (this.isPositive(args[i])) return args[i];
    }
    return 0;
}

// Returns first valid boolean from the list of arguments or false
lib.validBool = function(...args)
{
    for (const i in args) {
        if (typeof args[i] == "boolean") return args[i];
    }
    return false;
}


